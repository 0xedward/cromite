From: Your Name <you@example.com>
Date: Mon, 6 Mar 2023 10:01:54 +0000
Subject: 111 Bromite subresource adblocker

---
 .../adblock_updater_service.cc                | 21 ++++++++-----------
 .../adblock_updater_service.h                 |  2 --
 .../download_filters_task.cc                  |  4 +---
 .../component_updater/download_filters_task.h |  1 -
 4 files changed, 10 insertions(+), 18 deletions(-)

diff --git a/components/component_updater/adblock_updater_service.cc b/components/component_updater/adblock_updater_service.cc
--- a/components/component_updater/adblock_updater_service.cc
+++ b/components/component_updater/adblock_updater_service.cc
@@ -23,13 +23,10 @@
 #include <utility>
 #include <vector>
 
-#include "base/bind.h"
-#include "base/callback.h"
 #include "base/files/file_path.h"
 #include "base/files/file_util.h"
 #include "base/logging.h"
 #include "base/threading/thread_checker.h"
-#include "base/threading/thread_task_runner_handle.h"
 #include "base/time/time.h"
 #include "base/timer/timer.h"
 #include "url/gurl.h"
@@ -116,14 +113,14 @@ bool AdBlockUpdaterService::OnDemandUpdateAsNeeded(bool is_foreground, Callback
   }
 
   if (is_updating_) {
-    base::ThreadTaskRunnerHandle::Get()->PostTask(
+    base::SequencedTaskRunner::GetCurrentDefault()->PostTask(
         FROM_HERE, base::BindOnce(std::move(on_finished),
                                     Error::UPDATE_IN_PROGRESS));
     return false;
   }
   is_updating_ = true;
 
-  base::ThreadTaskRunnerHandle::Get()->PostTask(
+  base::SequencedTaskRunner::GetCurrentDefault()->PostTask(
       FROM_HERE, base::BindOnce(&AdBlockUpdaterService::NotifyObservers, base::Unretained(this), Event::ADBLOCK_CHECKING_FOR_UPDATES));
 
   base::Time::Exploded e = {0};
@@ -193,11 +190,11 @@ bool AdBlockUpdaterService::OnDemandUpdateAsNeeded(bool is_foreground, Callback
 
   // run task now; task is responsible for downloading the filters (if Last-Modified header is more recent)
   // and then clearing the 'is_updating' status
-  base::ThreadTaskRunnerHandle::Get()->PostTask(FROM_HERE,
+  base::SequencedTaskRunner::GetCurrentDefault()->PostTask(FROM_HERE,
       base::BindOnce(&DownloadFiltersTask::Run, base::Unretained(task.get())));
   tasks_.insert(task);
 
-  base::ThreadTaskRunnerHandle::Get()->PostTask(
+  base::SequencedTaskRunner::GetCurrentDefault()->PostTask(
       FROM_HERE, base::BindOnce(&AdBlockUpdaterService::NotifyObservers, base::Unretained(this), Event::ADBLOCK_UPDATE_DOWNLOADING));
 
   return true;
@@ -210,7 +207,7 @@ void AdBlockUpdaterService::OnUpdateComplete(Callback on_finished,
 
   auto file_path = task->file_path();
   if (error == Error::NONE) {
-    base::ThreadTaskRunnerHandle::Get()->PostTask(
+    base::SequencedTaskRunner::GetCurrentDefault()->PostTask(
         FROM_HERE, base::BindOnce(&AdBlockUpdaterService::NotifyObservers, base::Unretained(this), Event::ADBLOCK_UPDATE_READY));
 
     subresource_filter::UnindexedRulesetInfo ruleset_info;
@@ -246,20 +243,20 @@ void AdBlockUpdaterService::OnUpdateComplete(Callback on_finished,
       LOG(WARNING) << "AdBlockUpdaterService: invalid Last-Modified header, ignoring version check.";
     ruleset_service_->IndexAndStoreAndPublishRulesetIfNeeded(ruleset_info, ignore_version);
 
-    base::ThreadTaskRunnerHandle::Get()->PostTask(
+    base::SequencedTaskRunner::GetCurrentDefault()->PostTask(
         FROM_HERE, base::BindOnce(&AdBlockUpdaterService::NotifyObservers, base::Unretained(this), Event::ADBLOCK_UPDATED));
   } else if (error == Error::UPDATE_NOT_NEEDED) {
-    base::ThreadTaskRunnerHandle::Get()->PostTask(
+    base::SequencedTaskRunner::GetCurrentDefault()->PostTask(
         FROM_HERE, base::BindOnce(&AdBlockUpdaterService::NotifyObservers, base::Unretained(this), Event::ADBLOCK_NOT_UPDATED));
   } else {
-    base::ThreadTaskRunnerHandle::Get()->PostTask(
+    base::SequencedTaskRunner::GetCurrentDefault()->PostTask(
         FROM_HERE, base::BindOnce(&AdBlockUpdaterService::NotifyObservers, base::Unretained(this), Event::ADBLOCK_UPDATE_ERROR));
   }
 
   //TODO: run these only when index-and-store is actually finished?
   // would require exposing the callback in IndexAndStoreAndPublishRulesetIfNeeded
   if (!on_finished.is_null()) {
-    base::ThreadTaskRunnerHandle::Get()->PostTask(
+    base::SequencedTaskRunner::GetCurrentDefault()->PostTask(
         FROM_HERE, base::BindOnce(std::move(on_finished), error));
   }
 
diff --git a/components/component_updater/adblock_updater_service.h b/components/component_updater/adblock_updater_service.h
--- a/components/component_updater/adblock_updater_service.h
+++ b/components/component_updater/adblock_updater_service.h
@@ -24,8 +24,6 @@
 #include <string>
 #include <vector>
 
-#include "base/callback_forward.h"
-#include "base/gtest_prod_util.h"
 #include "base/memory/ref_counted.h"
 #include "base/observer_list.h"
 #include "base/version.h"
diff --git a/components/component_updater/download_filters_task.cc b/components/component_updater/download_filters_task.cc
--- a/components/component_updater/download_filters_task.cc
+++ b/components/component_updater/download_filters_task.cc
@@ -19,9 +19,7 @@
 #include <utility>
 
 #include "base/files/file_util.h"
-#include "base/bind.h"
 #include "base/location.h"
-#include "base/threading/thread_task_runner_handle.h"
 #include "base/logging.h"
 #include "net/base/load_flags.h"
 #include "url/gurl.h"
@@ -208,7 +206,7 @@ void DownloadFiltersTask::Cancel() {
 void DownloadFiltersTask::TaskComplete(Error error) {
   DCHECK(thread_checker_.CalledOnValidThread());
 
-  base::ThreadTaskRunnerHandle::Get()->PostTask(
+  base::SequencedTaskRunner::GetCurrentDefault()->PostTask(
       FROM_HERE, base::BindOnce(std::move(complete_callback_),
                                 scoped_refptr<DownloadFiltersTask>(this), error));
 }
diff --git a/components/component_updater/download_filters_task.h b/components/component_updater/download_filters_task.h
--- a/components/component_updater/download_filters_task.h
+++ b/components/component_updater/download_filters_task.h
@@ -21,7 +21,6 @@
 #include <string>
 #include <vector>
 
-#include "base/callback.h"
 #include "base/memory/ref_counted.h"
 #include "base/threading/thread_checker.h"
 #include "components/update_client/network.h"
--
2.25.1
