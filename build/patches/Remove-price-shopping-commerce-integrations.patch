From: csagan5 <32685696+csagan5@users.noreply.github.com>
Date: Sun, 19 Jun 2022 11:00:12 +0200
Subject: Remove price/shopping/commerce integrations

License: GPL-3.0-only - https://spdx.org/licenses/GPL-3.0-only.html
---
 chrome/android/BUILD.gn                       |  33 --
 chrome/android/chrome_java_sources.gni        |   5 -
 chrome/android/features/tab_ui/BUILD.gn       |   5 -
 .../res/layout/large_message_card_item.xml    |   9 -
 .../java/res/layout/tab_grid_card_item.xml    |   8 -
 .../tab_management/LargeMessageCardView.java  |  30 --
 .../LargeMessageCardViewBinder.java           |   1 -
 .../MessageCardProviderMediator.java          |   6 +-
 .../TabGridDialogCoordinator.java             |   2 +-
 .../tab_management/TabGridViewBinder.java     |  36 ---
 .../tab_management/TabGroupUiCoordinator.java |   2 +-
 .../tab_management/TabListCoordinator.java    |  25 +-
 .../tasks/tab_management/TabListMediator.java | 169 +---------
 .../tasks/tab_management/TabProperties.java   |   5 +-
 .../TabSelectionEditorCoordinator.java        |   2 +-
 .../TabSwitcherCoordinator.java               |  95 +-----
 .../tab_management/TabSwitcherMediator.java   |  57 ----
 .../chrome/browser/app/ChromeActivity.java    |  10 +-
 .../AppMenuPropertiesDelegateImpl.java        |  11 +-
 .../browser/bookmarks/BookmarkBridge.java     |  11 -
 .../bookmarks/BookmarkItemsAdapter.java       |   1 +
 .../browser/bookmarks/BookmarkListEntry.java  |  30 +-
 .../bookmarks/BookmarkManagerCoordinator.java |  23 --
 .../bookmarks/BookmarkManagerMediator.java    |  13 +-
 .../bookmarks/BookmarkManagerViewBinder.java  |  11 -
 .../BookmarkSaveFlowCoordinator.java          |   6 +-
 .../bookmarks/BookmarkSaveFlowMediator.java   |  77 +----
 .../browser/bookmarks/BookmarkToolbar.java    |   4 +-
 .../browser/bookmarks/BookmarkUiState.java    |  13 -
 .../browser/bookmarks/BookmarkUtils.java      |   5 +-
 .../browser/customtabs/CustomTabActivity.java |   2 +-
 .../init/ProcessInitializationHandler.java    |   5 -
 .../ChromePageInfoControllerDelegate.java     |   8 -
 .../ContextualPageActionController.java       |   4 -
 .../chrome/browser/tab/TabHelpers.java        |   9 -
 .../tabbed_mode/TabbedRootUiCoordinator.java  |  21 --
 .../ToolbarButtonInProductHelpController.java |  27 --
 .../browser/toolbar/ToolbarManager.java       |  19 +-
 .../chrome/browser/ui/RootUiCoordinator.java  |  20 --
 chrome/android/java_sources.gni               |   7 -
 chrome/browser/BUILD.gn                       |   4 -
 .../browsing_data_history_observer_service.cc |  15 -
 .../commerce/merchant_viewer/android/BUILD.gn |  34 +-
 .../MerchantTrustSignalsCoordinator.java      | 303 +-----------------
 .../PageInfoStoreInfoController.java          |   6 -
 .../price_tracking/PriceTrackingFeatures.java |   2 +-
 .../commerce/subscriptions/android/BUILD.gn   |   1 -
 .../CommerceSubscriptionsService.java         |  34 +-
 .../optimization_guide_keyed_service.cc       |   4 -
 chrome/browser/persisted_state_db/BUILD.gn    |   1 -
 ...hrome_browser_main_extra_parts_profiles.cc |   3 -
 chrome/browser/tab/BUILD.gn                   |   1 -
 .../tab/state/CouponPersistedTabData.java     |   4 +-
 .../tab/state/ShoppingPersistedTabData.java   |   3 +-
 chrome/browser/ui/android/omnibox/BUILD.gn    |   1 -
 .../components/bookmarks/BookmarkId.java      |   3 -
 .../commerce/core/commerce_feature_list.cc    |  65 ++--
 57 files changed, 80 insertions(+), 1231 deletions(-)

diff --git a/chrome/android/BUILD.gn b/chrome/android/BUILD.gn
--- a/chrome/android/BUILD.gn
+++ b/chrome/android/BUILD.gn
@@ -21,10 +21,6 @@ import("//chrome/android/features/vr/public_vr_java_sources.gni")
 import("//chrome/android/feed/feed_java_sources.gni")
 import("//chrome/android/modules/chrome_bundle_tmpl.gni")
 import("//chrome/android/modules/chrome_feature_module_tmpl.gni")
-import("//chrome/browser/commerce/price_tracking/android/java_sources.gni")
-import("//chrome/browser/commerce/subscriptions/android/java_sources.gni")
-import(
-    "//chrome/browser/commerce/subscriptions/test/android/test_java_sources.gni")
 import("//chrome/browser/page_info/buildflags.gni")
 import("//chrome/browser/password_manager/buildflags.gni")
 import("//chrome/browser/share/android/java_sources.gni")
@@ -262,9 +258,6 @@ if (current_toolchain == default_toolchain) {
       "//chrome/browser/browser_controls/android:java",
       "//chrome/browser/commerce/android:java",
       "//chrome/browser/commerce/merchant_viewer/android:java",
-      "//chrome/browser/commerce/price_tracking/android:java",
-      "//chrome/browser/commerce/price_tracking/proto:proto_java",
-      "//chrome/browser/commerce/subscriptions/android:subscriptions_java",
       "//chrome/browser/consent_auditor/android:java",
       "//chrome/browser/contextmenu:java",
       "//chrome/browser/creator/android:java",
@@ -644,16 +637,6 @@ if (current_toolchain == default_toolchain) {
     sources += share_java_sources
     deps += share_java_deps
 
-    # TODO(crbug/1186003): Instead of adding source files, add it as a separate
-    # dependency when circular deps is resolved.
-    sources += price_tracking_java_sources
-    deps += price_tracking_java_deps
-
-    # TODO(crbug/1210158): Instead of adding source files, add it as a separate
-    # dependency when circular deps is resolved.
-    sources += commerce_subscriptions_java_sources
-    deps += commerce_subscriptions_java_deps
-
     if (enable_printing) {
       deps += [ "//printing:printing_java" ]
     }
@@ -703,7 +686,6 @@ if (current_toolchain == default_toolchain) {
       ":chrome_java",
       "//chrome/android/features/keyboard_accessory:internal_java",
       "//chrome/browser/android/httpclient:java",
-      "//chrome/browser/commerce/merchant_viewer/android:java",
       "//chrome/browser/content_creation/notes/internal/android:java",
       "//chrome/browser/download/internal/android:java",
       "//chrome/browser/page_annotations/android:java",
@@ -857,11 +839,6 @@ if (current_toolchain == default_toolchain) {
       "//chrome/browser/bluetooth/android:junit",
       "//chrome/browser/browser_controls/android:java",
       "//chrome/browser/browser_controls/android:junit",
-      "//chrome/browser/commerce/android:java",
-      "//chrome/browser/commerce/merchant_viewer/android:junit",
-      "//chrome/browser/commerce/price_tracking/android:java",
-      "//chrome/browser/commerce/price_tracking/proto:proto_java",
-      "//chrome/browser/commerce/subscriptions/android:subscriptions_java",
       "//chrome/browser/contextmenu:java",
       "//chrome/browser/creator/android:java",
       "//chrome/browser/creator/android:junit",
@@ -1270,8 +1247,6 @@ if (current_toolchain == default_toolchain) {
       "//chrome/browser/android/browserservices/intents:java",
       "//chrome/browser/android/browserservices/verification:java",
       "//chrome/browser/android/crypto:java",
-      "//chrome/browser/commerce/android:java",
-      "//chrome/browser/commerce/subscriptions/android:subscriptions_java",
       "//chrome/browser/contextmenu:java",
       "//chrome/browser/download/android:download_java_tests",
       "//chrome/browser/download/android:file_provider_java",
@@ -1406,12 +1381,6 @@ if (current_toolchain == default_toolchain) {
       "//chrome/browser/back_press/android:java",
       "//chrome/browser/banners/android:java",
       "//chrome/browser/browser_controls/android:java",
-      "//chrome/browser/commerce/android:java",
-      "//chrome/browser/commerce/android:javatests",
-      "//chrome/browser/commerce/merchant_viewer/android:java",
-      "//chrome/browser/commerce/merchant_viewer/android:javatests",
-      "//chrome/browser/commerce/price_tracking/android:java",
-      "//chrome/browser/commerce/subscriptions/android:subscriptions_java",
       "//chrome/browser/content_creation/notes/internal/android:java",
       "//chrome/browser/contextmenu:java",
       "//chrome/browser/dependency_injection:java",
@@ -3637,8 +3606,6 @@ group("jni_headers") {
     "//chrome/browser/android/browserservices/metrics:jni_headers",
     "//chrome/browser/android/browserservices/verification:jni_headers",
     "//chrome/browser/battery/android:jni_headers",
-    "//chrome/browser/commerce/merchant_viewer/android:jni_headers",
-    "//chrome/browser/commerce/price_tracking/android:jni_headers",
     "//chrome/browser/contextmenu:jni_headers",
     "//chrome/browser/download/android:jni_headers",
     "//chrome/browser/enterprise/util:jni_headers",
diff --git a/chrome/android/chrome_java_sources.gni b/chrome/android/chrome_java_sources.gni
--- a/chrome/android/chrome_java_sources.gni
+++ b/chrome/android/chrome_java_sources.gni
@@ -203,10 +203,6 @@ chrome_java_sources = [
   "java/src/org/chromium/chrome/browser/bookmarks/BookmarkUiState.java",
   "java/src/org/chromium/chrome/browser/bookmarks/BookmarkUndoController.java",
   "java/src/org/chromium/chrome/browser/bookmarks/BookmarkUtils.java",
-  "java/src/org/chromium/chrome/browser/bookmarks/PowerBookmarkMetrics.java",
-  "java/src/org/chromium/chrome/browser/bookmarks/PowerBookmarkShoppingItemRow.java",
-  "java/src/org/chromium/chrome/browser/bookmarks/PowerBookmarkTagChipList.java",
-  "java/src/org/chromium/chrome/browser/bookmarks/PowerBookmarkUtils.java",
   "java/src/org/chromium/chrome/browser/bookmarks/ReadingListSectionHeader.java",
   "java/src/org/chromium/chrome/browser/bookmarks/TabBookmarker.java",
   "java/src/org/chromium/chrome/browser/bookmarks/TestingDelegate.java",
@@ -929,7 +925,6 @@ chrome_java_sources = [
   "java/src/org/chromium/chrome/browser/searchwidget/SearchType.java",
   "java/src/org/chromium/chrome/browser/searchwidget/SearchWidgetProvider.java",
   "java/src/org/chromium/chrome/browser/segmentation_platform/ContextualPageActionController.java",
-  "java/src/org/chromium/chrome/browser/segmentation_platform/PriceTrackingActionProvider.java",
   "java/src/org/chromium/chrome/browser/segmentation_platform/ReaderModeActionProvider.java",
   "java/src/org/chromium/chrome/browser/segmentation_platform/SignalAccumulator.java",
   "java/src/org/chromium/chrome/browser/settings/MainSettings.java",
diff --git a/chrome/android/features/tab_ui/BUILD.gn b/chrome/android/features/tab_ui/BUILD.gn
--- a/chrome/android/features/tab_ui/BUILD.gn
+++ b/chrome/android/features/tab_ui/BUILD.gn
@@ -109,9 +109,6 @@ android_library("java") {
     "java/src/org/chromium/chrome/browser/tasks/tab_management/MessageCardViewUtils.java",
     "java/src/org/chromium/chrome/browser/tasks/tab_management/MessageService.java",
     "java/src/org/chromium/chrome/browser/tasks/tab_management/MultiThumbnailCardProvider.java",
-    "java/src/org/chromium/chrome/browser/tasks/tab_management/PriceCardView.java",
-    "java/src/org/chromium/chrome/browser/tasks/tab_management/PriceMessageCardViewModel.java",
-    "java/src/org/chromium/chrome/browser/tasks/tab_management/PriceMessageService.java",
     "java/src/org/chromium/chrome/browser/tasks/tab_management/SelectableTabGridView.java",
     "java/src/org/chromium/chrome/browser/tasks/tab_management/TabGridDialogCoordinator.java",
     "java/src/org/chromium/chrome/browser/tasks/tab_management/TabGridDialogMediator.java",
@@ -191,7 +188,6 @@ android_library("java") {
     "//chrome/browser/android/lifecycle:java",
     "//chrome/browser/back_press/android:java",
     "//chrome/browser/browser_controls/android:java",
-    "//chrome/browser/commerce/price_tracking/android:java",
     "//chrome/browser/endpoint_fetcher:java",
     "//chrome/browser/feature_engagement:java",
     "//chrome/browser/feed/android:java",
@@ -275,7 +271,6 @@ android_library("unit_device_javatests") {
     "//chrome/android:chrome_java",
     "//chrome/android/features/tab_ui:java",
     "//chrome/android/features/tab_ui:tab_suggestions_java",
-    "//chrome/browser/commerce/price_tracking/android:java",
     "//chrome/browser/flags:java",
     "//chrome/browser/optimization_guide/android:java",
     "//chrome/browser/profiles/android:java",
diff --git a/chrome/android/features/tab_ui/java/res/layout/large_message_card_item.xml b/chrome/android/features/tab_ui/java/res/layout/large_message_card_item.xml
--- a/chrome/android/features/tab_ui/java/res/layout/large_message_card_item.xml
+++ b/chrome/android/features/tab_ui/java/res/layout/large_message_card_item.xml
@@ -22,15 +22,6 @@ found in the LICENSE file.
             android:layout_height="match_parent"
             android:layout_marginBottom="16dp"
             android:orientation="vertical">
-            <org.chromium.chrome.browser.tasks.tab_management.PriceCardView
-                android:id="@+id/price_info_box"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginTop="16dp"
-                android:layout_marginBottom="16dp"
-                android:layout_gravity="center"
-                android:gravity="center_horizontal"
-                android:visibility="gone" />
             <org.chromium.ui.widget.ChromeImageView
                 android:id="@+id/icon"
                 android:layout_width="26dp"
diff --git a/chrome/android/features/tab_ui/java/res/layout/tab_grid_card_item.xml b/chrome/android/features/tab_ui/java/res/layout/tab_grid_card_item.xml
--- a/chrome/android/features/tab_ui/java/res/layout/tab_grid_card_item.xml
+++ b/chrome/android/features/tab_ui/java/res/layout/tab_grid_card_item.xml
@@ -64,14 +64,6 @@ found in the LICENSE file.
                 app:cornerRadiusTopEnd="@dimen/tab_grid_card_thumbnail_corner_radius_top"
                 app:cornerRadiusBottomStart="@dimen/tab_grid_card_thumbnail_corner_radius_bottom"
                 app:cornerRadiusBottomEnd="@dimen/tab_grid_card_thumbnail_corner_radius_bottom"/>
-            <org.chromium.chrome.browser.tasks.tab_management.PriceCardView
-                android:id="@+id/price_info_box_outer"
-                android:layout_below="@id/tab_title"
-                android:background="@drawable/price_card_scrim"
-                android:layout_width="match_parent"
-                android:layout_height="56dp"
-                android:layout_marginStart="4dp"
-                android:visibility="gone"/>
             <org.chromium.chrome.browser.tasks.tab_management.CouponCardView
                 android:id="@+id/coupon_info_box_outer"
                 android:layout_below="@id/tab_title"
diff --git a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/LargeMessageCardView.java b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/LargeMessageCardView.java
--- a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/LargeMessageCardView.java
+++ b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/LargeMessageCardView.java
@@ -41,7 +41,6 @@ class LargeMessageCardView extends FrameLayout {
     private final Context mContext;
     private final int mLandscapeSidePadding;
     private MaterialCardViewNoShadow mMaterialCardViewNoShadow;
-    private PriceCardView mPriceInfoBox;
     private ChromeImageView mIcon;
     private TextView mTitle;
     private TextView mDescription;
@@ -61,7 +60,6 @@ class LargeMessageCardView extends FrameLayout {
         super.onFinishInflate();
 
         mMaterialCardViewNoShadow = findViewById(R.id.large_message_card_view);
-        mPriceInfoBox = findViewById(R.id.price_info_box);
         mIcon = findViewById(R.id.icon);
         mTitle = findViewById(R.id.title);
         mDescription = findViewById(R.id.description);
@@ -152,18 +150,6 @@ class LargeMessageCardView extends FrameLayout {
         mCloseButton.setOnClickListener(listener);
     }
 
-    /**
-     * Setup the price info box.
-     */
-    void setupPriceInfoBox(@Nullable ShoppingPersistedTabData.PriceDrop priceDrop) {
-        if (priceDrop != null) {
-            mPriceInfoBox.setPriceStrings(priceDrop.price, priceDrop.previousPrice);
-            mPriceInfoBox.setVisibility(View.VISIBLE);
-        } else {
-            mPriceInfoBox.setVisibility(View.GONE);
-        }
-    }
-
     /**
      * Set icon drawable.
      * @param iconDrawable Drawable to be shown.
@@ -205,22 +191,6 @@ class LargeMessageCardView extends FrameLayout {
         }
     }
 
-    // TODO(crbug.com/1166704): This method has little to do with this view. Move this function to a
-    // price tracking UI utility class.
-    /**
-     * When user taps on "Show me" on PriceWelcomeMessage, we scroll them to the binding tab, then a
-     * blue tooltip appears and points to the price drop indicator.
-     */
-    public static void showPriceDropTooltip(View view) {
-        ViewRectProvider rectProvider = new ViewRectProvider(view);
-        TextBubble textBubble = new TextBubble(view.getContext(), view,
-                R.string.price_drop_spotted_lower_price, R.string.price_drop_spotted_lower_price,
-                true, rectProvider, ChromeAccessibilityUtil.get().isAccessibilityEnabled());
-        textBubble.setFocusable(true);
-        textBubble.setDismissOnTouchInteraction(true);
-        textBubble.show();
-    }
-
     /**
      * Update Message Card when switching between normal mode and incognito mode.
      *
diff --git a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/LargeMessageCardViewBinder.java b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/LargeMessageCardViewBinder.java
--- a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/LargeMessageCardViewBinder.java
+++ b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/LargeMessageCardViewBinder.java
@@ -41,7 +41,6 @@ class LargeMessageCardViewBinder {
             itemView.setSecondaryActionButtonOnClickListener(
                     model.get(MessageCardViewProperties.SECONDARY_ACTION_BUTTON_CLICK_HANDLER));
         } else if (MessageCardViewProperties.PRICE_DROP == propertyKey) {
-            itemView.setupPriceInfoBox(model.get(MessageCardViewProperties.PRICE_DROP));
         } else if (MessageCardViewProperties.ICON_PROVIDER == propertyKey) {
             itemView.setIconDrawable(
                     model.get(MessageCardViewProperties.ICON_PROVIDER).getIconDrawable());
diff --git a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/MessageCardProviderMediator.java b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/MessageCardProviderMediator.java
--- a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/MessageCardProviderMediator.java
+++ b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/MessageCardProviderMediator.java
@@ -112,10 +112,6 @@ public class MessageCardProviderMediator implements MessageService.MessageObserv
                 assert data instanceof IphMessageService.IphMessageData;
                 return IphMessageCardViewModel.create(mContext, this::invalidateShownMessage,
                         (IphMessageService.IphMessageData) data);
-            case PRICE_MESSAGE:
-                assert data instanceof PriceMessageService.PriceMessageData;
-                return PriceMessageCardViewModel.create(mContext, this::invalidateShownMessage,
-                        (PriceMessageService.PriceMessageData) data);
             case INCOGNITO_REAUTH_PROMO_MESSAGE:
                 assert data
                         instanceof IncognitoReauthPromoMessageService.IncognitoReauthMessageData;
@@ -167,4 +163,4 @@ public class MessageCardProviderMediator implements MessageService.MessageObserv
     Map<Integer, Message> getShownMessageItemsForTesting() {
         return mShownMessageItems;
     }
-}
\ No newline at end of file
+}
diff --git a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabGridDialogCoordinator.java b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabGridDialogCoordinator.java
--- a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabGridDialogCoordinator.java
+++ b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabGridDialogCoordinator.java
@@ -95,7 +95,7 @@ public class TabGridDialogCoordinator implements TabGridDialogMediator.DialogCon
                                 tabId, thumbnailSize, callback, forceUpdate, writeBack);
                     },
                     null, false, gridCardOnClickListenerProvider,
-                    mMediator.getTabGridDialogHandler(), TabProperties.UiType.CLOSABLE, null, null,
+                    mMediator.getTabGridDialogHandler(), TabProperties.UiType.CLOSABLE, null,
                     containerView, false, mComponentName, rootView, null, mMediator);
             TabListRecyclerView recyclerView = mTabListCoordinator.getContainerView();
 
diff --git a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabGridViewBinder.java b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabGridViewBinder.java
--- a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabGridViewBinder.java
+++ b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabGridViewBinder.java
@@ -200,20 +200,6 @@ class TabGridViewBinder {
                     model.get(TabProperties.IS_SELECTED));
         } else if (TabProperties.ACCESSIBILITY_DELEGATE == propertyKey) {
             view.setAccessibilityDelegate(model.get(TabProperties.ACCESSIBILITY_DELEGATE));
-        } else if (TabProperties.SHOPPING_PERSISTED_TAB_DATA_FETCHER == propertyKey) {
-            fetchPriceDrop(model, (priceDrop) -> {
-                PriceCardView priceCardView =
-                        (PriceCardView) view.fastFindViewById(R.id.price_info_box_outer);
-                if (priceDrop == null) {
-                    priceCardView.setVisibility(View.GONE);
-                    return;
-                }
-                priceCardView.setPriceStrings(priceDrop.price, priceDrop.previousPrice);
-                priceCardView.setVisibility(View.VISIBLE);
-                priceCardView.setContentDescription(
-                        view.getResources().getString(R.string.accessibility_tab_price_card,
-                                priceDrop.previousPrice, priceDrop.price));
-            }, true);
         } else if (TabProperties.COUPON_PERSISTED_TAB_DATA_FETCHER == propertyKey) {
             CouponCardView couponCardView =
                     (CouponCardView) view.fastFindViewById(R.id.coupon_info_box_outer);
@@ -241,13 +227,6 @@ class TabGridViewBinder {
                         });
             }, false);
         } else if (TabProperties.SHOULD_SHOW_PRICE_DROP_TOOLTIP == propertyKey) {
-            if (model.get(TabProperties.SHOULD_SHOW_PRICE_DROP_TOOLTIP)) {
-                PriceCardView priceCardView =
-                        (PriceCardView) view.fastFindViewById(R.id.price_info_box_outer);
-                assert priceCardView.getVisibility() == View.VISIBLE;
-                LargeMessageCardView.showPriceDropTooltip(
-                        priceCardView.findViewById(R.id.current_price));
-            }
         } else if (TabProperties.IS_SELECTED == propertyKey) {
             view.setSelected(model.get(TabProperties.IS_SELECTED));
             updateColorForActionButton(view, model.get(TabProperties.IS_INCOGNITO),
@@ -292,21 +271,6 @@ class TabGridViewBinder {
 
     private static void fetchPriceDrop(PropertyModel model,
             Callback<ShoppingPersistedTabData.PriceDrop> callback, boolean shouldLog) {
-        if (model.get(TabProperties.SHOPPING_PERSISTED_TAB_DATA_FETCHER) == null) {
-            callback.onResult(null);
-            return;
-        }
-        model.get(TabProperties.SHOPPING_PERSISTED_TAB_DATA_FETCHER)
-                .fetch((shoppingPersistedTabData) -> {
-                    if (shoppingPersistedTabData == null) {
-                        callback.onResult(null);
-                        return;
-                    }
-                    if (shouldLog) {
-                        shoppingPersistedTabData.logPriceDropMetrics(SHOPPING_METRICS_IDENTIFIER);
-                    }
-                    callback.onResult(shoppingPersistedTabData.getPriceDrop());
-                });
     }
 
     private static void updateThumbnail(ViewLookupCachingFrameLayout view, PropertyModel model) {
diff --git a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabGroupUiCoordinator.java b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabGroupUiCoordinator.java
--- a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabGroupUiCoordinator.java
+++ b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabGroupUiCoordinator.java
@@ -153,7 +153,7 @@ public class TabGroupUiCoordinator implements TabGroupUiMediator.ResetHandler, T
 
             mTabStripCoordinator = new TabListCoordinator(TabListCoordinator.TabListMode.STRIP,
                     mContext, mTabModelSelector, null, null, false, null, null,
-                    TabProperties.UiType.STRIP, null, null, mTabListContainerView, true,
+                    TabProperties.UiType.STRIP, null, mTabListContainerView, true,
                     COMPONENT_NAME, mRootView, onModelTokenChange, null);
             mTabStripCoordinator.initWithNative(mDynamicResourceLoaderSupplier.get());
 
diff --git a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabListCoordinator.java b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabListCoordinator.java
--- a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabListCoordinator.java
+++ b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabListCoordinator.java
@@ -58,7 +58,7 @@ import java.util.List;
  * Coordinator for showing UI for a list of tabs. Can be used in GRID or STRIP modes.
  */
 public class TabListCoordinator
-        implements PriceMessageService.PriceWelcomeMessageProvider, DestroyObserver {
+        implements DestroyObserver {
     /**
      * Modes of showing the list of tabs.
      *
@@ -116,7 +116,6 @@ public class TabListCoordinator
      * @param itemType The item type to put in the list of tabs.
      * @param selectionDelegateProvider Provider to provide selected Tabs for a selectable tab list.
      *                                  It's NULL when selection is not possible.
-     * @param priceWelcomeMessageController A controller to show PriceWelcomeMessage.
      * @param parentView {@link ViewGroup} The root view of the UI.
      * @param attachToParent Whether the UI should attach to root view.
      * @param componentName A unique string uses to identify different components for UMA recording.
@@ -133,8 +132,6 @@ public class TabListCoordinator
                     .GridCardOnClickListenerProvider gridCardOnClickListenerProvider,
             @Nullable TabListMediator.TabGridDialogHandler dialogHandler, @UiType int itemType,
             @Nullable TabListMediator.SelectionDelegateProvider selectionDelegateProvider,
-            @Nullable TabSwitcherMediator
-                    .PriceWelcomeMessageController priceWelcomeMessageController,
             @NonNull ViewGroup parentView, boolean attachToParent, String componentName,
             @NonNull ViewGroup rootView, @Nullable Callback<Object> onModelTokenChange,
             @Nullable TabGridItemTouchHelperCallback
@@ -226,7 +223,7 @@ public class TabListCoordinator
         mMediator = new TabListMediator(context, mModel, mMode, tabModelSelector, thumbnailProvider,
                 titleProvider, tabListFaviconProvider, actionOnRelatedTabs,
                 selectionDelegateProvider, gridCardOnClickListenerProvider, dialogHandler,
-                priceWelcomeMessageController, componentName, itemType,
+                componentName, itemType,
                 onLongPressTabItemEventListener);
 
         try (TraceEvent e = TraceEvent.scoped("TabListCoordinator.setupRecyclerView")) {
@@ -431,13 +428,6 @@ public class TabListCoordinator
         return tabListRect.top;
     }
 
-    /**
-     * @see TabListMediator#getPriceWelcomeMessageInsertionIndex().
-     */
-    int getPriceWelcomeMessageInsertionIndex() {
-        return mMediator.getPriceWelcomeMessageInsertionIndex();
-    }
-
     /**
      * @return The container {@link androidx.recyclerview.widget.RecyclerView} that is showing the
      *         tab list UI.
@@ -594,17 +584,6 @@ public class TabListCoordinator
         mMediator.removeSpecialItemFromModel(uiType, itemIdentifier);
     }
 
-    // PriceWelcomeMessageService.PriceWelcomeMessageProvider implementation.
-    @Override
-    public int getTabIndexFromTabId(int tabId) {
-        return mModel.indexFromId(tabId);
-    }
-
-    @Override
-    public void showPriceDropTooltip(int index) {
-        mModel.get(index).model.set(TabProperties.SHOULD_SHOW_PRICE_DROP_TOOLTIP, true);
-    }
-
     void runAnimationOnNextLayout(Runnable runnable) {
         mRecyclerView.runAnimationOnNextLayout(runnable);
     }
diff --git a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabListMediator.java b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabListMediator.java
--- a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabListMediator.java
+++ b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabListMediator.java
@@ -44,8 +44,6 @@ import org.chromium.chrome.browser.compositor.layouts.content.TabContentManager;
 import org.chromium.chrome.browser.multiwindow.MultiWindowUtils;
 import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
-import org.chromium.chrome.browser.price_tracking.PriceTrackingFeatures;
-import org.chromium.chrome.browser.price_tracking.PriceTrackingUtilities;
 import org.chromium.chrome.browser.tab.EmptyTabObserver;
 import org.chromium.chrome.browser.tab.Tab;
 import org.chromium.chrome.browser.tab.TabCreationState;
@@ -66,12 +64,10 @@ import org.chromium.chrome.browser.tasks.tab_groups.EmptyTabGroupModelFilterObse
 import org.chromium.chrome.browser.tasks.tab_groups.TabGroupModelFilter;
 import org.chromium.chrome.browser.tasks.tab_groups.TabGroupTitleUtils;
 import org.chromium.chrome.browser.tasks.tab_groups.TabGroupUtils;
-import org.chromium.chrome.browser.tasks.tab_management.PriceMessageService.PriceTabData;
 import org.chromium.chrome.browser.tasks.tab_management.TabListCoordinator.TabListMode;
 import org.chromium.chrome.browser.tasks.tab_management.TabListFaviconProvider.TabFavicon;
 import org.chromium.chrome.browser.tasks.tab_management.TabListFaviconProvider.TabFaviconFetcher;
 import org.chromium.chrome.browser.tasks.tab_management.TabProperties.UiType;
-import org.chromium.chrome.browser.tasks.tab_management.TabSwitcherMediator.PriceWelcomeMessageController;
 import org.chromium.chrome.browser.tasks.tab_management.TabUiMetricsHelper.TabSelectionEditorActionMetricGroups;
 import org.chromium.chrome.tab_ui.R;
 import org.chromium.components.browser_ui.styles.SemanticColorUtils;
@@ -178,51 +174,6 @@ class TabListMediator {
         boolean isReorderAction(int action);
     }
 
-    /**
-     * Provides capability to asynchronously acquire {@link ShoppingPersistedTabData}
-     */
-    static class ShoppingPersistedTabDataFetcher {
-        protected Tab mTab;
-        protected PriceWelcomeMessageController mPriceWelcomeMessageController;
-
-        /**
-         * @param tab {@link Tab} {@link ShoppingPersistedTabData} will be acquired for.
-         * @param priceWelcomeMessageController to show the price welcome message.
-         */
-        ShoppingPersistedTabDataFetcher(
-                Tab tab, @Nullable PriceWelcomeMessageController priceWelcomeMessageController) {
-            mTab = tab;
-            mPriceWelcomeMessageController = priceWelcomeMessageController;
-        }
-
-        /**
-         * Asynchronously acquire {@link ShoppingPersistedTabData}
-         * @param callback {@link Callback} to pass {@link ShoppingPersistedTabData} back in
-         */
-        public void fetch(Callback<ShoppingPersistedTabData> callback) {
-            ShoppingPersistedTabData.from(mTab, (res) -> {
-                callback.onResult(res);
-                maybeShowPriceWelcomeMessage(res);
-            });
-        }
-
-        @VisibleForTesting
-        void maybeShowPriceWelcomeMessage(
-                @Nullable ShoppingPersistedTabData shoppingPersistedTabData) {
-            // Avoid inserting message while RecyclerView is computing a layout.
-            new Handler().post(() -> {
-                if (!PriceTrackingUtilities.isPriceWelcomeMessageCardEnabled()
-                        || (mPriceWelcomeMessageController == null)
-                        || (shoppingPersistedTabData == null)
-                        || (shoppingPersistedTabData.getPriceDrop() == null)) {
-                    return;
-                }
-                mPriceWelcomeMessageController.showPriceWelcomeMessage(
-                        new PriceTabData(mTab.getId(), shoppingPersistedTabData.getPriceDrop()));
-            });
-        }
-    }
-
     /**
      * Asynchronously acquire {@link CouponPersistedTabData}
      */
@@ -348,7 +299,6 @@ class TabListMediator {
     private final GridCardOnClickListenerProvider mGridCardOnClickListenerProvider;
     private final TabGridDialogHandler mTabGridDialogHandler;
     private final TabListFaviconProvider mTabListFaviconProvider;
-    private final PriceWelcomeMessageController mPriceWelcomeMessageController;
 
     private String mComponentName;
     private ThumbnailProvider mThumbnailProvider;
@@ -547,7 +497,6 @@ class TabListMediator {
      * @param gridCardOnClickListenerProvider Provides the onClickListener for opening dialog when
      *                                        click on a grid card.
      * @param dialogHandler A handler to handle requests about updating TabGridDialog.
-     * @param priceWelcomeMessageController A controller to show PriceWelcomeMessage.
      * @param componentName This is a unique string to identify different components.
      * @param uiType The type of UI this mediator should be building.
      */
@@ -558,7 +507,6 @@ class TabListMediator {
             @Nullable SelectionDelegateProvider selectionDelegateProvider,
             @Nullable GridCardOnClickListenerProvider gridCardOnClickListenerProvider,
             @Nullable TabGridDialogHandler dialogHandler,
-            @Nullable PriceWelcomeMessageController priceWelcomeMessageController,
             String componentName, @UiType int uiType,
             @Nullable TabGridItemTouchHelperCallback
                     .OnLongPressTabItemEventListener onLongPressTabItemEventListener) {
@@ -575,7 +523,6 @@ class TabListMediator {
         mTabGridDialogHandler = dialogHandler;
         mActionsOnAllRelatedTabs = actionOnRelatedTabs;
         mUiType = uiType;
-        mPriceWelcomeMessageController = priceWelcomeMessageController;
 
         mTabModelObserver = new TabModelObserver() {
             @Override
@@ -758,35 +705,6 @@ class TabListMediator {
         mTabGridItemTouchHelperCallback = new TabGridItemTouchHelperCallback(context, mModel,
                 mTabModelSelector, mTabClosedListener, mTabGridDialogHandler, mComponentName,
                 mActionsOnAllRelatedTabs, mMode, onLongPressTabItemEventListener);
-
-        // Right now we need to update layout only if there is a price welcome message card in tab
-        // switcher.
-        if (mMode == TabListMode.GRID && mUiType != UiType.SELECTABLE
-                && PriceTrackingFeatures.isPriceTrackingEnabled()) {
-            mListObserver = new ListObserver<Void>() {
-                @Override
-                public void onItemRangeInserted(ListObservable source, int index, int count) {
-                    updateLayout();
-                }
-
-                @Override
-                public void onItemRangeRemoved(ListObservable source, int index, int count) {
-                    updateLayout();
-                }
-
-                @Override
-                public void onItemRangeChanged(
-                        ListObservable<Void> source, int index, int count, @Nullable Void payload) {
-                    updateLayout();
-                }
-
-                @Override
-                public void onItemMoved(ListObservable source, int curIndex, int newIndex) {
-                    updateLayout();
-                }
-            };
-            mModel.addObserver(mListObserver);
-        }
     }
 
     private void selectTab(int oldIndex, int newIndex) {
@@ -1230,9 +1148,6 @@ class TabListMediator {
             Collections.sort(tabsList, LAST_SHOWN_COMPARATOR);
         }
         mVisible = tabsList != null;
-        if (tabs != null) {
-            recordPriceAnnotationsEnabledMetrics();
-        }
         if (areTabsUnchanged(tabsList)) {
             if (tabsList == null) return true;
             for (int i = 0; i < tabsList.size(); i++) {
@@ -1304,11 +1219,6 @@ class TabListMediator {
 
     void hardCleanup() {
         assert !mVisible;
-        if (PriceTrackingUtilities.isTrackPricesOnTabsEnabled()
-                && (PriceTrackingFeatures.isPriceDropIphEnabled()
-                        || PriceTrackingFeatures.isPriceDropBadgeEnabled())) {
-            saveSeenPriceDrops();
-        }
         sViewedTabIds.clear();
     }
 
@@ -1460,25 +1370,6 @@ class TabListMediator {
      * @param recyclerView the {@link TabListRecyclerView} to add the listener too.
      */
     void registerOnScrolledListener(RecyclerView recyclerView) {
-        if (PriceTrackingUtilities.isTrackPricesOnTabsEnabled()
-                && (PriceTrackingFeatures.isPriceDropIphEnabled()
-                        || PriceTrackingFeatures.isPriceDropBadgeEnabled())) {
-            mRecyclerView = recyclerView;
-            mOnScrollListener = new OnScrollListener() {
-                @Override
-                public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {
-                    if (!mTabModelSelector.isIncognitoSelected()) {
-                        for (int i = 0; i < mRecyclerView.getChildCount(); i++) {
-                            if (mRecyclerView.getLayoutManager().isViewPartiallyVisible(
-                                        mRecyclerView.getChildAt(i), false, true)) {
-                                addViewedTabId(i);
-                            }
-                        }
-                    }
-                }
-            };
-            mRecyclerView.addOnScrollListener(mOnScrollListener);
-        }
     }
 
     private void unregisterOnScrolledListener() {
@@ -1834,26 +1725,6 @@ class TabListMediator {
     }
 
     private void setupPersistedTabDataFetcherForTab(PseudoTab pseudoTab, int index) {
-        if (mMode == TabListMode.GRID && pseudoTab.hasRealTab() && !pseudoTab.isIncognito()) {
-            if (PriceTrackingUtilities.isTrackPricesOnTabsEnabled()
-                    && isUngroupedTab(pseudoTab.getId())) {
-                mModel.get(index).model.set(TabProperties.SHOPPING_PERSISTED_TAB_DATA_FETCHER,
-                        new ShoppingPersistedTabDataFetcher(
-                                pseudoTab.getTab(), mPriceWelcomeMessageController));
-            } else {
-                mModel.get(index).model.set(
-                        TabProperties.SHOPPING_PERSISTED_TAB_DATA_FETCHER, null);
-            }
-            if (CouponUtilities.isCouponsOnTabsEnabled() && isUngroupedTab(pseudoTab.getId())) {
-                mModel.get(index).model.set(TabProperties.COUPON_PERSISTED_TAB_DATA_FETCHER,
-                        new CouponPersistedTabDataFetcher(pseudoTab.getTab()));
-            } else {
-                mModel.get(index).model.set(TabProperties.COUPON_PERSISTED_TAB_DATA_FETCHER, null);
-            }
-        } else {
-            mModel.get(index).model.set(TabProperties.COUPON_PERSISTED_TAB_DATA_FETCHER, null);
-            mModel.get(index).model.set(TabProperties.SHOPPING_PERSISTED_TAB_DATA_FETCHER, null);
-        }
     }
 
     @VisibleForTesting
@@ -1975,23 +1846,6 @@ class TabListMediator {
         return false;
     }
 
-    /**
-     * The PriceWelcomeMessage should be in view when user enters the tab switcher, so we put it
-     * exactly below the currently selected tab.
-     *
-     * @return Where the PriceWelcomeMessage should be inserted in the {@link TabListModel} when
-     *         user enters the tab switcher.
-     */
-    int getPriceWelcomeMessageInsertionIndex() {
-        assert mGridLayoutManager != null;
-        int spanCount = mGridLayoutManager.getSpanCount();
-        int selectedTabIndex = mModel.indexOfNthTabCard(
-                mTabModelSelector.getTabModelFilterProvider().getCurrentTabModelFilter().index());
-        int indexBelowSelectedTab = (selectedTabIndex / spanCount + 1) * spanCount;
-        int indexAfterLastTab = mModel.getTabIndexBefore(mModel.size()) + 1;
-        return Math.min(indexBelowSelectedTab, indexAfterLastTab);
-    }
-
     /**
      * Update the layout of tab switcher to make it compact. Because now we have messages within the
      * tabs like PriceMessage and these messages take up the entire row, some operations like
@@ -2002,7 +1856,7 @@ class TabListMediator {
     void updateLayout() {
         // Right now we need to update layout only if there is a price welcome message card in tab
         // switcher.
-        if (!PriceTrackingUtilities.isPriceWelcomeMessageCardEnabled()) return;
+        if ((true)) return;
         assert mGridLayoutManager != null;
         int spanCount = mGridLayoutManager.getSpanCount();
         GridLayoutManager.SpanSizeLookup spanSizeLookup = mGridLayoutManager.getSpanSizeLookup();
@@ -2039,27 +1893,6 @@ class TabListMediator {
         return TabSwitcherCoordinator.isShowingTabsInMRUOrder(mMode);
     }
 
-    @VisibleForTesting
-    void recordPriceAnnotationsEnabledMetrics() {
-        if (mMode != TabListMode.GRID || !mActionsOnAllRelatedTabs
-                || !PriceTrackingFeatures.isPriceTrackingEligible()) {
-            return;
-        }
-        SharedPreferencesManager preferencesManager = SharedPreferencesManager.getInstance();
-        if (System.currentTimeMillis()
-                        - preferencesManager.readLong(
-                                ChromePreferenceKeys
-                                        .PRICE_TRACKING_ANNOTATIONS_ENABLED_METRICS_TIMESTAMP,
-                                -1)
-                >= PriceTrackingFeatures.getAnnotationsEnabledMetricsWindowDurationMilliSeconds()) {
-            RecordHistogram.recordBooleanHistogram("Commerce.PriceDrop.AnnotationsEnabled",
-                    PriceTrackingUtilities.isTrackPricesOnTabsEnabled());
-            preferencesManager.writeLong(
-                    ChromePreferenceKeys.PRICE_TRACKING_ANNOTATIONS_ENABLED_METRICS_TIMESTAMP,
-                    System.currentTimeMillis());
-        }
-    }
-
     /**
      * @param tab the {@link Tab} to find the group index of.
      * @return the index for the tab group within {@link mModel}
diff --git a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabProperties.java b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabProperties.java
--- a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabProperties.java
+++ b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabProperties.java
@@ -117,9 +117,6 @@ public class TabProperties {
             .WritableObjectPropertyKey<AccessibilityDelegate> ACCESSIBILITY_DELEGATE =
             new PropertyModel.WritableObjectPropertyKey<>();
 
-    public static final WritableObjectPropertyKey<TabListMediator.ShoppingPersistedTabDataFetcher>
-            SHOPPING_PERSISTED_TAB_DATA_FETCHER = new WritableObjectPropertyKey<>(true);
-
     public static final WritableObjectPropertyKey<TabListMediator.CouponPersistedTabDataFetcher>
             COUPON_PERSISTED_TAB_DATA_FETCHER = new WritableObjectPropertyKey<>(true);
 
@@ -140,7 +137,7 @@ public class TabProperties {
             SELECTABLE_TAB_ACTION_BUTTON_BACKGROUND,
             SELECTABLE_TAB_ACTION_BUTTON_SELECTED_BACKGROUND, URL_DOMAIN, ACCESSIBILITY_DELEGATE,
             CARD_TYPE, CONTENT_DESCRIPTION_STRING, CLOSE_BUTTON_DESCRIPTION_STRING,
-            SHOPPING_PERSISTED_TAB_DATA_FETCHER, COUPON_PERSISTED_TAB_DATA_FETCHER,
+            COUPON_PERSISTED_TAB_DATA_FETCHER,
             SHOULD_SHOW_PRICE_DROP_TOOLTIP};
 
     public static final PropertyKey[] ALL_KEYS_TAB_STRIP = new PropertyKey[] {TAB_ID,
diff --git a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabSelectionEditorCoordinator.java b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabSelectionEditorCoordinator.java
--- a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabSelectionEditorCoordinator.java
+++ b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabSelectionEditorCoordinator.java
@@ -197,7 +197,7 @@ class TabSelectionEditorCoordinator {
             // its TabListCoordinator to work with the editor as an optimization.
             mTabListCoordinator = new TabListCoordinator(mode, activity, mTabModelSelector,
                     thumbnailProvider, titleProvider, displayGroups, null, null,
-                    TabProperties.UiType.SELECTABLE, this::getSelectionDelegate, null,
+                    TabProperties.UiType.SELECTABLE, this::getSelectionDelegate,
                     mTabSelectionEditorLayout, false, COMPONENT_NAME, rootView, null, null);
 
             // Note: The TabSelectionEditorCoordinator is always created after native is
diff --git a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabSwitcherCoordinator.java b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabSwitcherCoordinator.java
--- a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabSwitcherCoordinator.java
+++ b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabSwitcherCoordinator.java
@@ -36,10 +36,6 @@ import org.chromium.chrome.browser.lifecycle.ActivityLifecycleDispatcher;
 import org.chromium.chrome.browser.lifecycle.DestroyObserver;
 import org.chromium.chrome.browser.multiwindow.MultiWindowModeStateDispatcher;
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
-import org.chromium.chrome.browser.price_tracking.PriceDropNotificationManager;
-import org.chromium.chrome.browser.price_tracking.PriceDropNotificationManagerFactory;
-import org.chromium.chrome.browser.price_tracking.PriceTrackingFeatures;
-import org.chromium.chrome.browser.price_tracking.PriceTrackingUtilities;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.tab.Tab;
 import org.chromium.chrome.browser.tabmodel.TabCreatorManager;
@@ -47,7 +43,6 @@ import org.chromium.chrome.browser.tabmodel.TabList;
 import org.chromium.chrome.browser.tabmodel.TabModelSelector;
 import org.chromium.chrome.browser.tasks.pseudotab.PseudoTab;
 import org.chromium.chrome.browser.tasks.pseudotab.TabAttributeCache;
-import org.chromium.chrome.browser.tasks.tab_management.PriceMessageService.PriceMessageType;
 import org.chromium.chrome.browser.tasks.tab_management.TabListCoordinator.TabListMode;
 import org.chromium.chrome.browser.tasks.tab_management.TabSelectionEditorAction.ButtonType;
 import org.chromium.chrome.browser.tasks.tab_management.TabSelectionEditorAction.IconPosition;
@@ -79,7 +74,6 @@ import java.util.List;
 public class TabSwitcherCoordinator
         implements DestroyObserver, TabSwitcher, TabSwitcher.TabListDelegate,
                    TabSwitcherMediator.ResetHandler, TabSwitcherMediator.MessageItemsController,
-                   TabSwitcherMediator.PriceWelcomeMessageController,
                    TabGridItemTouchHelperCallback.OnLongPressTabItemEventListener {
     /**
      * Interface to control the IPH dialog.
@@ -143,8 +137,6 @@ public class TabSwitcherCoordinator
     private ViewGroup mContainer;
     private TabCreatorManager mTabCreatorManager;
     private boolean mIsInitialized;
-    private PriceMessageService mPriceMessageService;
-    private SharedPreferencesManager.Observer mPriceAnnotationsPrefObserver;
     private final ViewGroup mCoordinatorView;
     private final ViewGroup mRootView;
     private TabContentManager mTabContentManager;
@@ -251,7 +243,7 @@ public class TabSwitcherCoordinator
                 mTabGridDialogCoordinator = null;
             }
             mMediator = new TabSwitcherMediator(activity, this, containerViewModel,
-                    tabModelSelector, browserControls, container, tabContentManager, this, this,
+                    tabModelSelector, browserControls, container, tabContentManager, this,
                     multiWindowModeStateDispatcher, mode, incognitoReauthControllerSupplier,
                     backPressManager, dialogControllerSupplier);
 
@@ -271,7 +263,7 @@ public class TabSwitcherCoordinator
             long startTimeMs = SystemClock.uptimeMillis();
             mTabListCoordinator = new TabListCoordinator(mode, activity, tabModelSelector,
                     mMultiThumbnailCardProvider, titleProvider, true, mMediator, null,
-                    TabProperties.UiType.CLOSABLE, null, this, container, true, COMPONENT_NAME,
+                    TabProperties.UiType.CLOSABLE, null, container, true, COMPONENT_NAME,
                     mRootView, null, this);
             mContainerViewChangeProcessor = PropertyModelChangeProcessor.create(containerViewModel,
                     mTabListCoordinator.getContainerView(), TabListContainerViewBinder::bind);
@@ -339,21 +331,6 @@ public class TabSwitcherCoordinator
                             new LayoutViewBuilder(R.layout.large_message_card_item),
                             LargeMessageCardViewBinder::bind);
                 }
-
-                if (PriceTrackingFeatures.isPriceTrackingEnabled()
-                        && PriceTrackingFeatures.getPriceTrackingEnabled()) {
-                    mPriceAnnotationsPrefObserver = key -> {
-                        if (PriceTrackingUtilities.TRACK_PRICES_ON_TABS.equals(key)
-                                && !mTabModelSelector.isIncognitoSelected()
-                                && mTabModelSelector.isTabStateInitialized()) {
-                            resetWithTabList(mTabModelSelector.getTabModelFilterProvider()
-                                                     .getCurrentTabModelFilter(),
-                                    false, isShowingTabsInMRUOrder(mMode));
-                        }
-                    };
-                    SharedPreferencesManager.getInstance().addObserver(
-                            mPriceAnnotationsPrefObserver);
-                }
             }
 
             if (mode == TabListCoordinator.TabListMode.GRID
@@ -505,8 +482,6 @@ public class TabSwitcherCoordinator
 
             mMultiThumbnailCardProvider.initWithNative();
             mMediator.initWithNative(controller, mSnackbarManager);
-            // TODO(crbug.com/1222762): Only call setUpPriceTracking in GRID TabSwitcher.
-            setUpPriceTracking(mActivity, mModalDialogManager);
 
             mIsInitialized = true;
         }
@@ -584,19 +559,6 @@ public class TabSwitcherCoordinator
                 TabSelectionEditorOpenMetricGroups.OPEN_FROM_GRID, mActivity);
     }
 
-    private void setUpPriceTracking(Context context, ModalDialogManager modalDialogManager) {
-        if (PriceTrackingFeatures.isPriceTrackingEnabled()) {
-            PriceDropNotificationManager notificationManager =
-                    PriceDropNotificationManagerFactory.create();
-            if (mMode == TabListCoordinator.TabListMode.GRID) {
-                mPriceMessageService = new PriceMessageService(
-                        mTabListCoordinator, mMediator, notificationManager);
-                mMessageCardProviderCoordinator.subscribeMessageService(mPriceMessageService);
-                mMediator.setPriceMessageService(mPriceMessageService);
-            }
-        }
-    }
-
     // TabSwitcher implementation.
     @Override
     public void setOnTabSelectingListener(OnTabSelectingListener listener) {
@@ -737,22 +699,10 @@ public class TabSwitcherCoordinator
     @Override
     public boolean resetWithTabs(
             @Nullable List<PseudoTab> tabs, boolean quickMode, boolean mruMode) {
-        // Invalidate price welcome message for every reset so that the stale message won't be
-        // restored by mistake (e.g. from tabClosureUndone in TabSwitcherMediator).
-        if (mPriceMessageService != null) {
-            mPriceMessageService.invalidateMessage();
-        }
         boolean showQuickly = mTabListCoordinator.resetWithListOfTabs(tabs, quickMode, mruMode);
         if (showQuickly) {
             removeAllAppendedMessage();
         }
-        if (tabs != null && tabs.size() > 0) {
-            if (mPriceMessageService != null
-                    && PriceTrackingUtilities.isPriceAlertsMessageCardEnabled()) {
-                mPriceMessageService.preparePriceMessage(PriceMessageType.PRICE_ALERTS, null);
-            }
-            appendMessagesTo(tabs.size());
-        }
 
         return showQuickly;
     }
@@ -789,38 +739,6 @@ public class TabSwitcherCoordinator
         sAppendedMessagesForTesting = messages.size() > 0;
     }
 
-    // PriceWelcomeMessageController implementation.
-    @Override
-    public void removePriceWelcomeMessage() {
-        mTabListCoordinator.removeSpecialListItem(
-                TabProperties.UiType.LARGE_MESSAGE, MessageService.MessageType.PRICE_MESSAGE);
-    }
-
-    @Override
-    public void restorePriceWelcomeMessage() {
-        appendNextMessage(MessageService.MessageType.PRICE_MESSAGE);
-    }
-
-    @Override
-    public void showPriceWelcomeMessage(PriceMessageService.PriceTabData priceTabData) {
-        if (mPriceMessageService == null
-                || !PriceTrackingUtilities.isPriceWelcomeMessageCardEnabled()
-                || mMessageCardProviderCoordinator.isMessageShown(
-                        MessageService.MessageType.PRICE_MESSAGE, PriceMessageType.PRICE_WELCOME)) {
-            return;
-        }
-        if (mPriceMessageService.preparePriceMessage(
-                    PriceMessageType.PRICE_WELCOME, priceTabData)) {
-            appendNextMessage(MessageService.MessageType.PRICE_MESSAGE);
-            // To make the message card in view when user enters tab switcher, we should scroll to
-            // current tab with 0 offset. See {@link
-            // TabSwitcherMediator#setInitialScrollIndexOffset} for more details.
-            mMediator.scrollToTab(mTabModelSelector.getTabModelFilterProvider()
-                                          .getCurrentTabModelFilter()
-                                          .index());
-        }
-    }
-
     // OnLongPressTabItemEventListener implementation
     @Override
     public void onLongPressEvent(int tabId) {
@@ -857,9 +775,6 @@ public class TabSwitcherCoordinator
                 mMessageCardProviderCoordinator.getNextMessageItemForType(messageType);
         if (nextMessage == null || !shouldAppendMessage(nextMessage.model)) return;
         if (messageType == MessageService.MessageType.PRICE_MESSAGE) {
-            mTabListCoordinator.addSpecialListItem(
-                    mTabListCoordinator.getPriceWelcomeMessageInsertionIndex(),
-                    TabProperties.UiType.LARGE_MESSAGE, nextMessage.model);
         } else {
             mTabListCoordinator.addSpecialListItemToEnd(
                     TabProperties.UiType.MESSAGE, nextMessage.model);
@@ -909,8 +824,7 @@ public class TabSwitcherCoordinator
     }
 
     private boolean shouldRegisterLargeMessageItemType() {
-        return PriceTrackingFeatures.isPriceTrackingEnabled()
-                || IncognitoReauthManager.isIncognitoReauthFeatureAvailable();
+        return IncognitoReauthManager.isIncognitoReauthFeatureAvailable();
     }
 
     @Override
@@ -948,9 +862,6 @@ public class TabSwitcherCoordinator
         if (mTabAttributeCache != null) {
             mTabAttributeCache.destroy();
         }
-        if (mPriceAnnotationsPrefObserver != null) {
-            SharedPreferencesManager.getInstance().removeObserver(mPriceAnnotationsPrefObserver);
-        }
     }
 
     /**
diff --git a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabSwitcherMediator.java b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabSwitcherMediator.java
--- a/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabSwitcherMediator.java
+++ b/chrome/android/features/tab_ui/java/src/org/chromium/chrome/browser/tasks/tab_management/TabSwitcherMediator.java
@@ -45,7 +45,6 @@ import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.incognito.reauth.IncognitoReauthController;
 import org.chromium.chrome.browser.incognito.reauth.IncognitoReauthManager;
 import org.chromium.chrome.browser.multiwindow.MultiWindowModeStateDispatcher;
-import org.chromium.chrome.browser.price_tracking.PriceTrackingUtilities;
 import org.chromium.chrome.browser.tab.Tab;
 import org.chromium.chrome.browser.tab.TabCreationState;
 import org.chromium.chrome.browser.tab.TabSelectionType;
@@ -78,7 +77,6 @@ import java.util.List;
  */
 class TabSwitcherMediator implements TabSwitcher.Controller, TabListRecyclerView.VisibilityListener,
                                      TabListMediator.GridCardOnClickListenerProvider,
-                                     PriceMessageService.PriceWelcomeMessageReviewActionProvider,
                                      TabSwitcherCustomViewManager.Delegate, BackPressHandler {
     private static final String TAG = "TabSwitcherMediator";
 
@@ -148,7 +146,6 @@ class TabSwitcherMediator implements TabSwitcher.Controller, TabListRecyclerView
     private TabSelectionEditorCoordinator
             .TabSelectionEditorController mTabSelectionEditorController;
     private TabSwitcher.OnTabSelectingListener mOnTabSelectingListener;
-    private PriceMessageService mPriceMessageService;
 
     /**
      * This allows to check if re-auth is pending when tab switcher is shown in Incognito mode.
@@ -237,29 +234,6 @@ class TabSwitcherMediator implements TabSwitcher.Controller, TabListRecyclerView
         void restoreAllAppendedMessage();
     }
 
-    /**
-     * An interface to control price welcome message in grid tab switcher.
-     */
-    interface PriceWelcomeMessageController {
-        /**
-         * Remove the price welcome message item in the model list. Right now this is used when
-         * its binding tab is closed in the grid tab switcher.
-         */
-        void removePriceWelcomeMessage();
-
-        /**
-         * Restore the price welcome message item that should show. Right now this is only used
-         * when the closure of the binding tab in tab switcher is undone.
-         */
-        void restorePriceWelcomeMessage();
-
-        /**
-         * Show the price welcome message in tab switcher. This is used when any open tab in tab
-         * switcher has a price drop.
-         */
-        void showPriceWelcomeMessage(PriceMessageService.PriceTabData priceTabData);
-    }
-
     /**
      * Basic constructor for the Mediator.
      * @param context The context to use for accessing {@link android.content.res.Resources}.
@@ -283,7 +257,6 @@ class TabSwitcherMediator implements TabSwitcher.Controller, TabListRecyclerView
             PropertyModel containerViewModel, TabModelSelector tabModelSelector,
             BrowserControlsStateProvider browserControlsStateProvider, ViewGroup containerView,
             TabContentManager tabContentManager, MessageItemsController messageItemsController,
-            PriceWelcomeMessageController priceWelcomeMessageController,
             MultiWindowModeStateDispatcher multiWindowModeStateDispatcher, @TabListMode int mode,
             @Nullable OneshotSupplier<IncognitoReauthController> incognitoReauthControllerSupplier,
             @Nullable BackPressManager backPressManager,
@@ -388,9 +361,6 @@ class TabSwitcherMediator implements TabSwitcher.Controller, TabListRecyclerView
             public void willCloseTab(Tab tab, boolean animate, boolean didCloseAlone) {
                 if (mTabModelSelector.getCurrentModel().getCount() == 1) {
                     messageItemsController.removeAllAppendedMessage();
-                } else if (mPriceMessageService != null
-                        && mPriceMessageService.getBindingTabId() == tab.getId()) {
-                    priceWelcomeMessageController.removePriceWelcomeMessage();
                 }
             }
 
@@ -399,10 +369,6 @@ class TabSwitcherMediator implements TabSwitcher.Controller, TabListRecyclerView
                 if (mTabModelSelector.getCurrentModel().getCount() == 1) {
                     messageItemsController.restoreAllAppendedMessage();
                 }
-                if (mPriceMessageService != null
-                        && mPriceMessageService.getBindingTabId() == tab.getId()) {
-                    priceWelcomeMessageController.restorePriceWelcomeMessage();
-                }
                 notifyBackPressStateChangedInternal();
             }
 
@@ -430,12 +396,6 @@ class TabSwitcherMediator implements TabSwitcher.Controller, TabListRecyclerView
 
             @Override
             public void tabClosureCommitted(Tab tab) {
-                // TODO(crbug.com/1157578): Auto update the PriceMessageService instead of
-                // updating it based on the client caller.
-                if (mPriceMessageService != null
-                        && mPriceMessageService.getBindingTabId() == tab.getId()) {
-                    mPriceMessageService.invalidateMessage();
-                }
             }
         };
 
@@ -695,14 +655,6 @@ class TabSwitcherMediator implements TabSwitcher.Controller, TabListRecyclerView
                         "MobileTabSwitched." + TabSwitcherCoordinator.COMPONENT_NAME);
             }
         }
-        if (mMode == TabListCoordinator.TabListMode.GRID
-                && PriceTrackingUtilities.isTabModelPriceTrackingEligible(
-                        mTabModelSelector.getCurrentModel())
-                && PriceTrackingUtilities.isTrackPricesOnTabsEnabled()) {
-            RecordUserAction.record("Commerce.TabGridSwitched."
-                    + (ShoppingPersistedTabData.hasPriceDrop(tab) ? "HasPriceDrop"
-                                                                  : "NoPriceDrop"));
-        }
     }
 
     @Override
@@ -1073,10 +1025,6 @@ class TabSwitcherMediator implements TabSwitcher.Controller, TabListRecyclerView
         mOnTabSelectingListener = listener;
     }
 
-    void setPriceMessageService(PriceMessageService priceMessageService) {
-        mPriceMessageService = priceMessageService;
-    }
-
     // GridCardOnClickListenerProvider implementation.
     @Override
     @Nullable
@@ -1110,11 +1058,6 @@ class TabSwitcherMediator implements TabSwitcher.Controller, TabListRecyclerView
         }
     }
 
-    @Override
-    public void scrollToTab(int tabIndex) {
-        mContainerViewModel.set(TabListContainerProperties.INITIAL_SCROLL_INDEX, tabIndex);
-    }
-
     private boolean ableToOpenDialog(Tab tab) {
         return TabUiFeatureUtilities.isTabGroupsAndroidEnabled(mContext)
                 && mTabModelSelector.isIncognitoSelected() == tab.isIncognito()
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
@@ -82,7 +82,6 @@ import org.chromium.chrome.browser.app.tabmodel.AsyncTabParamsManagerSingleton;
 import org.chromium.chrome.browser.app.tabmodel.TabModelOrchestrator;
 import org.chromium.chrome.browser.back_press.BackPressManager;
 import org.chromium.chrome.browser.bookmarks.BookmarkModel;
-import org.chromium.chrome.browser.bookmarks.PowerBookmarkUtils;
 import org.chromium.chrome.browser.bookmarks.TabBookmarker;
 import org.chromium.chrome.browser.compositor.CompositorViewHolder;
 import org.chromium.chrome.browser.compositor.layouts.Layout;
@@ -2334,18 +2333,11 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
         }
 
         if (id == R.id.enable_price_tracking_menu_id) {
-            mTabBookmarkerSupplier.get().startOrModifyPriceTracking(currentTab);
             RecordUserAction.record("MobileMenuEnablePriceTracking");
-            TrackerFactory.getTrackerForProfile(Profile.getLastUsedRegularProfile())
-                    .notifyEvent(EventConstants.SHOPPING_LIST_PRICE_TRACK_FROM_MENU);
             return true;
         }
 
         if (id == R.id.disable_price_tracking_menu_id) {
-            PowerBookmarkUtils.setPriceTrackingEnabledWithSnackbars(mBookmarkModelSupplier.get(),
-                    mBookmarkModelSupplier.get().getUserBookmarkIdForTab(currentTab),
-                    /*enabled=*/false, mSnackbarManager, getResources(), (success) -> {});
-            RecordUserAction.record("MobileMenuDisablePriceTracking");
             return true;
         }
 
@@ -2369,7 +2361,7 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
         if (id == R.id.info_menu_id) {
             ChromePageInfo pageInfo =
                     new ChromePageInfo(getModalDialogManagerSupplier(), null, OpenedFromSource.MENU,
-                            mRootUiCoordinator.getMerchantTrustSignalsCoordinatorSupplier()::get,
+                            /*mRootUiCoordinator.getMerchantTrustSignalsCoordinatorSupplier()::get*/ null,
                             mRootUiCoordinator.getEphemeralTabCoordinatorSupplier());
             pageInfo.show(currentTab, ChromePageInfoHighlight.noHighlight());
             return true;
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/app/appmenu/AppMenuPropertiesDelegateImpl.java b/chrome/android/java/src/org/chromium/chrome/browser/app/appmenu/AppMenuPropertiesDelegateImpl.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/app/appmenu/AppMenuPropertiesDelegateImpl.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/app/appmenu/AppMenuPropertiesDelegateImpl.java
@@ -41,7 +41,6 @@ import org.chromium.chrome.browser.ActivityTabProvider;
 import org.chromium.chrome.browser.banners.AppMenuVerbiage;
 import org.chromium.chrome.browser.bookmarks.BookmarkFeatures;
 import org.chromium.chrome.browser.bookmarks.BookmarkModel;
-import org.chromium.chrome.browser.bookmarks.PowerBookmarkUtils;
 import org.chromium.chrome.browser.commerce.ShoppingFeatures;
 import org.chromium.chrome.browser.commerce.ShoppingServiceFactory;
 import org.chromium.chrome.browser.device.DeviceClassManager;
@@ -1114,9 +1113,9 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
      * @param stopPriceTrackingMenuItem The menu item to stop price tracking.
      * @param currentTab Current tab being displayed.
      */
-    protected void updatePriceTrackingMenuItemRow(@NonNull MenuItem startPriceTrackingMenuItem,
-            @NonNull MenuItem stopPriceTrackingMenuItem, @Nullable Tab currentTab) {
-        ShoppingService service =
+    protected void updatePriceTrackingMenuItemRow(@NonNull MenuItem startPriceTrackingMenuItem,  // disabled
+            @NonNull MenuItem stopPriceTrackingMenuItem, @Nullable Tab currentTab) {             // in Bromite
+        /*ShoppingService service =
                 ShoppingServiceFactory.getForProfile(Profile.getLastUsedRegularProfile());
         ShoppingService.ProductInfo info = null;
         if (service != null && currentTab != null) {
@@ -1147,7 +1146,9 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
         } else {
             startPriceTrackingMenuItem.setVisible(true);
             stopPriceTrackingMenuItem.setVisible(false);
-        }
+        } */
+        startPriceTrackingMenuItem.setVisible(false);
+        stopPriceTrackingMenuItem.setVisible(false);
     }
 
     /**
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkBridge.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkBridge.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkBridge.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkBridge.java
@@ -28,7 +28,6 @@ import org.chromium.chrome.browser.tab.Tab;
 import org.chromium.components.bookmarks.BookmarkId;
 import org.chromium.components.bookmarks.BookmarkItem;
 import org.chromium.components.bookmarks.BookmarkType;
-import org.chromium.components.commerce.core.ShoppingService;
 import org.chromium.components.power_bookmarks.PowerBookmarkMeta;
 import org.chromium.components.power_bookmarks.PowerBookmarkType;
 import org.chromium.content_public.browser.WebContents;
@@ -47,7 +46,6 @@ class BookmarkBridge {
     private boolean mIsDoingExtensiveChanges;
     private boolean mIsNativeBookmarkModelLoaded;
     private final ObserverList<BookmarkModelObserver> mObservers = new ObserverList<>();
-    private ShoppingService mShoppingService;
 
     /**
      * Handler to fetch the bookmarks, titles, urls and folder hierarchy.
@@ -199,12 +197,6 @@ class BookmarkBridge {
         assert mIsNativeBookmarkModelLoaded;
         if (id == null) return null;
 
-        if (BookmarkId.SHOPPING_FOLDER.equals(id)) {
-            return new BookmarkItem(id, /*title=*/null, /*url=*/null,
-                    /*isFolder=*/true, /*parentId=*/getRootFolderId(), /*isEditable=*/false,
-                    /*isManaged=*/false, /*dateAdded=*/0L, /*read=*/false);
-        }
-
         return BookmarkBridgeJni.get().getBookmarkByID(
                 mNativeBookmarkBridge, BookmarkBridge.this, id.getId(), id.getType());
     }
@@ -389,9 +381,6 @@ class BookmarkBridge {
         ThreadUtils.assertOnUiThread();
         if (mNativeBookmarkBridge == 0) return new ArrayList<>();
         assert mIsNativeBookmarkModelLoaded;
-        if (BookmarkId.SHOPPING_FOLDER.equals(id)) {
-            return searchBookmarks("", null, PowerBookmarkType.SHOPPING, -1);
-        }
         List<BookmarkId> result = new ArrayList<>();
         BookmarkBridgeJni.get().getChildIDs(
                 mNativeBookmarkBridge, BookmarkBridge.this, id.getId(), id.getType(), result);
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkItemsAdapter.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkItemsAdapter.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkItemsAdapter.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkItemsAdapter.java
@@ -51,6 +51,7 @@ public class BookmarkItemsAdapter extends DragReorderableListAdapter<BookmarkLis
         boolean isReorderable(BookmarkListEntry entry);
     }
 
+    private BookmarkPromoHeader mPromoHeaderManager;
     private final ViewFactory mViewFactory;
     private final ViewBinder mViewBinder;
     private @Nullable BookmarkDelegate mBookmarkDelegate;
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkListEntry.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkListEntry.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkListEntry.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkListEntry.java
@@ -25,17 +25,14 @@ public final class BookmarkListEntry {
     @Retention(RetentionPolicy.SOURCE)
     @IntDef({ViewType.INVALID,
             ViewType.FOLDER, ViewType.BOOKMARK, ViewType.DIVIDER,
-            ViewType.SECTION_HEADER, ViewType.SHOPPING_POWER_BOOKMARK, ViewType.TAG_CHIP_LIST,
-            ViewType.SHOPPING_FILTER})
+            ViewType.SECTION_HEADER, ViewType.TAG_CHIP_LIST})
     public @interface ViewType {
         int INVALID = -1;
         int FOLDER = 3;
         int BOOKMARK = 4;
         int DIVIDER = 5;
         int SECTION_HEADER = 6;
-        int SHOPPING_POWER_BOOKMARK = 7;
         int TAG_CHIP_LIST = 8;
-        int SHOPPING_FILTER = 9;
     }
 
     /**
@@ -72,23 +69,9 @@ public final class BookmarkListEntry {
             @Nonnull BookmarkItem bookmarkItem, @Nullable PowerBookmarkMeta meta) {
         @ViewType
         int viewType = bookmarkItem.isFolder() ? ViewType.FOLDER : ViewType.BOOKMARK;
-        if (meta != null && meta.hasShoppingSpecifics()) {
-            viewType = ViewType.SHOPPING_POWER_BOOKMARK;
-        }
-
         return new BookmarkListEntry(viewType, bookmarkItem, /*sectionHeaderData=*/null);
     }
 
-    /**
-     * Create an entry presenting a sync promo header.
-     * @param viewType The view type of the sync promo header.
-     */
-    static BookmarkListEntry createSyncPromoHeader(@ViewType int viewType) {
-        assert viewType == ViewType.PERSONALIZED_SIGNIN_PROMO
-                || viewType == ViewType.PERSONALIZED_SYNC_PROMO || viewType == ViewType.SYNC_PROMO;
-        return new BookmarkListEntry(viewType, /*bookmarkItem=*/null, /*sectionHeaderData=*/null);
-    }
-
     /**
      * Creates a divider to separate sections in the bookmark list.
      */
@@ -97,22 +80,13 @@ public final class BookmarkListEntry {
                 ViewType.DIVIDER, /*bookmarkItem=*/null, /*sectionHeaderData=*/null);
     }
 
-    /**
-     * Creates a price-tracking filter.
-     */
-    static BookmarkListEntry createShoppingFilter() {
-        return new BookmarkListEntry(
-                ViewType.SHOPPING_FILTER, /*bookmarkItem=*/null, /*sectionHeaderData=*/null);
-    }
-
     /**
      * Helper function that returns whether the view type represents a bookmark or bookmark folder.
      * Returns false for other view holder types like divider, promo headers, etc.
      * @param viewType The type of the view in the bookmark list UI.
      */
     static boolean isBookmarkEntry(@ViewType int viewType) {
-        return viewType == ViewType.BOOKMARK || viewType == ViewType.FOLDER
-                || viewType == ViewType.SHOPPING_POWER_BOOKMARK;
+        return viewType == ViewType.BOOKMARK || viewType == ViewType.FOLDER;
     }
 
     /**
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerCoordinator.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerCoordinator.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerCoordinator.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerCoordinator.java
@@ -250,11 +250,6 @@ public class BookmarkManagerCoordinator
     public View createView(@NonNull ViewGroup parent, @ViewType int viewType) {
         // The shopping-specific bookmark row is only shown with the visual refresh. When
         // there's a mismatch, the ViewType is downgraded to ViewType.BOOKMARK.
-        if (viewType == ViewType.SHOPPING_POWER_BOOKMARK
-                && !BookmarkFeatures.isBookmarksVisualRefreshEnabled()) {
-            viewType = ViewType.BOOKMARK;
-        }
-
         switch (viewType) {
             case ViewType.SECTION_HEADER:
                 return buildSectionHeaderView(parent);
@@ -262,12 +257,8 @@ public class BookmarkManagerCoordinator
                 return buildBookmarkFolderView(parent);
             case ViewType.BOOKMARK:
                 return buildBookmarkItemView(parent);
-            case ViewType.SHOPPING_POWER_BOOKMARK:
-                return buildShoppingItemView(parent);
             case ViewType.DIVIDER:
                 return buildDividerView(parent);
-            case ViewType.SHOPPING_FILTER:
-                return buildShoppingFilterView(parent);
             default:
                 assert false;
                 return null;
@@ -286,15 +277,9 @@ public class BookmarkManagerCoordinator
             case ViewType.BOOKMARK:
                 viewBinder = BookmarkManagerViewBinder::bindBookmarkItemView;
                 break;
-            case ViewType.SHOPPING_POWER_BOOKMARK:
-                viewBinder = BookmarkManagerViewBinder::bindShoppingItemView;
-                break;
             case ViewType.DIVIDER:
                 viewBinder = BookmarkManagerViewBinder::bindDividerView;
                 break;
-            case ViewType.SHOPPING_FILTER:
-                viewBinder = BookmarkManagerViewBinder::bindShoppingFilterView;
-                break;
             default:
                 assert false;
         }
@@ -313,14 +298,6 @@ public class BookmarkManagerCoordinator
         return inflateBookmarkRow(parent, org.chromium.chrome.R.layout.bookmark_item_row);
     }
 
-    private View buildShoppingItemView(ViewGroup parent) {
-        PowerBookmarkShoppingItemRow row = (PowerBookmarkShoppingItemRow) inflateBookmarkRow(
-                parent, org.chromium.chrome.R.layout.power_bookmark_shopping_item_row);
-        // TODO(https://crbug.com/1416611): Move init to view binding.
-        row.init(mImageFetcher, mBookmarkModel, mSnackbarManager, mProfile);
-        return row;
-    }
-
     private View buildDividerView(ViewGroup parent) {
         return inflate(parent, org.chromium.chrome.R.layout.horizontal_divider);
     }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerMediator.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerMediator.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerMediator.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerMediator.java
@@ -250,10 +250,7 @@ class BookmarkManagerMediator implements BookmarkDelegate, TestingDelegate,
                 setBookmarks(mBookmarkModel.getChildIDs(folder));
             }
 
-            if (BookmarkId.SHOPPING_FOLDER.equals(folder)) {
-                getSelectableListLayout().setEmptyViewText(
-                        R.string.tracked_products_empty_list_title);
-            } else if (folder.getType() == BookmarkType.READING_LIST) {
+            if (folder.getType() == BookmarkType.READING_LIST) {
                 TrackerFactory.getTrackerForProfile(mProfile).notifyEvent(
                         EventConstants.READ_LATER_BOOKMARK_FOLDER_OPENED);
                 getSelectableListLayout().setEmptyViewText(R.string.reading_list_empty_list_title);
@@ -481,14 +478,12 @@ class BookmarkManagerMediator implements BookmarkDelegate, TestingDelegate,
             model.set(BookmarkManagerProperties.BOOKMARK_ID, id);
             model.set(BookmarkManagerProperties.LOCATION, getLocationFromPosition(position));
             model.set(BookmarkManagerProperties.IS_FROM_FILTER_VIEW,
-                    BookmarkId.SHOPPING_FOLDER.equals(mCurrentFolder));
+                    false);
             model.set(BookmarkManagerProperties.ITEM_TOUCH_HELPER,
                     mBookmarkItemsAdapter.getItemTouchHelper());
             model.set(BookmarkManagerProperties.VIEW_HOLDER, holder);
             model.set(BookmarkManagerProperties.IS_HIGHLIGHTED, id.equals(mHighlightedBookmark));
             model.set(BookmarkManagerProperties.CLEAR_HIGHLIGHT, this::clearHighlight);
-        } else if (viewType == ViewType.SHOPPING_FILTER) {
-            model.set(BookmarkManagerProperties.OPEN_FOLDER, this::openFolder);
         }
         return model;
     }
@@ -830,9 +825,6 @@ class BookmarkManagerMediator implements BookmarkDelegate, TestingDelegate,
         // Restore the header, if it exists, then update it.
 
         updateHeader(false);
-        if (BookmarkId.SHOPPING_FOLDER.equals(mCurrentFolder)) {
-            filterForPriceTrackingCategory(bookmarks);
-        }
 
         for (BookmarkId bookmarkId : bookmarks) {
             BookmarkItem item = mBookmarkModel.getBookmarkById(bookmarkId);
@@ -849,7 +841,6 @@ class BookmarkManagerMediator implements BookmarkDelegate, TestingDelegate,
         if (ChromeFeatureList.isEnabled(ChromeFeatureList.SHOPPING_LIST)
                 && topLevelFoldersShowing()) {
             getElements().add(BookmarkListEntry.createDivider());
-            getElements().add(BookmarkListEntry.createShoppingFilter());
         }
 
         mBookmarkItemsAdapter.notifyDataSetChanged();
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerViewBinder.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerViewBinder.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerViewBinder.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerViewBinder.java
@@ -82,15 +82,4 @@ class BookmarkManagerViewBinder {
     }
 
     static void bindDividerView(PropertyModel model, View view, PropertyKey key) {}
-
-    static void bindShoppingFilterView(PropertyModel model, View view, PropertyKey key) {
-        if (key == BookmarkManagerProperties.OPEN_FOLDER) {
-            LinearLayout layout = (LinearLayout) view;
-            layout.setClickable(true);
-            layout.setOnClickListener((v) -> {
-                model.get(BookmarkManagerProperties.OPEN_FOLDER)
-                        .onResult(BookmarkId.SHOPPING_FOLDER);
-            });
-        }
-    }
 }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkSaveFlowCoordinator.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkSaveFlowCoordinator.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkSaveFlowCoordinator.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkSaveFlowCoordinator.java
@@ -58,12 +58,10 @@ public class BookmarkSaveFlowCoordinator {
     /**
      * @param context The {@link Context} associated with this cooridnator.
      * @param bottomSheetController Allows displaying content in the bottom sheet.
-     * @param shoppingService Allows un/subscribing for product updates, used for
-     *         price-tracking.
      * @param userEducationHelper A means of triggering IPH.
      */
     public BookmarkSaveFlowCoordinator(@NonNull Context context,
-            @NonNull BottomSheetController bottomSheetController, ShoppingService shoppingService,
+            @NonNull BottomSheetController bottomSheetController,
             @NonNull UserEducationHelper userEducationHelper, Profile profile) {
         mContext = context;
         mBottomSheetController = bottomSheetController;
@@ -75,7 +73,7 @@ public class BookmarkSaveFlowCoordinator {
         mBookmarkSaveFlowView = LayoutInflater.from(mContext).inflate(
                 org.chromium.chrome.R.layout.bookmark_save_flow, /*root=*/null);
         mMediator = new BookmarkSaveFlowMediator(
-                mBookmarkModel, mPropertyModel, mContext, this::close, shoppingService);
+                mBookmarkModel, mPropertyModel, mContext, this::close);
         mChangeProcessor = PropertyModelChangeProcessor.create(mPropertyModel,
                 (ViewLookupCachingFrameLayout) mBookmarkSaveFlowView,
                 new BookmarkSaveFlowViewBinder());
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkSaveFlowMediator.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkSaveFlowMediator.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkSaveFlowMediator.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkSaveFlowMediator.java
@@ -15,16 +15,11 @@ import org.chromium.base.Callback;
 import org.chromium.base.CallbackController;
 import org.chromium.base.metrics.RecordUserAction;
 import org.chromium.chrome.R;
-import org.chromium.chrome.browser.bookmarks.PowerBookmarkMetrics.PriceTrackingState;
 import org.chromium.chrome.browser.commerce.PriceTrackingUtils;
 import org.chromium.chrome.browser.feature_engagement.TrackerFactory;
-import org.chromium.chrome.browser.price_tracking.PriceDropNotificationManagerFactory;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.components.bookmarks.BookmarkId;
 import org.chromium.components.bookmarks.BookmarkItem;
-import org.chromium.components.commerce.core.CommerceSubscription;
-import org.chromium.components.commerce.core.ShoppingService;
-import org.chromium.components.commerce.core.SubscriptionsObserver;
 import org.chromium.components.feature_engagement.EventConstants;
 import org.chromium.components.power_bookmarks.PowerBookmarkMeta;
 import org.chromium.ui.modelutil.PropertyModel;
@@ -33,7 +28,7 @@ import java.util.List;
 
 /** Controls the bookmarks save-flow. */
 public class BookmarkSaveFlowMediator
-        extends BookmarkModelObserver implements SubscriptionsObserver {
+        extends BookmarkModelObserver {
     private final Context mContext;
     private final Runnable mCloseRunnable;
 
@@ -44,8 +39,6 @@ public class BookmarkSaveFlowMediator
     private PowerBookmarkMeta mPowerBookmarkMeta;
     private boolean mWasBookmarkMoved;
     private boolean mIsNewBookmark;
-    private ShoppingService mShoppingService;
-    private CommerceSubscription mSubscription;
     private Callback<Boolean> mSubscriptionsManagerCallback;
     private String mFolderName;
 
@@ -55,21 +48,15 @@ public class BookmarkSaveFlowMediator
      *         model.
      * @param context The {@link Context} associated with this mediator.
      * @param closeRunnable A {@link Runnable} which closes the bookmark save flow.
-     * @param shoppingService Used to manage the price-tracking subscriptions.
      */
     public BookmarkSaveFlowMediator(BookmarkModel bookmarkModel, PropertyModel propertyModel,
-            Context context, Runnable closeRunnable, ShoppingService shoppingService) {
+            Context context, Runnable closeRunnable) {
         mBookmarkModel = bookmarkModel;
         mBookmarkModel.addObserver(this);
 
         mPropertyModel = propertyModel;
         mContext = context;
         mCloseRunnable = closeRunnable;
-
-        mShoppingService = shoppingService;
-        if (mShoppingService != null) {
-            mShoppingService.addSubscriptionsObserver(this);
-        }
     }
 
     /**
@@ -106,9 +93,6 @@ public class BookmarkSaveFlowMediator
             mCloseRunnable.run();
         });
 
-        if (meta != null) {
-            mSubscription = PowerBookmarkUtils.createCommerceSubscriptionForPowerBookmarkMeta(meta);
-        }
         bindBookmarkProperties(mBookmarkId, mPowerBookmarkMeta, mWasBookmarkMoved);
         bindPowerBookmarkProperties(mBookmarkId, mPowerBookmarkMeta, fromExplicitTrackUi);
     }
@@ -134,46 +118,9 @@ public class BookmarkSaveFlowMediator
 
     private void bindPowerBookmarkProperties(
             BookmarkId bookmarkId, @Nullable PowerBookmarkMeta meta, boolean fromExplicitTrackUi) {
-        if (meta == null) return;
-
-        if (meta.hasShoppingSpecifics()) {
-            setPriceTrackingNotificationUiEnabled(true);
-            setPriceTrackingIconForEnabledState(false);
-            mPropertyModel.set(BookmarkSaveFlowProperties.NOTIFICATION_SWITCH_VISIBLE, true);
-            mPropertyModel.set(BookmarkSaveFlowProperties.NOTIFICATION_SWITCH_TITLE,
-                    mContext.getResources().getString(R.string.enable_price_tracking_menu_item));
-            mPropertyModel.set(BookmarkSaveFlowProperties.NOTIFICATION_SWITCH_TOGGLE_LISTENER,
-                    this::handleNotificationSwitchToggle);
-
-            if (fromExplicitTrackUi) {
-                mPropertyModel.set(BookmarkSaveFlowProperties.NOTIFICATION_SWITCH_TOGGLED, true);
-            }
-            PowerBookmarkMetrics.reportBookmarkSaveFlowPriceTrackingState(
-                    PriceTrackingState.PRICE_TRACKING_SHOWN);
-        }
     }
 
     void handleNotificationSwitchToggle(CompoundButton view, boolean toggled) {
-        if (mSubscriptionsManagerCallback == null) {
-            mSubscriptionsManagerCallback =
-                    mCallbackController.makeCancelable((Boolean success) -> {
-                        setPriceTrackingToggleVisualsOnly(success && view.isChecked());
-                        setPriceTrackingNotificationUiEnabled(success);
-                    });
-        }
-
-        // Make sure the notification channel is initialized when the user tracks a product.
-        // TODO(crbug.com/1382191): Add a SubscriptionsObserver in the PriceDropNotificationManager
-        // and initialize the channel there.
-        if (toggled && Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            PriceDropNotificationManagerFactory.create().createNotificationChannel();
-        }
-        setPriceTrackingIconForEnabledState(toggled);
-        PriceTrackingUtils.setPriceTrackingStateForBookmark(Profile.getLastUsedRegularProfile(),
-                mBookmarkId.getId(), toggled, mSubscriptionsManagerCallback, mIsNewBookmark);
-        PowerBookmarkMetrics.reportBookmarkSaveFlowPriceTrackingState(toggled
-                        ? PriceTrackingState.PRICE_TRACKING_ENABLED
-                        : PriceTrackingState.PRICE_TRACKING_DISABLED);
     }
 
     void setPriceTrackingNotificationUiEnabled(boolean enabled) {
@@ -192,9 +139,6 @@ public class BookmarkSaveFlowMediator
 
     void destroy() {
         mBookmarkModel.removeObserver(this);
-        if (mShoppingService != null) {
-            mShoppingService.removeSubscriptionsObserver(this);
-        }
 
         mBookmarkModel = null;
         mPropertyModel = null;
@@ -215,10 +159,6 @@ public class BookmarkSaveFlowMediator
                 this::handleNotificationSwitchToggle);
     }
 
-    void setSubscriptionForTesting(CommerceSubscription subscription) {
-        mSubscription = subscription;
-    }
-
     // BookmarkModelObserver implementation
 
     @Override
@@ -230,17 +170,4 @@ public class BookmarkSaveFlowMediator
         }
         bindBookmarkProperties(mBookmarkId, mPowerBookmarkMeta, mWasBookmarkMoved);
     }
-
-    // SubscriptionsObserver implementation
-    @Override
-    public void onSubscribe(List<CommerceSubscription> subscriptions, boolean succeeded) {
-        if (!succeeded) return;
-        setPriceTrackingToggleVisualsOnly(subscriptions.contains(mSubscription));
-    }
-
-    @Override
-    public void onUnsubscribe(List<CommerceSubscription> subscriptions, boolean succeeded) {
-        if (!succeeded) return;
-        setPriceTrackingToggleVisualsOnly(!subscriptions.contains(mSubscription));
-    }
 }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkToolbar.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkToolbar.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkToolbar.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkToolbar.java
@@ -148,9 +148,7 @@ public class BookmarkToolbar extends SelectableListToolbar<BookmarkId>
             return;
         }
 
-        if (folder.getId().equals(BookmarkId.SHOPPING_FOLDER)) {
-            setTitle(R.string.price_tracking_bookmarks_filter_title);
-        } else if (mBookmarkModel.getTopLevelFolderParentIDs().contains(
+        if (mBookmarkModel.getTopLevelFolderParentIDs().contains(
                            mCurrentFolder.getParentId())
                 && TextUtils.isEmpty(mCurrentFolder.getTitle())) {
             setTitle(R.string.bookmarks);
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkUiState.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkUiState.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkUiState.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkUiState.java
@@ -45,26 +45,13 @@ public class BookmarkUiState {
         return new BookmarkUiState(BookmarkUiMode.SEARCHING, "", null);
     }
 
-    static BookmarkUiState createShoppingFilterState() {
-        return new BookmarkUiState(
-                BookmarkUiMode.FOLDER, SHOPPING_FILTER_URL, BookmarkId.SHOPPING_FOLDER);
-    }
-
     static BookmarkUiState createFolderState(BookmarkId folder, BookmarkModel bookmarkModel) {
-        if (BookmarkId.SHOPPING_FOLDER.equals(folder)) {
-            return createShoppingFilterState();
-        } else {
             return createStateFromUrl(createFolderUrl(folder), bookmarkModel);
-        }
     }
 
     /** @see #createStateFromUrl(Uri, BookmarkModel). */
     static BookmarkUiState createStateFromUrl(String url, BookmarkModel bookmarkModel) {
-        if (SHOPPING_FILTER_URL.equals(url)) {
-            return createShoppingFilterState();
-        } else {
             return createStateFromUrl(Uri.parse(url), bookmarkModel);
-        }
     }
 
     /**
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkUtils.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkUtils.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkUtils.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkUtils.java
@@ -34,7 +34,6 @@ import org.chromium.chrome.browser.app.bookmarks.BookmarkActivity;
 import org.chromium.chrome.browser.app.bookmarks.BookmarkAddEditFolderActivity;
 import org.chromium.chrome.browser.app.bookmarks.BookmarkEditActivity;
 import org.chromium.chrome.browser.app.bookmarks.BookmarkFolderSelectActivity;
-import org.chromium.chrome.browser.commerce.ShoppingServiceFactory;
 import org.chromium.chrome.browser.document.ChromeLauncherActivity;
 import org.chromium.chrome.browser.feature_engagement.TrackerFactory;
 import org.chromium.chrome.browser.incognito.IncognitoUtils;
@@ -127,10 +126,8 @@ public class BookmarkUtils {
         }
 
         Profile profile = Profile.getLastUsedRegularProfile();
-        ShoppingService shoppingService = ShoppingServiceFactory.getForProfile(profile);
-
         BookmarkSaveFlowCoordinator bookmarkSaveFlowCoordinator =
-                new BookmarkSaveFlowCoordinator(activity, bottomSheetController, shoppingService,
+                new BookmarkSaveFlowCoordinator(activity, bottomSheetController,
                         new UserEducationHelper(activity, new Handler()), profile);
         bookmarkSaveFlowCoordinator.show(
                 bookmarkId, fromExplicitTrackUi, wasBookmarkMoved, isNewBookmark);
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/customtabs/CustomTabActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/customtabs/CustomTabActivity.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/customtabs/CustomTabActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/customtabs/CustomTabActivity.java
@@ -231,7 +231,7 @@ public class CustomTabActivity extends BaseCustomTabActivity {
             if (tab == null) return false;
             String publisher = TrustedCdn.getContentPublisher(tab);
             new ChromePageInfo(getModalDialogManagerSupplier(), publisher, OpenedFromSource.MENU,
-                    mRootUiCoordinator.getMerchantTrustSignalsCoordinatorSupplier()::get,
+                    /*mRootUiCoordinator.getMerchantTrustSignalsCoordinatorSupplier()::get*/ null,
                     mRootUiCoordinator.getEphemeralTabCoordinatorSupplier())
                     .show(tab, ChromePageInfoHighlight.noHighlight());
             return true;
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/init/ProcessInitializationHandler.java b/chrome/android/java/src/org/chromium/chrome/browser/init/ProcessInitializationHandler.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/init/ProcessInitializationHandler.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/init/ProcessInitializationHandler.java
@@ -72,7 +72,6 @@ import org.chromium.chrome.browser.partnercustomizations.PartnerBrowserCustomiza
 import org.chromium.chrome.browser.photo_picker.DecoderService;
 import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
-import org.chromium.chrome.browser.price_tracking.PriceTrackingFeatures;
 import org.chromium.chrome.browser.privacy.settings.PrivacyPreferencesManagerImpl;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.profiles.ProfileManagerUtils;
@@ -446,10 +445,6 @@ public class ProcessInitializationHandler {
                     .create()
                     .onDeferredStartup();
             // TODO(crbug.com/1355893) Move to PersistedTabData.onDeferredStartup
-            if (PriceTrackingFeatures.isPriceTrackingEligible()
-                    && ShoppingPersistedTabData.isPriceTrackingWithOptimizationGuideEnabled()) {
-                ShoppingPersistedTabData.onDeferredStartup();
-            }
         });
         deferredStartupHandler.addDeferredTask(() -> {
             if (ChromeFeatureList.isEnabled(ChromeFeatureList.FEATURE_NOTIFICATION_GUIDE)) {
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/page_info/ChromePageInfoControllerDelegate.java b/chrome/android/java/src/org/chromium/chrome/browser/page_info/ChromePageInfoControllerDelegate.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/page_info/ChromePageInfoControllerDelegate.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/page_info/ChromePageInfoControllerDelegate.java
@@ -246,14 +246,6 @@ public class ChromePageInfoControllerDelegate extends PageInfoControllerDelegate
             controllers.add(new PageInfoAboutThisSiteController(mainController,
                     mEphemeralTabCoordinatorSupplier, aboutThisSiteRow, this, mWebContents));
         }
-        if (PageInfoFeatures.PAGE_INFO_STORE_INFO.isEnabled() && !isIncognito()) {
-            final PageInfoRowView storeInfoRow = new PageInfoRowView(rowWrapper.getContext(), null);
-            storeInfoRow.setId(PageInfoStoreInfoController.STORE_INFO_ROW_ID);
-            rowWrapper.addView(storeInfoRow);
-            controllers.add(new PageInfoStoreInfoController(mainController, storeInfoRow,
-                    mStoreInfoActionHandlerSupplier, mPageInfoHighlight.shouldHighlightStoreInfo(),
-                    mWebContents, mProfile));
-        }
         return controllers;
     }
 
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/segmentation_platform/ContextualPageActionController.java b/chrome/android/java/src/org/chromium/chrome/browser/segmentation_platform/ContextualPageActionController.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/segmentation_platform/ContextualPageActionController.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/segmentation_platform/ContextualPageActionController.java
@@ -107,10 +107,6 @@ public class ContextualPageActionController {
     protected void initActionProviders(Supplier<ShoppingService> shoppingServiceSupplier,
             Supplier<BookmarkModel> bookmarkModelSupplier) {
         mActionProviders.clear();
-        if (AdaptiveToolbarFeatures.isPriceTrackingPageActionEnabled()) {
-            mActionProviders.add(new PriceTrackingActionProvider(
-                    shoppingServiceSupplier, bookmarkModelSupplier, mProfileSupplier));
-        }
         if (AdaptiveToolbarFeatures.isReaderModePageActionEnabled()) {
             mActionProviders.add(new ReaderModeActionProvider());
         }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/tab/TabHelpers.java b/chrome/android/java/src/org/chromium/chrome/browser/tab/TabHelpers.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/tab/TabHelpers.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/tab/TabHelpers.java
@@ -13,7 +13,6 @@ import org.chromium.chrome.browser.dom_distiller.TabDistillabilityProvider;
 import org.chromium.chrome.browser.infobar.InfoBarContainer;
 import org.chromium.chrome.browser.media.ui.MediaSessionTabHelper;
 import org.chromium.chrome.browser.password_check.PasswordCheckUkmRecorder;
-import org.chromium.chrome.browser.price_tracking.PriceTrackingFeatures;
 import org.chromium.chrome.browser.tab.state.ShoppingPersistedTabData;
 
 /**
@@ -39,14 +38,6 @@ public final class TabHelpers {
         PasswordCheckUkmRecorder.createForTab(tab);
         AccessibilityTabHelper.createForTab(tab);
 
-        // The following will start prefetching data for the price drops feature, so
-        // we should only do it if the user is eligible for the feature (e.g. has sync enabled).
-        if (!tab.isIncognito() && !((TabImpl) tab).isCustomTab()
-                && PriceTrackingFeatures.isPriceTrackingEligible()
-                && ShoppingPersistedTabData.isPriceTrackingWithOptimizationGuideEnabled()) {
-            ShoppingPersistedTabData.initialize(tab);
-        }
-
         // TODO(jinsukkim): Do this by having something observe new tab creation.
         if (tab.isIncognito()) CipherFactory.getInstance().triggerKeyGeneration();
     }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/tabbed_mode/TabbedRootUiCoordinator.java b/chrome/android/java/src/org/chromium/chrome/browser/tabbed_mode/TabbedRootUiCoordinator.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/tabbed_mode/TabbedRootUiCoordinator.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/tabbed_mode/TabbedRootUiCoordinator.java
@@ -77,7 +77,6 @@ import org.chromium.chrome.browser.offlinepages.indicator.OfflineIndicatorInProd
 import org.chromium.chrome.browser.omnibox.UrlFocusChangeListener;
 import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
-import org.chromium.chrome.browser.price_tracking.PriceTrackingFeatures;
 import org.chromium.chrome.browser.privacy_sandbox.PrivacySandboxDialogController;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.read_later.ReadLaterIPHController;
@@ -85,8 +84,6 @@ import org.chromium.chrome.browser.settings.SettingsLauncherImpl;
 import org.chromium.chrome.browser.share.ShareDelegate;
 import org.chromium.chrome.browser.share.link_to_text.LinkToTextIPHController;
 import org.chromium.chrome.browser.status_indicator.StatusIndicatorCoordinator;
-import org.chromium.chrome.browser.subscriptions.CommerceSubscriptionsService;
-import org.chromium.chrome.browser.subscriptions.CommerceSubscriptionsServiceFactory;
 import org.chromium.chrome.browser.tab.RequestDesktopUtils;
 import org.chromium.chrome.browser.tab.Tab;
 import org.chromium.chrome.browser.tab.TabAssociatedApp;
@@ -155,7 +152,6 @@ public class TabbedRootUiCoordinator extends RootUiCoordinator {
     private NavigationSheet mNavigationSheet;
     private ComposedBrowserControlsVisibilityDelegate mAppBrowserControlsVisibilityDelegate;
     private LayoutManagerImpl mLayoutManager;
-    private CommerceSubscriptionsService mCommerceSubscriptionsService;
     private UndoGroupSnackbarController mUndoGroupSnackbarController;
     private final int mControlContainerHeightResource;
     private final Supplier<InsetObserverView> mInsetObserverViewSupplier;
@@ -379,11 +375,6 @@ public class TabbedRootUiCoordinator extends RootUiCoordinator {
             mUndoGroupSnackbarController.destroy();
         }
 
-        if (mCommerceSubscriptionsService != null) {
-            mCommerceSubscriptionsService.destroy();
-            mCommerceSubscriptionsService = null;
-        }
-
         if (mNotificationPermissionController != null) {
             NotificationPermissionController.detach(mNotificationPermissionController);
             mNotificationPermissionController = null;
@@ -523,7 +514,6 @@ public class TabbedRootUiCoordinator extends RootUiCoordinator {
         mPwaBottomSheetController =
                 PwaBottomSheetControllerFactory.createPwaBottomSheetController(mActivity);
         PwaBottomSheetControllerFactory.attach(mWindowAndroid, mPwaBottomSheetController);
-        initCommerceSubscriptionsService();
         initUndoGroupSnackbarController();
     }
 
@@ -807,17 +797,6 @@ public class TabbedRootUiCoordinator extends RootUiCoordinator {
         if (animate) browserControlsSizer.setAnimateBrowserControlsHeightChanges(false);
     }
 
-    private void initCommerceSubscriptionsService() {
-        if (!PriceTrackingFeatures.getPriceTrackingNotificationsEnabled()) {
-            return;
-        }
-
-        CommerceSubscriptionsServiceFactory factory = new CommerceSubscriptionsServiceFactory();
-        mCommerceSubscriptionsService = factory.getForLastUsedProfile();
-        mCommerceSubscriptionsService.initDeferredStartupForActivity(
-                mTabModelSelectorSupplier.get(), mActivityLifecycleDispatcher);
-    }
-
     private void initUndoGroupSnackbarController() {
         if (TabUiFeatureUtilities.isTabGroupsAndroidEnabled(mActivity)) {
             mUndoGroupSnackbarController = new UndoGroupSnackbarController(
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/toolbar/ToolbarButtonInProductHelpController.java b/chrome/android/java/src/org/chromium/chrome/browser/toolbar/ToolbarButtonInProductHelpController.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/toolbar/ToolbarButtonInProductHelpController.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/toolbar/ToolbarButtonInProductHelpController.java
@@ -16,8 +16,6 @@ import org.chromium.base.supplier.Supplier;
 import org.chromium.base.task.PostTask;
 import org.chromium.base.task.TaskTraits;
 import org.chromium.chrome.R;
-import org.chromium.chrome.browser.bookmarks.PowerBookmarkUtils;
-import org.chromium.chrome.browser.commerce.ShoppingFeatures;
 import org.chromium.chrome.browser.download.DownloadUtils;
 import org.chromium.chrome.browser.feature_engagement.ScreenshotMonitor;
 import org.chromium.chrome.browser.feature_engagement.ScreenshotMonitorDelegate;
@@ -119,7 +117,6 @@ public class ToolbarButtonInProductHelpController
             private void handleIPHForSuccessfulPageLoad(final Tab tab) {
                 showDownloadPageTextBubble(tab, FeatureConstants.DOWNLOAD_PAGE_FEATURE);
                 showTranslateMenuButtonTextBubble(tab);
-                showPriceTrackingIPH(tab);
             }
 
             private void handleIPHForErrorPageShown(Tab tab) {
@@ -150,30 +147,6 @@ public class ToolbarButtonInProductHelpController
         mLifecycleDispatcher.unregister(this);
     }
 
-    /**
-     * Attempt to show the IPH for price tracking.
-     * @param tab The tab currently being displayed to the user.
-     */
-    private void showPriceTrackingIPH(Tab tab) {
-        if (!ShoppingFeatures.isShoppingListEligible()
-                || !PowerBookmarkUtils.isPriceTrackingEligible(tab)
-                || AdaptiveToolbarFeatures.isContextualPageActionUiEnabled()) {
-            return;
-        }
-
-        mUserEducationHelper.requestShowIPH(
-                new IPHCommandBuilder(mActivity.getResources(),
-                        FeatureConstants.SHOPPING_LIST_MENU_ITEM_FEATURE,
-                        R.string.iph_price_tracking_menu_item,
-                        R.string.iph_price_tracking_menu_item_accessibility)
-                        .setAnchorView(mMenuButtonAnchorView)
-                        .setOnShowCallback(()
-                                                   -> turnOnHighlightForMenuItem(
-                                                           R.id.enable_price_tracking_menu_id))
-                        .setOnDismissCallback(this::turnOffHighlightForMenuItem)
-                        .build());
-    }
-
     /**
      * Attempts to show an IPH text bubble for download continuing.
      */
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/toolbar/ToolbarManager.java b/chrome/android/java/src/org/chromium/chrome/browser/toolbar/ToolbarManager.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/toolbar/ToolbarManager.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/toolbar/ToolbarManager.java
@@ -90,8 +90,6 @@ import org.chromium.chrome.browser.omnibox.suggestions.ActionChipsDelegate;
 import org.chromium.chrome.browser.omnibox.voice.VoiceRecognitionHandler;
 import org.chromium.chrome.browser.page_info.ChromePageInfo;
 import org.chromium.chrome.browser.partnercustomizations.PartnerBrowserCustomizations;
-import org.chromium.chrome.browser.price_tracking.PriceTrackingFeatures;
-import org.chromium.chrome.browser.price_tracking.PriceTrackingUtilities;
 import org.chromium.chrome.browser.privacy.settings.PrivacyPreferencesManagerImpl;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.search_engines.TemplateUrlServiceFactory;
@@ -644,7 +642,7 @@ public class ToolbarManager implements UrlFocusChangeListener, ThemeColorObserve
                         postDataType, postData, incognito, startSurfaceParentTabSupplier.get());
             };
             ChromePageInfo toolbarPageInfo = new ChromePageInfo(modalDialogManagerSupplier, null,
-                    OpenedFromSource.TOOLBAR, merchantTrustSignalsCoordinatorSupplier::get,
+                    OpenedFromSource.TOOLBAR, /*merchantTrustSignalsCoordinatorSupplier::get*/ null,
                     mEphemeralTabCoordinatorSupplier);
             // clang-format off
             LocationBarCoordinator locationBarCoordinator = new LocationBarCoordinator(
@@ -2028,21 +2026,6 @@ public class ToolbarManager implements UrlFocusChangeListener, ThemeColorObserve
      * viewed in the tab switcher grid.
      */
     private void maybeShowPriceDropIPH() {
-        if (!PriceTrackingUtilities.isTrackPricesOnTabsEnabled()
-                || !PriceTrackingFeatures.isPriceDropIphEnabled() || mTabModelSelector == null
-                || mTabModelSelector.isIncognitoSelected()) {
-            return;
-        }
-        TabModel tabModel = mTabModelSelector.getCurrentModel();
-        for (int i = 0; i < tabModel.getCount(); i++) {
-            ShoppingPersistedTabData.from(tabModel.getTabAt(i), (shoppingPersistedTabData) -> {
-                if (shoppingPersistedTabData != null
-                        && shoppingPersistedTabData.getPriceDrop() != null
-                        && !shoppingPersistedTabData.getIsCurrentPriceDropSeen()) {
-                    showPriceDropIPH();
-                }
-            });
-        }
     }
 
     private void checkIfNtpLoaded() {
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/ui/RootUiCoordinator.java b/chrome/android/java/src/org/chromium/chrome/browser/ui/RootUiCoordinator.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/ui/RootUiCoordinator.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ui/RootUiCoordinator.java
@@ -93,7 +93,6 @@ import org.chromium.chrome.browser.omnibox.voice.VoiceRecognitionHandler;
 import org.chromium.chrome.browser.omnibox.voice.VoiceRecognitionHandler.VoiceInteractionSource;
 import org.chromium.chrome.browser.paint_preview.DemoPaintPreview;
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
-import org.chromium.chrome.browser.price_tracking.PriceTrackingButtonController;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.search_engines.TemplateUrlServiceFactory;
 import org.chromium.chrome.browser.settings.SettingsLauncherImpl;
@@ -617,7 +616,6 @@ public class RootUiCoordinator
         }
 
         if (mMerchantTrustSignalsCoordinatorSupplier.hasValue()) {
-            mMerchantTrustSignalsCoordinatorSupplier.get().destroy();
             mMerchantTrustSignalsCoordinatorSupplier.set(null);
         }
 
@@ -854,16 +852,6 @@ public class RootUiCoordinator
     }
 
     private void initMerchantTrustSignals() {
-        if (ShoppingServiceFactory.getForProfile(Profile.getLastUsedRegularProfile())
-                        .isMerchantViewerEnabled()
-                && shouldInitializeMerchantTrustSignals()) {
-            MerchantTrustSignalsCoordinator merchantTrustSignalsCoordinator =
-                    new MerchantTrustSignalsCoordinator(mActivity, mWindowAndroid,
-                            getBottomSheetController(), mActivity.getWindow().getDecorView(),
-                            MessageDispatcherProvider.from(mWindowAndroid), mActivityTabProvider,
-                            mProfileSupplier, new MerchantTrustMetrics(), mIntentRequestTracker);
-            mMerchantTrustSignalsCoordinatorSupplier.set(merchantTrustSignalsCoordinator);
-        }
     }
 
     private void initScrollCapture() {
@@ -1069,12 +1057,6 @@ public class RootUiCoordinator
 
             mIdentityDiscController = new IdentityDiscController(
                     mActivity, mActivityLifecycleDispatcher, mProfileSupplier);
-            PriceTrackingButtonController priceTrackingButtonController =
-                    new PriceTrackingButtonController(mActivity, mActivityTabProvider,
-                            mModalDialogManagerSupplier.get(), getBottomSheetController(),
-                            AppCompatResources.getDrawable(
-                                    mActivity, R.drawable.price_tracking_disabled),
-                            mTabBookmarkerSupplier);
             ReaderModeToolbarButtonController readerModeToolbarButtonController =
                     new ReaderModeToolbarButtonController(mActivity, mActivityTabProvider,
                             mModalDialogManagerSupplier.get(),
@@ -1137,8 +1119,6 @@ public class RootUiCoordinator
                     addToBookmarksToolbarButtonController);
             adaptiveToolbarButtonController.addButtonVariant(
                     AdaptiveToolbarButtonVariant.TRANSLATE, translateToolbarButtonController);
-            adaptiveToolbarButtonController.addButtonVariant(
-                    AdaptiveToolbarButtonVariant.PRICE_TRACKING, priceTrackingButtonController);
             adaptiveToolbarButtonController.addButtonVariant(
                     AdaptiveToolbarButtonVariant.READER_MODE, readerModeToolbarButtonController);
             mButtonDataProviders =
diff --git a/chrome/android/java_sources.gni b/chrome/android/java_sources.gni
--- a/chrome/android/java_sources.gni
+++ b/chrome/android/java_sources.gni
@@ -14,9 +14,6 @@ import("//chrome/android/features/tab_ui/tab_management_java_sources.gni")
 import("//chrome/android/feed/feed_java_sources.gni")
 import(
     "//chrome/browser/commerce/merchant_viewer/android/test_java_sources.gni")
-import("//chrome/browser/commerce/price_tracking/android/test_java_sources.gni")
-import(
-    "//chrome/browser/commerce/subscriptions/test/android/test_java_sources.gni")
 import("//chrome/browser/share/android/test_java_sources.gni")
 import("//chrome/browser/tab_group/javatests/tab_groups_test_java_sources.gni")
 import("//chrome/common/features.gni")
@@ -36,15 +33,11 @@ chrome_test_java_sources += start_surface_test_java_sources
 chrome_test_java_sources += tab_groups_test_java_sources
 chrome_junit_test_java_sources += start_surface_junit_java_sources
 chrome_junit_test_java_sources += tab_management_junit_java_sources
-chrome_junit_test_java_sources += price_tracking_junit_test_java_sources
-chrome_test_java_sources += price_tracking_test_java_sources
 chrome_test_java_sources += tab_management_test_java_sources
 chrome_test_java_sources += share_test_java_sources
 chrome_junit_test_java_sources += share_junit_test_java_sources
 chrome_junit_test_java_deps = share_junit_test_java_deps
 chrome_junit_test_java_deps += feed_test_deps
-chrome_junit_test_java_sources += commerce_subscriptions_junit_test_sources
-chrome_junit_test_java_deps += commerce_subscriptions_junit_test_deps
 chrome_test_java_sources += commerce_merchant_viewer_java_test_sources
 
 if (enable_arcore) {
diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -2844,8 +2844,6 @@ static_library("browser") {
       "commerce/android/price_tracking_utils_android.cc",
       "commerce/android/shopping_service_factory_android.cc",
       "commerce/merchant_viewer/web_contents_helper.cc",
-      "commerce/price_tracking/android/price_tracking_notification_bridge.cc",
-      "commerce/price_tracking/android/price_tracking_notification_bridge.h",
       "content_creation/notes/internal/android/note_service_bridge_factory.cc",
       "content_creation/notes/internal/note_service_factory.cc",
       "content_creation/notes/internal/note_service_factory.h",
@@ -3219,8 +3217,6 @@ static_library("browser") {
       "//chrome/browser/banners/android:jni_headers",
       "//chrome/browser/bluetooth/android:jni_headers",
       "//chrome/browser/commerce/android:shopping_service_jni",
-      "//chrome/browser/commerce/merchant_viewer:merchant_signal_db",
-      "//chrome/browser/commerce/merchant_viewer:merchant_viewer_data_manager",
       "//chrome/browser/commerce/merchant_viewer/android:jni_headers",
       "//chrome/browser/consent_auditor/android:jni_headers",
       "//chrome/browser/content_creation/notes/internal/android:jni_headers",
diff --git a/chrome/browser/browsing_data/browsing_data_history_observer_service.cc b/chrome/browser/browsing_data/browsing_data_history_observer_service.cc
--- a/chrome/browser/browsing_data/browsing_data_history_observer_service.cc
+++ b/chrome/browser/browsing_data/browsing_data_history_observer_service.cc
@@ -93,20 +93,6 @@ void DeleteTemplateUrlsForDeletedOrigins(TemplateURLService* keywords_model,
 #if BUILDFLAG(IS_ANDROID)
 void ClearCommerceData(Profile* profile,
                        const history::DeletionInfo& deletion_info) {
-  MerchantViewerDataManager* merchant_viewer_data_manager =
-      MerchantViewerDataManagerFactory::GetForProfile(profile);
-  if (!merchant_viewer_data_manager)
-    return;
-  if (deletion_info.time_range().IsValid()) {
-    merchant_viewer_data_manager->DeleteMerchantViewerDataForTimeRange(
-        deletion_info.time_range().begin(), deletion_info.time_range().end());
-  } else {
-    auto deleted_origins =
-        GetDeletedOrigins(deletion_info.deleted_urls_origin_map());
-
-    merchant_viewer_data_manager->DeleteMerchantViewerDataForOrigins(
-        std::move(deleted_origins));
-  }
 }
 #endif
 
@@ -179,7 +165,6 @@ BrowsingDataHistoryObserverService::Factory::Factory()
 #endif
 
 #if BUILDFLAG(IS_ANDROID)
-  DependsOn(MerchantViewerDataManagerFactory::GetInstance());
   DependsOn(commerce::ShoppingServiceFactory::GetInstance());
 #endif
 }
diff --git a/chrome/browser/commerce/merchant_viewer/android/BUILD.gn b/chrome/browser/commerce/merchant_viewer/android/BUILD.gn
--- a/chrome/browser/commerce/merchant_viewer/android/BUILD.gn
+++ b/chrome/browser/commerce/merchant_viewer/android/BUILD.gn
@@ -7,26 +7,26 @@ import("//build/config/android/rules.gni")
 
 android_library("java") {
   sources = [
-    "java/src/org/chromium/chrome/browser/merchant_viewer/BottomSheetToolbarProperties.java",
-    "java/src/org/chromium/chrome/browser/merchant_viewer/BottomSheetToolbarView.java",
-    "java/src/org/chromium/chrome/browser/merchant_viewer/BottomSheetToolbarViewBinder.java",
-    "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustBottomSheetContent.java",
-    "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustBottomSheetCoordinator.java",
-    "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustBottomSheetMediator.java",
-    "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustMessageContext.java",
-    "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustMessageScheduler.java",
-    "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustMessageViewModel.java",
+    # "java/src/org/chromium/chrome/browser/merchant_viewer/BottomSheetToolbarProperties.java",
+    # "java/src/org/chromium/chrome/browser/merchant_viewer/BottomSheetToolbarView.java",
+    # "java/src/org/chromium/chrome/browser/merchant_viewer/BottomSheetToolbarViewBinder.java",
+    # "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustBottomSheetContent.java",
+    # "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustBottomSheetCoordinator.java",
+    # "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustBottomSheetMediator.java",
+    # "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustMessageContext.java",
+    # "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustMessageScheduler.java",
+    # "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustMessageViewModel.java",
     "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustMetrics.java",
     "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustSignalsCoordinator.java",
-    "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustSignalsDataProvider.java",
-    "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustSignalsEvent.java",
-    "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustSignalsEventStorage.java",
-    "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustSignalsMediator.java",
-    "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustSignalsStorageFactory.java",
-    "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantViewerConfig.java",
+    # "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustSignalsDataProvider.java",
+    # "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustSignalsEvent.java",
+    # "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustSignalsEventStorage.java",
+    # "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustSignalsMediator.java",
+    # "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustSignalsStorageFactory.java",
+    # "java/src/org/chromium/chrome/browser/merchant_viewer/MerchantViewerConfig.java",
     "java/src/org/chromium/chrome/browser/merchant_viewer/PageInfoStoreInfoController.java",
-    "java/src/org/chromium/chrome/browser/merchant_viewer/RatingStarSpan.java",
-    "java/src/org/chromium/chrome/browser/merchant_viewer/WebContentsHelpers.java",
+    # "java/src/org/chromium/chrome/browser/merchant_viewer/RatingStarSpan.java",
+    # "java/src/org/chromium/chrome/browser/merchant_viewer/WebContentsHelpers.java",
   ]
 
   deps = [
diff --git a/chrome/browser/commerce/merchant_viewer/android/java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustSignalsCoordinator.java b/chrome/browser/commerce/merchant_viewer/android/java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustSignalsCoordinator.java
--- a/chrome/browser/commerce/merchant_viewer/android/java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustSignalsCoordinator.java
+++ b/chrome/browser/commerce/merchant_viewer/android/java/src/org/chromium/chrome/browser/merchant_viewer/MerchantTrustSignalsCoordinator.java
@@ -43,9 +43,7 @@ import org.chromium.url.GURL;
 /**
  * Coordinator for managing merchant trust signals experience.
  */
-public class MerchantTrustSignalsCoordinator
-        implements PageInfoStoreInfoController.StoreInfoActionHandler,
-                   MerchantTrustMessageViewModel.MessageActionsHandler {
+public class MerchantTrustSignalsCoordinator {
     /** Interface to control the omnibox store icon and the related IPH. */
     public interface OmniboxIconController {
         /**
@@ -62,308 +60,9 @@ public class MerchantTrustSignalsCoordinator
                 @StringRes int stringId, boolean canShowIph);
     }
 
-    private final MerchantTrustSignalsMediator mMediator;
-    private final MerchantTrustMessageScheduler mMessageScheduler;
-    private final MerchantTrustBottomSheetCoordinator mDetailsTabCoordinator;
-    private final Context mContext;
-    private final MerchantTrustMetrics mMetrics;
-    private final MerchantTrustSignalsDataProvider mDataProvider;
-    private final MerchantTrustSignalsStorageFactory mStorageFactory;
-    private final ObservableSupplier<Profile> mProfileSupplier;
-    private final WindowAndroid mWindowAndroid;
-    private final ObservableSupplier<Tab> mTabSupplier;
-    private OmniboxIconController mOmniboxIconController;
-
-    /** Creates a new instance. */
-    public MerchantTrustSignalsCoordinator(Context context, WindowAndroid windowAndroid,
-            BottomSheetController bottomSheetController, View layoutView,
-            MessageDispatcher messageDispatcher, ObservableSupplier<Tab> tabSupplier,
-            ObservableSupplier<Profile> profileSupplier, MerchantTrustMetrics metrics,
-            IntentRequestTracker intentRequestTracker) {
-        this(context, windowAndroid,
-                new MerchantTrustMessageScheduler(messageDispatcher, metrics, tabSupplier),
-                tabSupplier, new MerchantTrustSignalsDataProvider(), profileSupplier, metrics,
-                new MerchantTrustBottomSheetCoordinator(context, windowAndroid,
-                        bottomSheetController, tabSupplier, layoutView, metrics,
-                        intentRequestTracker, profileSupplier),
-                new MerchantTrustSignalsStorageFactory(profileSupplier));
-    }
-
-    @VisibleForTesting
-    MerchantTrustSignalsCoordinator(Context context, WindowAndroid windowAndroid,
-            MerchantTrustMessageScheduler messageScheduler, ObservableSupplier<Tab> tabSupplier,
-            MerchantTrustSignalsDataProvider dataProvider,
-            ObservableSupplier<Profile> profileSupplier, MerchantTrustMetrics metrics,
-            MerchantTrustBottomSheetCoordinator detailsTabCoordinator,
-            MerchantTrustSignalsStorageFactory storageFactory) {
-        mContext = context;
-        mDataProvider = dataProvider;
-        mMetrics = metrics;
-        mStorageFactory = storageFactory;
-        mProfileSupplier = profileSupplier;
-        mWindowAndroid = windowAndroid;
-        mTabSupplier = tabSupplier;
-
-        mMediator = new MerchantTrustSignalsMediator(
-                tabSupplier, this::onFinishEligibleNavigation, metrics);
-        mMessageScheduler = messageScheduler;
-        mDetailsTabCoordinator = detailsTabCoordinator;
-    }
-
-    /** Cleans up internal state. */
-    public void destroy() {
-        mMediator.destroy();
-        mStorageFactory.destroy();
-    }
-
     /**
      * Set the {@link OmniboxIconController} to manage the store icon in omnibox.
      */
     public void setOmniboxIconController(@Nullable OmniboxIconController omniboxIconController) {
-        mOmniboxIconController = omniboxIconController;
-    }
-
-    @VisibleForTesting
-    void onFinishEligibleNavigation(MerchantTrustMessageContext item) {
-        NavigationHandle navigationHandle = item.getNavigationHandle();
-        if (navigationHandle == null || navigationHandle.getUrl() == null) {
-            return;
-        }
-        boolean shouldExpediteMessage;
-        MerchantTrustMessageContext scheduledMessage =
-                mMessageScheduler.getScheduledMessageContext();
-        if (scheduledMessage != null && scheduledMessage.getHostName() != null
-                && scheduledMessage.getHostName().equals(item.getHostName())
-                && !scheduledMessage.getUrl().equals(item.getUrl())) {
-            // When user enters PageInfo, we fetch data based on url which is less reliable than the
-            // navigation-based one. Thus, to make sure the "Store info" row is visible, we still
-            // need to fetch data based on this navigation before showing the message, rather than
-            // using the scheduled message directly.
-            mMessageScheduler.clear(MessageClearReason.NAVIGATE_TO_SAME_DOMAIN);
-            shouldExpediteMessage = true;
-        } else {
-            mMessageScheduler.clear(MessageClearReason.NAVIGATE_TO_DIFFERENT_DOMAIN);
-            shouldExpediteMessage = false;
-        }
-        mDataProvider.getDataForUrl(mProfileSupplier.get(), navigationHandle.getUrl(),
-                (merchantInfo) -> maybeDisplayMessage(merchantInfo, item, shouldExpediteMessage));
-    }
-
-    @VisibleForTesting
-    void maybeDisplayMessage(MerchantInfo merchantInfo, MerchantTrustMessageContext item,
-            boolean shouldExpediteMessage) {
-        if (merchantInfo == null) return;
-        mMetrics.recordUkmOnDataAvailable(item.getWebContents());
-        NavigationHandle navigationHandle = item.getNavigationHandle();
-        MerchantTrustSignalsEventStorage storage = mStorageFactory.getForLastUsedProfile();
-        if (navigationHandle == null || navigationHandle.getUrl() == null || storage == null
-                || MerchantViewerConfig.isTrustSignalsMessageDisabled()
-                || merchantInfo.proactiveMessageDisabled
-                || isMerchantRatingBelowThreshold(merchantInfo)
-                || isNonPersonalizedFamiliarMerchant(merchantInfo)
-                || isFamiliarMerchant(navigationHandle.getUrl().getSpec())
-                || hasReachedMaxAllowedMessageNumberInGivenTime()
-                || !isOnSecureWebsite(item.getWebContents())) {
-            return;
-        }
-
-        storage.load(navigationHandle.getUrl().getHost(), (event) -> {
-            if (event == null) {
-                scheduleMessage(merchantInfo, item, shouldExpediteMessage);
-            } else if (System.currentTimeMillis() - event.getTimestamp()
-                    > MerchantViewerConfig.getTrustSignalsMessageWindowDurationMilliSeconds()) {
-                storage.delete(event);
-                scheduleMessage(merchantInfo, item, shouldExpediteMessage);
-            }
-        });
-    }
-
-    private void scheduleMessage(MerchantInfo merchantInfo, MerchantTrustMessageContext item,
-            boolean shouldExpediteMessage) {
-        assert (merchantInfo != null) && (item != null);
-        mMessageScheduler.schedule(
-                MerchantTrustMessageViewModel.create(mContext, merchantInfo, item.getUrl(), this),
-                merchantInfo.starRating, item,
-                shouldExpediteMessage ? MerchantTrustMessageScheduler.MESSAGE_ENQUEUE_NO_DELAY
-                                      : MerchantViewerConfig.getDefaultTrustSignalsMessageDelay(),
-                this::onMessageEnqueued);
-    }
-
-    private boolean isFamiliarMerchant(String url) {
-        if (!MerchantViewerConfig.doesTrustSignalsUseSiteEngagement() || TextUtils.isEmpty(url)) {
-            return false;
-        }
-        Profile profile = mProfileSupplier.get();
-        if (profile == null || profile.isOffTheRecord()) {
-            return false;
-        }
-        return getSiteEngagementScore(profile, url)
-                > MerchantViewerConfig.getTrustSignalsSiteEngagementThreshold();
-    }
-
-    @VisibleForTesting
-    double getSiteEngagementScore(Profile profile, String url) {
-        return SiteEngagementService.getForBrowserContext(profile).getScore(url);
-    }
-
-    @VisibleForTesting
-    boolean isOnSecureWebsite(WebContents webContents) {
-        return SecurityStateModel.getSecurityLevelForWebContents(webContents)
-                == ConnectionSecurityLevel.SECURE;
-    }
-
-    private boolean isMerchantRatingBelowThreshold(MerchantInfo merchantInfo) {
-        return merchantInfo.starRating
-                < MerchantViewerConfig.getTrustSignalsMessageRatingThreshold();
-    }
-
-    private boolean isNonPersonalizedFamiliarMerchant(MerchantInfo merchantInfo) {
-        return merchantInfo.nonPersonalizedFamiliarityScore
-                > MerchantViewerConfig.getTrustSignalsNonPersonalizedFamiliarityScoreThreshold();
-    }
-
-    @VisibleForTesting
-    void onMessageEnqueued(MerchantTrustMessageContext messageContext) {
-        if (messageContext == null) {
-            return;
-        }
-
-        MerchantTrustSignalsEventStorage storage = mStorageFactory.getForLastUsedProfile();
-        if (storage == null) {
-            return;
-        }
-
-        mMetrics.recordUkmOnMessageSeen(messageContext.getWebContents());
-        updateShownMessagesTimestamp();
-        storage.save(new MerchantTrustSignalsEvent(
-                messageContext.getHostName(), System.currentTimeMillis()));
-    }
-
-    // MerchantTrustMessageViewModel.MessageActionsHandler implementations.
-    @Override
-    public void onMessageDismissed(@DismissReason int dismissReason, String messageAssociatedUrl) {
-        mMetrics.recordMetricsForMessageDismissed(dismissReason);
-        if (dismissReason == DismissReason.TIMER || dismissReason == DismissReason.GESTURE) {
-            maybeShowStoreIcon(messageAssociatedUrl, dismissReason == DismissReason.TIMER);
-        }
-    }
-
-    @Override
-    public void onMessagePrimaryAction(MerchantInfo merchantInfo, String messageAssociatedUrl) {
-        mMetrics.recordMetricsForMessageTapped();
-
-        // TODO(crbug.com/1300971): Pass webContents directly to this method instead of using
-        // mTabSupplier.
-        if (mTabSupplier.hasValue()) {
-            mMetrics.recordUkmOnMessageClicked(mTabSupplier.get().getWebContents());
-        }
-        launchDetailsPage(merchantInfo.detailsPageUrl, BottomSheetOpenedSource.FROM_MESSAGE,
-                messageAssociatedUrl);
-    }
-
-    // PageInfoStoreInfoController.StoreInfoActionHandler implementation.
-    @Override
-    public void onStoreInfoClicked(MerchantInfo merchantInfo) {
-        launchDetailsPage(
-                merchantInfo.detailsPageUrl, BottomSheetOpenedSource.FROM_PAGE_INFO, null);
-        // If user has clicked the "Store info" row, send a signal to disable {@link
-        // FeatureConstants.PAGE_INFO_STORE_INFO_FEATURE}.
-        final Tracker tracker = TrackerFactory.getTrackerForProfile(mProfileSupplier.get());
-        tracker.notifyEvent(EventConstants.PAGE_INFO_STORE_INFO_ROW_CLICKED);
-    }
-
-    private void launchDetailsPage(GURL detailsPageUrl, @BottomSheetOpenedSource int openSource,
-            @Nullable String messageAssociatedUrl) {
-        mMetrics.recordMetricsForBottomSheetOpenedSource(openSource);
-        mDetailsTabCoordinator.requestOpenSheet(detailsPageUrl,
-                mContext.getResources().getString(R.string.merchant_viewer_preview_sheet_title),
-                () -> onBottomSheetDismissed(openSource, messageAssociatedUrl));
-    }
-
-    private void onBottomSheetDismissed(
-            @BottomSheetOpenedSource int openSource, @Nullable String messageAssociatedUrl) {
-        if (openSource == BottomSheetOpenedSource.FROM_MESSAGE) {
-            maybeShowStoreIcon(messageAssociatedUrl, true);
-        }
-    }
-
-    /**
-     * Assuming that we only allow 3 messages in 1 hour, we store the serialized timestamps of the
-     * last 3 shown messages. Before showing a message, we look up the persisted data and
-     * deserialize it to 3 timestamps, then check whether the earliest timestamp is more than 1 hour
-     * from now. If yes, the message can be shown thus returning false.
-     */
-    @VisibleForTesting
-    boolean hasReachedMaxAllowedMessageNumberInGivenTime() {
-        PrefService prefService = getPrefService();
-        if (prefService == null) return true;
-        String serializedTimestamps =
-                prefService.getString(Pref.COMMERCE_MERCHANT_VIEWER_MESSAGES_SHOWN_TIME);
-        if (TextUtils.isEmpty(serializedTimestamps)) return false;
-        String[] timestamps = serializedTimestamps.split("_");
-        int maxAllowedNumber = MerchantViewerConfig.getTrustSignalsMaxAllowedNumberInGivenWindow();
-        if (timestamps.length < maxAllowedNumber) return false;
-        assert timestamps.length == maxAllowedNumber;
-        return System.currentTimeMillis() - Long.parseLong(timestamps[0])
-                < MerchantViewerConfig.getTrustSignalsNumberCheckWindowDuration();
-    }
-
-    /**
-     * Every time showing a message, we need to update the serialized timestamps.
-     */
-    @VisibleForTesting
-    void updateShownMessagesTimestamp() {
-        PrefService prefService = getPrefService();
-        if (prefService == null) return;
-        String currentTimestamp = Long.toString(System.currentTimeMillis());
-        String serializedTimestamps =
-                prefService.getString(Pref.COMMERCE_MERCHANT_VIEWER_MESSAGES_SHOWN_TIME);
-        if (TextUtils.isEmpty(serializedTimestamps)) {
-            prefService.setString(
-                    Pref.COMMERCE_MERCHANT_VIEWER_MESSAGES_SHOWN_TIME, currentTimestamp);
-        } else {
-            serializedTimestamps += "_" + currentTimestamp;
-            String[] timestamps = serializedTimestamps.split("_");
-            int maxAllowedNumber =
-                    MerchantViewerConfig.getTrustSignalsMaxAllowedNumberInGivenWindow();
-            if (timestamps.length <= maxAllowedNumber) {
-                prefService.setString(
-                        Pref.COMMERCE_MERCHANT_VIEWER_MESSAGES_SHOWN_TIME, serializedTimestamps);
-            } else {
-                assert timestamps.length == maxAllowedNumber + 1;
-                // Remove the earliest timestamp.
-                prefService.setString(Pref.COMMERCE_MERCHANT_VIEWER_MESSAGES_SHOWN_TIME,
-                        serializedTimestamps.substring(timestamps[0].length() + 1));
-            }
-        }
-    }
-
-    @VisibleForTesting
-    PrefService getPrefService() {
-        Profile profile = mProfileSupplier.get();
-        if (profile == null || profile.isOffTheRecord()) {
-            return null;
-        }
-        return UserPrefs.get(profile);
-    }
-
-    @VisibleForTesting
-    void maybeShowStoreIcon(@Nullable String messageAssociatedUrl, boolean canShowIph) {
-        if (isStoreInfoFeatureEnabled() && mOmniboxIconController != null
-                && messageAssociatedUrl != null) {
-            mOmniboxIconController.showStoreIcon(mWindowAndroid, messageAssociatedUrl,
-                    getStoreIconDrawable(), R.string.merchant_viewer_omnibox_icon_iph, canShowIph);
-        }
-    }
-
-    @VisibleForTesting
-    boolean isStoreInfoFeatureEnabled() {
-        return PageInfoFeatures.PAGE_INFO_STORE_INFO.isEnabled();
-    }
-
-    @VisibleForTesting
-    Drawable getStoreIconDrawable() {
-        return ResourcesCompat.getDrawable(
-                mContext.getResources(), R.drawable.ic_storefront_blue, mContext.getTheme());
     }
 }
diff --git a/chrome/browser/commerce/merchant_viewer/android/java/src/org/chromium/chrome/browser/merchant_viewer/PageInfoStoreInfoController.java b/chrome/browser/commerce/merchant_viewer/android/java/src/org/chromium/chrome/browser/merchant_viewer/PageInfoStoreInfoController.java
--- a/chrome/browser/commerce/merchant_viewer/android/java/src/org/chromium/chrome/browser/merchant_viewer/PageInfoStoreInfoController.java
+++ b/chrome/browser/commerce/merchant_viewer/android/java/src/org/chromium/chrome/browser/merchant_viewer/PageInfoStoreInfoController.java
@@ -12,7 +12,6 @@ import androidx.annotation.Nullable;
 
 import org.chromium.base.supplier.Supplier;
 import org.chromium.chrome.browser.commerce.ShoppingServiceFactory;
-import org.chromium.chrome.browser.merchant_viewer.MerchantTrustMessageViewModel.MessageDescriptionUI;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.tab_ui.R;
 import org.chromium.components.commerce.core.ShoppingService.MerchantInfo;
@@ -61,8 +60,6 @@ public class PageInfoStoreInfoController implements PageInfoSubpageController {
         // the feature flag first.
         if (profile != null
                 && ShoppingServiceFactory.getForProfile(profile).isMerchantViewerEnabled()) {
-            new MerchantTrustSignalsDataProvider().getDataForUrl(
-                    profile, mMainController.getURL(), this::setupStoreInfoRow);
         } else {
             setupStoreInfoRow(null);
         }
@@ -103,9 +100,6 @@ public class PageInfoStoreInfoController implements PageInfoSubpageController {
 
     private CharSequence getRowSubtitle(MerchantInfo merchantInfo) {
         if (merchantInfo.starRating > 0) {
-            CharSequence subTitle = MerchantTrustMessageViewModel.getMessageDescription(
-                    mContext, merchantInfo, MessageDescriptionUI.RATING_AND_REVIEWS);
-            if (subTitle != null) return subTitle;
         } else if (merchantInfo.hasReturnPolicy) {
             return mContext.getResources().getString(
                     R.string.page_info_store_info_description_with_no_rating);
diff --git a/chrome/browser/commerce/price_tracking/android/java/src/org/chromium/chrome/browser/price_tracking/PriceTrackingFeatures.java b/chrome/browser/commerce/price_tracking/android/java/src/org/chromium/chrome/browser/price_tracking/PriceTrackingFeatures.java
--- a/chrome/browser/commerce/price_tracking/android/java/src/org/chromium/chrome/browser/price_tracking/PriceTrackingFeatures.java
+++ b/chrome/browser/commerce/price_tracking/android/java/src/org/chromium/chrome/browser/price_tracking/PriceTrackingFeatures.java
@@ -77,7 +77,7 @@ public class PriceTrackingFeatures {
      * @return Whether the price drop notification is eligible to work.
      */
     public static boolean isPriceDropNotificationEligible() {
-        return isPriceTrackingEligible() && getPriceTrackingNotificationsEnabled();
+        return false;
     }
 
     private static boolean isSignedIn() {
diff --git a/chrome/browser/commerce/subscriptions/android/BUILD.gn b/chrome/browser/commerce/subscriptions/android/BUILD.gn
--- a/chrome/browser/commerce/subscriptions/android/BUILD.gn
+++ b/chrome/browser/commerce/subscriptions/android/BUILD.gn
@@ -16,7 +16,6 @@ android_library("subscriptions_java") {
     "//base:jni_java",
     "//build/android:build_java",
     "//chrome/browser/android/lifecycle:java",
-    "//chrome/browser/commerce/price_tracking/android:java",
     "//chrome/browser/endpoint_fetcher:java",
     "//chrome/browser/flags:java",
     "//chrome/browser/preferences:java",
diff --git a/chrome/browser/commerce/subscriptions/android/java/src/org/chromium/chrome/browser/subscriptions/CommerceSubscriptionsService.java b/chrome/browser/commerce/subscriptions/android/java/src/org/chromium/chrome/browser/subscriptions/CommerceSubscriptionsService.java
--- a/chrome/browser/commerce/subscriptions/android/java/src/org/chromium/chrome/browser/subscriptions/CommerceSubscriptionsService.java
+++ b/chrome/browser/commerce/subscriptions/android/java/src/org/chromium/chrome/browser/subscriptions/CommerceSubscriptionsService.java
@@ -11,8 +11,6 @@ import org.chromium.chrome.browser.lifecycle.ActivityLifecycleDispatcher;
 import org.chromium.chrome.browser.lifecycle.PauseResumeWithNativeObserver;
 import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
-import org.chromium.chrome.browser.price_tracking.PriceDropNotificationManager;
-import org.chromium.chrome.browser.price_tracking.PriceTrackingFeatures;
 import org.chromium.chrome.browser.tabmodel.TabModelSelector;
 import org.chromium.components.commerce.core.ShoppingService;
 
@@ -32,18 +30,14 @@ public class CommerceSubscriptionsService implements Destroyable {
             ChromePreferenceKeys.COMMERCE_SUBSCRIPTIONS_CHROME_MANAGED_TIMESTAMP;
 
     private final SharedPreferencesManager mSharedPreferencesManager;
-    private final PriceDropNotificationManager mPriceDropNotificationManager;
-    private ImplicitPriceDropSubscriptionsManager mImplicitPriceDropSubscriptionsManager;
     private ActivityLifecycleDispatcher mActivityLifecycleDispatcher;
     private PauseResumeWithNativeObserver mPauseResumeWithNativeObserver;
     private ShoppingService mShoppingService;
 
     /** Creates a new instance. */
-    CommerceSubscriptionsService(ShoppingService shoppingService,
-            PriceDropNotificationManager priceDropNotificationManager) {
+    CommerceSubscriptionsService(ShoppingService shoppingService) {
         mShoppingService = shoppingService;
         mSharedPreferencesManager = SharedPreferencesManager.getInstance();
-        mPriceDropNotificationManager = priceDropNotificationManager;
     }
 
     /** Performs any deferred startup tasks required by {@link Subscriptions}. */
@@ -60,12 +54,6 @@ public class CommerceSubscriptionsService implements Destroyable {
             public void onPauseWithNative() {}
         };
         mActivityLifecycleDispatcher.register(mPauseResumeWithNativeObserver);
-
-        if (CommerceSubscriptionsServiceConfig.isImplicitSubscriptionsEnabled()
-                && mImplicitPriceDropSubscriptionsManager == null) {
-            mImplicitPriceDropSubscriptionsManager =
-                    new ImplicitPriceDropSubscriptionsManager(tabModelSelector, mShoppingService);
-        }
     }
 
     /**
@@ -76,10 +64,6 @@ public class CommerceSubscriptionsService implements Destroyable {
         if (mActivityLifecycleDispatcher != null) {
             mActivityLifecycleDispatcher.unregister(mPauseResumeWithNativeObserver);
         }
-        if (mImplicitPriceDropSubscriptionsManager != null) {
-            mImplicitPriceDropSubscriptionsManager.destroy();
-            mImplicitPriceDropSubscriptionsManager = null;
-        }
     }
 
     private void maybeRecordMetricsAndInitializeSubscriptions() {
@@ -92,21 +76,5 @@ public class CommerceSubscriptionsService implements Destroyable {
         }
         mSharedPreferencesManager.writeLong(
                 CHROME_MANAGED_SUBSCRIPTIONS_TIMESTAMP, System.currentTimeMillis());
-        if (!PriceTrackingFeatures.isPriceDropNotificationEligible()) return;
-        recordMetricsForEligibleAccount();
-        if (mImplicitPriceDropSubscriptionsManager != null) {
-            mImplicitPriceDropSubscriptionsManager.initializeSubscriptions();
-        }
-    }
-
-    private void recordMetricsForEligibleAccount() {
-        // Record notification opt-in metrics.
-        mPriceDropNotificationManager.canPostNotificationWithMetricsRecorded();
-        mPriceDropNotificationManager.recordMetricsForNotificationCounts();
-    }
-
-    @VisibleForTesting
-    void setImplicitSubscriptionsManagerForTesting(ImplicitPriceDropSubscriptionsManager manager) {
-        mImplicitPriceDropSubscriptionsManager = manager;
     }
 }
diff --git a/chrome/browser/optimization_guide/optimization_guide_keyed_service.cc b/chrome/browser/optimization_guide/optimization_guide_keyed_service.cc
--- a/chrome/browser/optimization_guide/optimization_guide_keyed_service.cc
+++ b/chrome/browser/optimization_guide/optimization_guide_keyed_service.cc
@@ -114,10 +114,6 @@ OptimizationGuideKeyedService::MaybeCreatePushNotificationManager(
   if (optimization_guide::features::IsPushNotificationsEnabled()) {
     auto push_notification_manager =
         std::make_unique<optimization_guide::PushNotificationManager>();
-#if BUILDFLAG(IS_ANDROID)
-    push_notification_manager->AddObserver(
-        PriceTrackingNotificationBridge::GetForBrowserContext(profile));
-#endif
     return push_notification_manager;
   }
   return nullptr;
diff --git a/chrome/browser/persisted_state_db/BUILD.gn b/chrome/browser/persisted_state_db/BUILD.gn
--- a/chrome/browser/persisted_state_db/BUILD.gn
+++ b/chrome/browser/persisted_state_db/BUILD.gn
@@ -21,7 +21,6 @@ source_set("persisted_state_db") {
   deps = [
     "//base:base",
     "//chrome/browser/profiles:profile",
-    "//components/commerce/core:commerce_subscription_db_content_proto",
     "//components/commerce/core:persisted_state_db_content_proto",
     "//components/keyed_service/content",
     "//components/leveldb_proto",
diff --git a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
--- a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
+++ b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
@@ -557,9 +557,6 @@ void ChromeBrowserMainExtraPartsProfiles::
 #if !BUILDFLAG(IS_ANDROID)
   CartServiceFactory::GetInstance();
 #endif
-#if BUILDFLAG(IS_ANDROID)
-  MerchantViewerDataManagerFactory::GetInstance();
-#endif
 #if BUILDFLAG(IS_CHROMEOS_LACROS)
   CertDbInitializerFactory::GetInstance();
 #endif
diff --git a/chrome/browser/tab/BUILD.gn b/chrome/browser/tab/BUILD.gn
--- a/chrome/browser/tab/BUILD.gn
+++ b/chrome/browser/tab/BUILD.gn
@@ -75,7 +75,6 @@ android_library("java") {
     "//base:jni_java",
     "//build/android:build_java",
     "//chrome/browser/android/crypto:java",
-    "//chrome/browser/commerce/android:java",
     "//chrome/browser/contextmenu:java",
     "//chrome/browser/endpoint_fetcher:java",
     "//chrome/browser/flags:java",
diff --git a/chrome/browser/tab/java/src/org/chromium/chrome/browser/tab/state/CouponPersistedTabData.java b/chrome/browser/tab/java/src/org/chromium/chrome/browser/tab/state/CouponPersistedTabData.java
--- a/chrome/browser/tab/java/src/org/chromium/chrome/browser/tab/state/CouponPersistedTabData.java
+++ b/chrome/browser/tab/java/src/org/chromium/chrome/browser/tab/state/CouponPersistedTabData.java
@@ -18,7 +18,6 @@ import org.chromium.base.Log;
 import org.chromium.base.supplier.ObservableSupplierImpl;
 import org.chromium.base.task.PostTask;
 import org.chromium.base.task.TaskTraits;
-import org.chromium.chrome.browser.commerce.PriceUtils;
 import org.chromium.chrome.browser.endpoint_fetcher.EndpointFetcher;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.tab.EmptyTabObserver;
@@ -212,8 +211,7 @@ public class CouponPersistedTabData extends PersistedTabData {
                         new CurrencyFormatter(mCoupon.currencyCode, Locale.getDefault());
                 long unitsInMicros = mCoupon.discountUnits * MICROS_TO_UNITS;
 
-                String annotationText =
-                        PriceUtils.formatPrice(mCurrencyFormatter, unitsInMicros) + OFF_STRING;
+                String annotationText = "";
                 mCurrencyFormatter.destroy();
 
                 return annotationText;
diff --git a/chrome/browser/tab/java/src/org/chromium/chrome/browser/tab/state/ShoppingPersistedTabData.java b/chrome/browser/tab/java/src/org/chromium/chrome/browser/tab/state/ShoppingPersistedTabData.java
--- a/chrome/browser/tab/java/src/org/chromium/chrome/browser/tab/state/ShoppingPersistedTabData.java
+++ b/chrome/browser/tab/java/src/org/chromium/chrome/browser/tab/state/ShoppingPersistedTabData.java
@@ -19,7 +19,6 @@ import org.chromium.base.supplier.ObservableSupplierImpl;
 import org.chromium.base.task.PostTask;
 import org.chromium.base.task.TaskTraits;
 import org.chromium.build.annotations.DoNotClassMerge;
-import org.chromium.chrome.browser.commerce.PriceUtils;
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.optimization_guide.OptimizationGuideBridgeFactory;
 import org.chromium.chrome.browser.page_annotations.BuyableProductPageAnnotation;
@@ -952,7 +951,7 @@ public class ShoppingPersistedTabData extends PersistedTabData {
             return "";
         }
         CurrencyFormatter currencyFormatter = getCurrencyFormatter(mPriceDropData.currencyCode);
-        return PriceUtils.formatPrice(currencyFormatter, priceMicros);
+        return "";
     }
 
     private CurrencyFormatter getCurrencyFormatter(String currencyCode) {
diff --git a/chrome/browser/ui/android/omnibox/BUILD.gn b/chrome/browser/ui/android/omnibox/BUILD.gn
--- a/chrome/browser/ui/android/omnibox/BUILD.gn
+++ b/chrome/browser/ui/android/omnibox/BUILD.gn
@@ -447,7 +447,6 @@ robolectric_library("junit") {
     "//base:base_junit_test_support",
     "//build/android:build_java",
     "//chrome/android:base_module_java",
-    "//chrome/browser/commerce/merchant_viewer/android:java",
     "//chrome/browser/device:java",
     "//chrome/browser/flags:java",
     "//chrome/browser/gsa:java",
diff --git a/components/bookmarks/common/android/java/src/org/chromium/components/bookmarks/BookmarkId.java b/components/bookmarks/common/android/java/src/org/chromium/components/bookmarks/BookmarkId.java
--- a/components/bookmarks/common/android/java/src/org/chromium/components/bookmarks/BookmarkId.java
+++ b/components/bookmarks/common/android/java/src/org/chromium/components/bookmarks/BookmarkId.java
@@ -15,9 +15,6 @@ import org.chromium.base.annotations.CalledByNative;
 public class BookmarkId {
     public static final int INVALID_FOLDER_ID = -2;
     public static final int INVALID_ID = -1;
-    public static final int SHOPPING_FILTER_ID = -3;
-    public static final BookmarkId SHOPPING_FOLDER =
-            new BookmarkId(SHOPPING_FILTER_ID, BookmarkType.NORMAL);
 
     private static final String LOG_TAG = "BookmarkId";
     private static final char TYPE_PARTNER = 'p';
diff --git a/components/commerce/core/commerce_feature_list.cc b/components/commerce/core/commerce_feature_list.cc
--- a/components/commerce/core/commerce_feature_list.cc
+++ b/components/commerce/core/commerce_feature_list.cc
@@ -110,62 +110,50 @@ const char kEnableChromeCart[] = "enable-chrome-cart";
 }  // namespace switches
 
 BASE_FEATURE(kCommerceAllowLocalImages,
-             "CommerceAllowLocalImages",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "CommerceAllowLocalImages",            // guard this
+             base::FEATURE_DISABLED_BY_DEFAULT);    // guard this
 
 BASE_FEATURE(kCommerceAllowOnDemandBookmarkUpdates,
-             "CommerceAllowOnDemandBookmarkUpdates",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "CommerceAllowOnDemandBookmarkUpdates",// guard this
+             base::FEATURE_DISABLED_BY_DEFAULT);    // guard this
 
 BASE_FEATURE(kCommerceAllowServerImages,
-             "CommerceAllowServerImages",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "CommerceAllowServerImages",           // guard this
+             base::FEATURE_DISABLED_BY_DEFAULT);    // guard this
 
 BASE_FEATURE(kCommerceCoupons,
-             "CommerceCoupons",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "CommerceCoupons",                     // guard this
+             base::FEATURE_DISABLED_BY_DEFAULT);    // guard this
 
 BASE_FEATURE(kCommerceMerchantViewer,
-             "CommerceMerchantViewer",
-             base::FEATURE_DISABLED_BY_DEFAULT);
-#if BUILDFLAG(IS_ANDROID)
-BASE_FEATURE(kCommerceMerchantViewerRegionLaunched,
-             "CommerceMerchantViewerRegionLaunched",
-             base::FEATURE_ENABLED_BY_DEFAULT);
-#else
+             "CommerceMerchantViewer",              // guard this
+             base::FEATURE_DISABLED_BY_DEFAULT);    // guard this
+
 BASE_FEATURE(kCommerceMerchantViewerRegionLaunched,
              "CommerceMerchantViewerRegionLaunched",
              base::FEATURE_DISABLED_BY_DEFAULT);
-#endif  // BUILDFLAG(IS_ANDROID)
 
 BASE_FEATURE(kCommercePriceTracking,
-             "CommercePriceTracking",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "CommercePriceTracking",               // guard this
+             base::FEATURE_DISABLED_BY_DEFAULT);    // guard this
 
 const base::FeatureParam<bool> kDeleteAllMerchantsOnClearBrowsingHistory{
     &kCommerceMerchantViewer, "delete_all_merchants_on_clear_history", false};
 
-BASE_FEATURE(kShoppingList, "ShoppingList", base::FEATURE_DISABLED_BY_DEFAULT);
-#if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC) || \
-    BUILDFLAG(IS_LINUX)
-BASE_FEATURE(kShoppingListRegionLaunched,
-             "ShoppingListRegionLaunched",
-             base::FEATURE_ENABLED_BY_DEFAULT);
-#else
+BASE_FEATURE(kShoppingList, "ShoppingList", base::FEATURE_DISABLED_BY_DEFAULT); // guard this
 BASE_FEATURE(kShoppingListRegionLaunched,
-             "ShoppingListRegionLaunched",
-             base::FEATURE_DISABLED_BY_DEFAULT);
-#endif
+             "ShoppingListRegionLaunched",           // guard this
+             base::FEATURE_DISABLED_BY_DEFAULT);     // guard this
 
 BASE_FEATURE(kShoppingPDPMetrics,
              "ShoppingPDPMetrics",
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kShoppingPDPMetricsRegionLaunched,
-             "ShoppingPDPMetricsRegionLaunched",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "ShoppingPDPMetricsRegionLaunched",    // guard this
+             base::FEATURE_DISABLED_BY_DEFAULT);    // guard this
 
-BASE_FEATURE(kRetailCoupons, "RetailCoupons", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kRetailCoupons, "RetailCoupons", base::FEATURE_DISABLED_BY_DEFAULT); // guard this
 
 BASE_FEATURE(kCommerceDeveloper,
              "CommerceDeveloper",
@@ -176,21 +164,21 @@ const char kRetailCouponsWithCodeParam[] = "RetailCouponsWithCodeParam";
 // Params use for Discount Consent v2.
 BASE_FEATURE(kDiscountConsentV2,
              "DiscountConsentV2",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             base::FEATURE_DISABLED_BY_DEFAULT);    // guard this
 
 BASE_FEATURE(kCommerceHintAndroid,
-             "CommerceHintAndroid",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "CommerceHintAndroid",                 // guard this
+             base::FEATURE_DISABLED_BY_DEFAULT);    // guard this
 
 BASE_FEATURE(kMerchantWidePromotion,
-             "MerchantWidePromotion",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "MerchantWidePromotion",               // guard this
+             base::FEATURE_ENABLED_BY_DEFAULT);    // guard this
 
 BASE_FEATURE(kCodeBasedRBD, "CodeBasedRBD", base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kChromeCartDomBasedHeuristics,
-             "ChromeCartDomBasedHeuristics",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "ChromeCartDomBasedHeuristics",        // guard this
+             base::FEATURE_DISABLED_BY_DEFAULT);    // guard this
 
 // Params for Discount Consent V2 in the NTP Cart module.
 const char kNtpChromeCartModuleDiscountConsentNtpVariationParam[] =
@@ -383,6 +371,7 @@ std::string GetCurrentCountryCode(variations::VariationsService* variations) {
 bool IsEnabledForCountryAndLocale(const base::Feature& feature,
                                   std::string country,
                                   std::string locale) {
+  if ((true)) return false;
   const CountryLocaleMap& allowedCountryLocales =
       GetAllowedCountryToLocaleMap();
 
--
2.25.1
