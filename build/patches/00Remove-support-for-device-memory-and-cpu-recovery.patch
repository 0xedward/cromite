From: uazo <uazo@users.noreply.github.com>
Date: Tue, 27 Jun 2023 11:11:53 +0000
Subject: Remove support for device memory and cpu recovery

---
 .../device_memory/approximated_device_memory.cc    |  7 ++++++-
 third_party/blink/common/features.cc               |  4 ++--
 .../core/frame/navigator_concurrent_hardware.cc    |  8 ++++++--
 .../blink/renderer/core/timing/memory_info.cc      | 14 +++++++++++---
 .../renderer/core/timing/window_performance.cc     |  2 +-
 5 files changed, 26 insertions(+), 9 deletions(-)

diff --git a/third_party/blink/common/device_memory/approximated_device_memory.cc b/third_party/blink/common/device_memory/approximated_device_memory.cc
--- a/third_party/blink/common/device_memory/approximated_device_memory.cc
+++ b/third_party/blink/common/device_memory/approximated_device_memory.cc
@@ -4,13 +4,18 @@
 
 #include "third_party/blink/public/common/device_memory/approximated_device_memory.h"
 
+#include "build/build_config.h"
 #include "base/check_op.h"
 #include "base/system/sys_info.h"
 
 namespace blink {
 
 // static
-float ApproximatedDeviceMemory::approximated_device_memory_gb_ = 0.0;
+#if BUILDFLAG(IS_ANDROID)
+float ApproximatedDeviceMemory::approximated_device_memory_gb_ = 4.0;
+#else
+float ApproximatedDeviceMemory::approximated_device_memory_gb_ = 8.0;
+#endif
 int64_t ApproximatedDeviceMemory::physical_memory_mb_ = 0;
 
 // static
diff --git a/third_party/blink/common/features.cc b/third_party/blink/common/features.cc
--- a/third_party/blink/common/features.cc
+++ b/third_party/blink/common/features.cc
@@ -400,8 +400,8 @@ BASE_FEATURE(kV8OptimizeWorkersForPerformance,
 // Controls whether the implementation of the performance.measureMemory
 // web API uses PerformanceManager or not.
 BASE_FEATURE(kWebMeasureMemoryViaPerformanceManager,
-             "WebMeasureMemoryViaPerformanceManager",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "WebMeasureMemoryViaPerformanceManager",  // need to be
+             base::FEATURE_DISABLED_BY_DEFAULT);       // disabled by default
 
 // Enables negotiation of experimental multiplex codec in SDP.
 BASE_FEATURE(kWebRtcMultiplexCodec,
diff --git a/third_party/blink/renderer/core/frame/navigator_concurrent_hardware.cc b/third_party/blink/renderer/core/frame/navigator_concurrent_hardware.cc
--- a/third_party/blink/renderer/core/frame/navigator_concurrent_hardware.cc
+++ b/third_party/blink/renderer/core/frame/navigator_concurrent_hardware.cc
@@ -3,13 +3,17 @@
 // found in the LICENSE file.
 
 #include "third_party/blink/renderer/core/frame/navigator_concurrent_hardware.h"
-
+#include "build/build_config.h"
 #include "base/system/sys_info.h"
 
 namespace blink {
 
 unsigned NavigatorConcurrentHardware::hardwareConcurrency() const {
-  return static_cast<unsigned>(base::SysInfo::NumberOfProcessors());
+#if BUILDFLAG(IS_ANDROID)
+  return static_cast<unsigned>(2);
+#else
+  return static_cast<unsigned>(8);
+#endif
 }
 
 }  // namespace blink
diff --git a/third_party/blink/renderer/core/timing/memory_info.cc b/third_party/blink/renderer/core/timing/memory_info.cc
--- a/third_party/blink/renderer/core/timing/memory_info.cc
+++ b/third_party/blink/renderer/core/timing/memory_info.cc
@@ -34,6 +34,8 @@
 
 #include "base/time/default_tick_clock.h"
 #include "base/time/time.h"
+#include "base/rand_util.h"
+#include "build/build_config.h"
 #include "third_party/blink/renderer/core/frame/settings.h"
 #include "third_party/blink/renderer/platform/runtime_enabled_features.h"
 #include "third_party/blink/renderer/platform/wtf/math_extras.h"
@@ -43,15 +45,21 @@ namespace blink {
 
 static constexpr base::TimeDelta kTwentyMinutes = base::Minutes(20);
 static constexpr base::TimeDelta kFiftyMs = base::Milliseconds(50);
+#if BUILDFLAG(IS_ANDROID)
+static constexpr size_t heap_size_limit = 528744448;
+#else
+static constexpr size_t heap_size_limit = 4294705152;
+#endif
 
 static void GetHeapSize(HeapInfo& info) {
   v8::HeapStatistics heap_statistics;
   v8::Isolate::GetCurrent()->GetHeapStatistics(&heap_statistics);
+  const double scale_factor = 1.0 + base::RandInt(-300, 300) / 10000.0;
   info.used_js_heap_size =
-      heap_statistics.used_heap_size() + heap_statistics.external_memory();
+      (heap_statistics.used_heap_size() + heap_statistics.external_memory()) * scale_factor;
   info.total_js_heap_size =
-      heap_statistics.total_physical_size() + heap_statistics.external_memory();
-  info.js_heap_size_limit = heap_statistics.heap_size_limit();
+      (heap_statistics.total_physical_size() + heap_statistics.external_memory()) * scale_factor;
+  info.js_heap_size_limit = heap_size_limit;
 }
 
 class HeapSizeCache {
diff --git a/third_party/blink/renderer/core/timing/window_performance.cc b/third_party/blink/renderer/core/timing/window_performance.cc
--- a/third_party/blink/renderer/core/timing/window_performance.cc
+++ b/third_party/blink/renderer/core/timing/window_performance.cc
@@ -253,7 +253,7 @@ MemoryInfo* WindowPerformance::memory(ScriptState* script_state) const {
   auto* memory_info = MakeGarbageCollected<MemoryInfo>(
       Platform::Current()->IsLockedToSite()
           ? MemoryInfo::Precision::kPrecise
-          : MemoryInfo::Precision::kBucketized);
+          : MemoryInfo::Precision::kPrecise);
   // Record Web Memory UKM.
   const uint64_t kBytesInKB = 1024;
   auto* execution_context = ExecutionContext::From(script_state);
--
2.25.1
