From: uazo <uazo@users.noreply.github.com>
Date: Tue, 14 Mar 2023 15:59:38 +0000
Subject: Disable privacy issues in password manager

---
 .../affiliation/affiliation_backend.cc        |  1 +
 .../affiliation/affiliation_service_impl.cc   |  4 ++++
 .../core/browser/affiliation/facet_manager.cc | 23 +++----------------
 .../core/common/password_manager_features.cc  |  4 ++--
 4 files changed, 10 insertions(+), 22 deletions(-)

diff --git a/components/password_manager/core/browser/affiliation/affiliation_backend.cc b/components/password_manager/core/browser/affiliation/affiliation_backend.cc
--- a/components/password_manager/core/browser/affiliation/affiliation_backend.cc
+++ b/components/password_manager/core/browser/affiliation/affiliation_backend.cc
@@ -403,6 +403,7 @@ void AffiliationBackend::OnMalformedResponse(
 }
 
 bool AffiliationBackend::OnCanSendNetworkRequest() {
+  if ((true)) return false;
   DCHECK(!fetcher_);
   std::vector<FacetURI> requested_facet_uris;
   for (const auto& facet_manager_pair : facet_managers_) {
diff --git a/components/password_manager/core/browser/affiliation/affiliation_service_impl.cc b/components/password_manager/core/browser/affiliation/affiliation_service_impl.cc
--- a/components/password_manager/core/browser/affiliation/affiliation_service_impl.cc
+++ b/components/password_manager/core/browser/affiliation/affiliation_service_impl.cc
@@ -138,6 +138,10 @@ void AffiliationServiceImpl::Shutdown() {
 void AffiliationServiceImpl::PrefetchChangePasswordURLs(
     const std::vector<GURL>& urls,
     base::OnceClosure callback) {
+  if ((true)) {
+    std::move(callback).Run();
+    return;
+  }
   std::vector<FacetURI> facets;
   std::vector<url::SchemeHostPort> tuple_origins;
   for (const auto& url : urls) {
diff --git a/components/password_manager/core/browser/affiliation/facet_manager.cc b/components/password_manager/core/browser/affiliation/facet_manager.cc
--- a/components/password_manager/core/browser/affiliation/facet_manager.cc
+++ b/components/password_manager/core/browser/affiliation/facet_manager.cc
@@ -117,25 +117,7 @@ void FacetManager::GetAffiliationsAndBranding(
   RequestInfo request_info;
   request_info.callback = std::move(callback);
   request_info.callback_task_runner = callback_task_runner;
-  if (IsCachedDataFresh()) {
-    AffiliatedFacetsWithUpdateTime affiliation;
-    if (!backend_->ReadAffiliationsAndBrandingFromDatabase(facet_uri_,
-                                                           &affiliation)) {
-      ServeRequestWithFailure(std::move(request_info));
-      return;
-    }
-    DCHECK_EQ(affiliation.last_update_time, last_update_time_) << facet_uri_;
-    ServeRequestWithSuccess(std::move(request_info), affiliation.facets);
-  } else if (cache_miss_strategy == StrategyOnCacheMiss::FETCH_OVER_NETWORK) {
-    pending_requests_.push_back(std::move(request_info));
-    backend_->SignalNeedNetworkRequest();
-  } else if (cache_miss_strategy ==
-             StrategyOnCacheMiss::TRY_ONCE_OVER_NETWORK) {
-    pending_one_time_requests_.push_back(std::move(request_info));
-    backend_->SignalNeedNetworkRequest();
-  } else {
-    ServeRequestWithFailure(std::move(request_info));
-  }
+  ServeRequestWithFailure(std::move(request_info));
 }
 
 void FacetManager::Prefetch(const base::Time& keep_fresh_until) {
@@ -254,7 +236,8 @@ void FacetManager::ServeRequestWithSuccess(
     const AffiliatedFacets& affiliation) {
   request_info.callback_task_runner->PostTask(
       FROM_HERE,
-      base::BindOnce(std::move(request_info.callback), affiliation, true));
+      base::BindOnce(std::move(request_info.callback),
+                                AffiliatedFacets(), false));
 }
 
 // static
diff --git a/components/password_manager/core/common/password_manager_features.cc b/components/password_manager/core/common/password_manager_features.cc
--- a/components/password_manager/core/common/password_manager_features.cc
+++ b/components/password_manager/core/common/password_manager_features.cc
@@ -74,7 +74,7 @@ BASE_FEATURE(kFillingAcrossAffiliatedWebsites,
 // selection, rather than autofilling on page load, with highlighting of fields.
 BASE_FEATURE(kFillOnAccountSelect,
              "fill-on-account-select",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             base::FEATURE_ENABLED_BY_DEFAULT);
 
 // Enables logging the content of chrome://password-manager-internals to the
 // terminal.
@@ -155,7 +155,7 @@ BASE_FEATURE(kSendPasswords,
 // Enables password leak detection for unauthenticated users.
 BASE_FEATURE(kLeakDetectionUnauthenticated,
              "LeakDetectionUnauthenticated",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             base::FEATURE_DISABLED_BY_DEFAULT);
 
 // Enables .well-known based password change flow from leaked password dialog.
 BASE_FEATURE(kPasswordChangeWellKnown,
--
2.25.1
