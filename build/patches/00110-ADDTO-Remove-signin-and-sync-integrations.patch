From: Your Name <you@example.com>
Date: Wed, 8 Feb 2023 13:14:29 +0000
Subject: 110 ADDTO Remove signin and sync integrations

---
 .../java/res/xml/privacy_preferences_v2.xml   |  4 --
 .../PasswordManagerLauncher.java              |  1 -
 .../browser/commerce/ShoppingFeatures.java    | 11 +---
 .../PasswordManagerHelper.java                | 20 -------
 ...StoreAndroidBackendReceiverBridgeImpl.java | 10 ----
 ...d_manager_settings_service_android_impl.cc | 59 ++-----------------
 6 files changed, 8 insertions(+), 97 deletions(-)

diff --git a/chrome/android/java/res/xml/privacy_preferences_v2.xml b/chrome/android/java/res/xml/privacy_preferences_v2.xml
--- a/chrome/android/java/res/xml/privacy_preferences_v2.xml
+++ b/chrome/android/java/res/xml/privacy_preferences_v2.xml
@@ -70,8 +70,4 @@ found in the LICENSE file.
         android:key="can_make_payment"
         android:title="@string/can_make_payment_title"
         android:summary="@string/settings_can_make_payment_toggle_label" />
-    <org.chromium.components.browser_ui.settings.TextMessagePreference
-        android:key="sync_and_services_link"
-        android:summary="@string/privacy_sync_and_services_link_legacy"
-        app:allowDividerBelow="false" />
 </PreferenceScreen>
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerLauncher.java b/chrome/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerLauncher.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerLauncher.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerLauncher.java
@@ -30,7 +30,6 @@ public class PasswordManagerLauncher {
     public static void showPasswordSettings(Activity activity,
             @ManagePasswordsReferrer int referrer,
             ObservableSupplier<ModalDialogManager> modalDialogManagerSupplier) {
-        SyncService syncService = SyncService.get();
         PasswordManagerHelper.showPasswordSettings(activity, referrer, new SettingsLauncherImpl(),
                 modalDialogManagerSupplier);
     }
diff --git a/chrome/browser/commerce/android/java/src/org/chromium/chrome/browser/commerce/ShoppingFeatures.java b/chrome/browser/commerce/android/java/src/org/chromium/chrome/browser/commerce/ShoppingFeatures.java
--- a/chrome/browser/commerce/android/java/src/org/chromium/chrome/browser/commerce/ShoppingFeatures.java
+++ b/chrome/browser/commerce/android/java/src/org/chromium/chrome/browser/commerce/ShoppingFeatures.java
@@ -8,8 +8,6 @@ import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.flags.MutableFlagWithSafeDefault;
 import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
-import org.chromium.chrome.browser.signin.services.UnifiedConsentServiceBridge;
 import org.chromium.components.prefs.PrefService;
 import org.chromium.components.signin.identitymanager.ConsentLevel;
 import org.chromium.components.user_prefs.UserPrefs;
@@ -25,14 +23,11 @@ public class ShoppingFeatures {
     }
 
     private static boolean isSignedIn() {
-        return IdentityServicesProvider.get()
-                .getIdentityManager(Profile.getLastUsedRegularProfile())
-                .hasPrimaryAccount(ConsentLevel.SYNC);
+        return false;
     }
 
     private static boolean isAnonymizedUrlDataCollectionEnabled() {
-        return UnifiedConsentServiceBridge.isUrlKeyedAnonymizedDataCollectionEnabled(
-                Profile.getLastUsedRegularProfile());
+        return false;
     }
 
     private static boolean isWebAndAppActivityEnabled() {
@@ -40,4 +35,4 @@ public class ShoppingFeatures {
         return prefService != null
                 && prefService.getBoolean(Pref.WEB_AND_APP_ACTIVITY_ENABLED_FOR_SHOPPING);
     }
-}
\ No newline at end of file
+}
diff --git a/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerHelper.java b/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerHelper.java
--- a/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerHelper.java
+++ b/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerHelper.java
@@ -20,8 +20,6 @@ import android.os.SystemClock;
 import androidx.annotation.IntDef;
 import androidx.annotation.VisibleForTesting;
 
-import com.google.android.gms.common.api.ApiException;
-
 import org.chromium.base.Callback;
 import org.chromium.base.metrics.RecordHistogram;
 import org.chromium.base.supplier.ObservableSupplier;
@@ -365,24 +363,6 @@ public class PasswordManagerHelper {
         // API call level.
         RecordHistogram.recordEnumeratedHistogram(kGetIntentErrorHistogram,
                 CredentialManagerError.API_ERROR, CredentialManagerError.COUNT);
-
-        if (!(exception instanceof ApiException)) return;
-
-        final String kGetIntentApiErrorHistogram = forAccount
-                ? ACCOUNT_GET_INTENT_API_ERROR_HISTOGRAM
-                : LOCAL_GET_INTENT_API_ERROR_HISTOGRAM;
-        final String kGetIntentErrorConnectionResultCodeHistogram = forAccount
-                ? ACCOUNT_GET_INTENT_ERROR_CONNECTION_RESULT_CODE_HISTOGRAM
-                : LOCAL_GET_INTENT_ERROR_CONNECTION_RESULT_CODE_HISTOGRAM;
-
-        int apiErrorCode = PasswordManagerAndroidBackendUtil.getApiErrorCode(exception);
-        RecordHistogram.recordSparseHistogram(kGetIntentApiErrorHistogram, apiErrorCode);
-        Integer connectionResultCode =
-                PasswordManagerAndroidBackendUtil.getConnectionResultCode(exception);
-        if (connectionResultCode == null) return;
-
-        RecordHistogram.recordSparseHistogram(
-                kGetIntentErrorConnectionResultCodeHistogram, connectionResultCode);
     }
 
     private static void launchIntentAndRecordSuccess(
diff --git a/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordStoreAndroidBackendReceiverBridgeImpl.java b/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordStoreAndroidBackendReceiverBridgeImpl.java
--- a/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordStoreAndroidBackendReceiverBridgeImpl.java
+++ b/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordStoreAndroidBackendReceiverBridgeImpl.java
@@ -40,16 +40,6 @@ class PasswordStoreAndroidBackendReceiverBridgeImpl {
 
     void handleAndroidBackendException(@JobId int jobId, Exception exception) {
         if (mNativeBackendReceiverBridge == 0) return;
-
-        @AndroidBackendErrorType
-        int error = PasswordManagerAndroidBackendUtil.getBackendError(exception);
-        int apiErrorCode = PasswordManagerAndroidBackendUtil.getApiErrorCode(exception);
-        Integer connectionResultCode =
-                PasswordManagerAndroidBackendUtil.getConnectionResultCode(exception);
-
-        PasswordStoreAndroidBackendReceiverBridgeImplJni.get().onError(mNativeBackendReceiverBridge,
-                jobId, error, apiErrorCode, connectionResultCode != null,
-                connectionResultCode == null ? -1 : connectionResultCode.intValue());
     }
 
     void onCompleteWithLogins(@JobId int jobId, byte[] passwords) {
diff --git a/chrome/browser/password_manager/android/password_manager_settings_service_android_impl.cc b/chrome/browser/password_manager/android/password_manager_settings_service_android_impl.cc
--- a/chrome/browser/password_manager/android/password_manager_settings_service_android_impl.cc
+++ b/chrome/browser/password_manager/android/password_manager_settings_service_android_impl.cc
@@ -68,12 +68,6 @@ const PrefService::Preference* GetRegularPrefFromSetting(
   }
 }
 
-bool HasChosenToSyncPreferences(const syncer::SyncService* sync_service) {
-  return sync_service && sync_service->IsSyncFeatureEnabled() &&
-         sync_service->GetUserSettings()->GetSelectedTypes().Has(
-             syncer::UserSelectableType::kPreferences);
-}
-
 bool IsUnenrolledFromUPM(PrefService* pref_service) {
   return pref_service->GetBoolean(
       password_manager::prefs::kUnenrolledFromGoogleMobileServicesDueToErrors);
@@ -101,7 +95,6 @@ PasswordManagerSettingsServiceAndroidImpl::
                                               syncer::SyncService* sync_service)
     : pref_service_(pref_service), sync_service_(sync_service) {
   DCHECK(pref_service_);
-  DCHECK(sync_service_);
   DCHECK(password_manager::features::UsesUnifiedPasswordManagerUi());
   if (!PasswordSettingsUpdaterAndroidBridgeHelper::CanCreateAccessor())
     return;
@@ -151,7 +144,7 @@ bool PasswordManagerSettingsServiceAndroidImpl::IsSettingEnabled(
     return regular_pref->GetValue()->GetBool();
   }
 
-  if (!IsPasswordSyncEnabled(sync_service_)) {
+  if ((true)) {
     return regular_pref->GetValue()->GetBool();
   }
 
@@ -171,29 +164,13 @@ bool PasswordManagerSettingsServiceAndroidImpl::IsSettingEnabled(
 
 void PasswordManagerSettingsServiceAndroidImpl::RequestSettingsFromBackend() {
   // Backend has settings data only if passwords are synced.
-  if (bridge_helper_ && IsPasswordSyncEnabled(sync_service_) &&
-      !IsUnenrolledFromUPM(pref_service_)) {
-    FetchSettings();
-  }
 }
 
 void PasswordManagerSettingsServiceAndroidImpl::TurnOffAutoSignIn() {
-  if (!bridge_helper_ || !IsPasswordSyncEnabled(sync_service_) ||
-      IsUnenrolledFromUPM(pref_service_)) {
-    pref_service_->SetBoolean(
-        password_manager::prefs::kCredentialsEnableAutosignin, false);
-    return;
-  }
-  if (!HasChosenToSyncPreferences(sync_service_)) {
-    pref_service_->SetBoolean(
-        password_manager::prefs::kCredentialsEnableAutosignin, false);
-  }
-
+  pref_service_->SetBoolean(
+      password_manager::prefs::kCredentialsEnableAutosignin, false);
   pref_service_->SetBoolean(password_manager::prefs::kAutoSignInEnabledGMS,
                             false);
-  bridge_helper_->SetPasswordSettingValue(
-      SyncingAccount(sync_service_->GetAccountInfo().email),
-      PasswordManagerSetting::kAutoSignIn, false);
 }
 
 void PasswordManagerSettingsServiceAndroidImpl::Init() {
@@ -204,8 +181,7 @@ void PasswordManagerSettingsServiceAndroidImpl::Init() {
   lifecycle_helper_->RegisterObserver(base::BindRepeating(
       &PasswordManagerSettingsServiceAndroidImpl::OnChromeForegrounded,
       weak_ptr_factory_.GetWeakPtr()));
-  is_password_sync_enabled_ = IsPasswordSyncEnabled(sync_service_);
-  sync_service_->AddObserver(this);
+  is_password_sync_enabled_ = false;
 
   pref_change_registrar_.Init(pref_service_);
   pref_change_registrar_.Add(
@@ -225,8 +201,7 @@ void PasswordManagerSettingsServiceAndroidImpl::OnSettingValueFetched(
     PasswordManagerSetting setting,
     bool value) {
   UpdateSettingFetchState(setting);
-  if (!fetch_after_sync_status_change_in_progress_ &&
-      !IsPasswordSyncEnabled(sync_service_)) {
+  if (!fetch_after_sync_status_change_in_progress_) {
     return;
   }
 
@@ -239,11 +214,9 @@ void PasswordManagerSettingsServiceAndroidImpl::OnSettingValueFetched(
   // when preference syncing is off, otherwise it might cause sync cycles.
   // When sync is on, the regular preference gets updated via sync, so this
   // step is not necessary.
-  if (!HasChosenToSyncPreferences(sync_service_)) {
     const PrefService::Preference* regular_pref =
         GetRegularPrefFromSetting(pref_service_, setting);
     pref_service_->SetBoolean(regular_pref->name(), value);
-  }
 }
 
 void PasswordManagerSettingsServiceAndroidImpl::OnSettingValueAbsent(
@@ -252,24 +225,6 @@ void PasswordManagerSettingsServiceAndroidImpl::OnSettingValueAbsent(
   UpdateSettingFetchState(setting);
   if (IsUnenrolledFromUPM(pref_service_))
     return;
-
-  if (!IsPasswordSyncEnabled(sync_service_))
-    return;
-
-  const PrefService::Preference* pref =
-      GetGMSPrefFromSetting(pref_service_, setting);
-
-  // If both GMS and Chrome have default values for the setting, then no update
-  // is needed.
-  if (!pref_service_->GetUserPrefValue(pref->name()))
-    return;
-
-  // If Chrome has an explicitly set value, GMS needs to know about it.
-  // TODO(crbug.com/1289700): Check whether this should be guarded by a
-  // migration pref.
-  bridge_helper_->SetPasswordSettingValue(
-      SyncingAccount(sync_service_->GetAccountInfo().email), setting,
-      pref->GetValue()->GetBool());
 }
 
 void PasswordManagerSettingsServiceAndroidImpl::MigratePrefsIfNeeded() {
@@ -285,10 +240,6 @@ void PasswordManagerSettingsServiceAndroidImpl::MigratePrefsIfNeeded() {
                             true);
   // No need to copy the values until sync turns on. When sync turns on, this
   // will be handled as part of the sync state change rather than migration.
-  if (!IsPasswordSyncEnabled(sync_service_))
-    return;
-
-  DumpChromePrefsIntoGMSPrefs();
 }
 
 void PasswordManagerSettingsServiceAndroidImpl::OnStateChanged(
--
2.25.1
