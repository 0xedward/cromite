From: csagan5 <32685696+csagan5@users.noreply.github.com>
Date: Tue, 12 Jun 2018 14:23:07 +0200
Subject: Remove signin and sync integrations

Prevents authorization prompt for Play services on reboot
Remove recent tabs signin
Disable unused permissions from manifest
Disable sync adaptive and invalidation services from manifest
More permissions removal from manifest
Disable promos displayed in bookmarks manager
Remove personalized signin promo view from
bookmarks, never reach signin thresholds.

Fix building with debug symbols:

ld.lld: error: undefined symbol: notifier::NotifierOptions::NotifierOptions()
>>> referenced by invalidation_service_util.cc:17 (../../components/invalidation/impl/invalidation_service_util.cc:17)
>>>               impl/invalidation_service_util.o:(invalidation::ParseNotifierOptions(base::CommandLine const&)) in archive obj/components/invalidation/impl/libimpl.a

License: GPL-3.0-only - https://spdx.org/licenses/GPL-3.0-only.html
---
 chrome/android/BUILD.gn                       |  18 --
 chrome/android/chrome_java_sources.gni        |  30 ---
 chrome/android/features/tab_ui/BUILD.gn       |   1 -
 .../browser/feed/FeedSurfaceCoordinator.java  |   9 +-
 .../browser/feed/FeedSurfaceMediator.java     |  76 +-----
 chrome/android/java/AndroidManifest.xml       |  19 --
 .../res/xml/google_services_preferences.xml   |  10 -
 .../android/java/res/xml/main_preferences.xml |  22 +-
 .../java/res/xml/manage_sync_preferences.xml  |  12 -
 .../java/res/xml/privacy_preferences.xml      |   4 -
 .../java/res/xml/privacy_preferences_v2.xml   |   4 -
 .../org/chromium/chrome/browser/AppHooks.java |  34 ---
 .../chrome/browser/ChromeBackupAgentImpl.java |   9 +-
 .../chrome/browser/ChromeBackupWatcher.java   |  10 -
 .../chrome/browser/ChromeTabbedActivity.java  |   9 -
 .../chrome/browser/app/ChromeActivity.java    |  75 ------
 .../creator/CreatorActionDelegateImpl.java    |   3 -
 .../app/feed/FeedActionDelegateImpl.java      |   3 -
 .../autofill/settings/AddressEditor.java      |  16 +-
 .../browser/bookmarks/BookmarkListEntry.java  |   7 +-
 .../bookmarks/BookmarkManagerCoordinator.java |  20 --
 .../bookmarks/BookmarkManagerMediator.java    |  56 +----
 .../bookmarks/BookmarkManagerViewBinder.java  |  11 -
 .../bookmarks/BookmarkPromoHeader.java        | 230 +-----------------
 .../ClearBrowsingDataFragment.java            |  76 ------
 .../ClearBrowsingDataFragmentBasic.java       |  27 +-
 .../contacts_picker/ChromePickerAdapter.java  |  67 +----
 .../browser/customtabs/CustomTabActivity.java |   7 -
 .../firstrun/LightweightFirstRunActivity.java |   4 +-
 .../history/HistoryContentManager.java        |  25 +-
 .../identity_disc/IdentityDiscController.java | 120 +--------
 .../init/ChromeBrowserInitializer.java        |   2 -
 .../init/ProcessInitializationHandler.java    |   9 -
 .../chrome/browser/ntp/RecentTabsManager.java | 129 +---------
 .../browser/ntp/RecentTabsRowAdapter.java     |  31 +--
 .../browser/ntp/search/SearchBoxMediator.java |   1 -
 .../browser/omaha/RequestGenerator.java       |   3 -
 .../AccountChooserDialog.java                 |   2 +-
 .../AutoSigninSnackbarController.java         |   2 +-
 .../PasswordManagerLauncher.java              |   4 +-
 .../settings/PasswordSettings.java            |  71 +-----
 .../browser/payments/ui/PaymentRequestUI.java |  12 +-
 .../privacy/settings/PrivacySettings.java     |  31 ---
 .../chrome/browser/settings/MainSettings.java |  96 +-------
 .../browser/settings/SettingsActivity.java    |   9 -
 .../survey/ChromeSurveyController.java        |   4 +-
 .../tabbed_mode/TabbedRootUiCoordinator.java  |  19 --
 chrome/browser/BUILD.gn                       |   9 -
 ...mobile_identity_consistency_field_trial.cc |  13 +-
 chrome/browser/commerce/android/BUILD.gn      |   2 -
 .../PriceNotificationPreferenceFragment.java  |   8 +-
 .../price_tracking/PriceTrackingFeatures.java |   9 +-
 .../commerce/subscriptions/android/BUILD.gn   |   1 -
 .../subscriptions/android/java_sources.gni    |   1 -
 chrome/browser/feed/android/BUILD.gn          |   1 -
 .../chrome/browser/feed/FeedFeatures.java     |   2 -
 .../browser/feed/FeedServiceBridge.java       |   2 +-
 .../SigninBottomSheetCoordinator.java         |  28 +--
 chrome/browser/feedback/android/BUILD.gn      |   1 -
 .../browser/feedback/FeedbackCollector.java   |   9 -
 .../browser/firstrun/MobileFreProgress.java   |   4 +-
 .../router/discovery/access_code/BUILD.gn     |   1 -
 .../browser/password_manager/android/BUILD.gn |   4 -
 ...sswordManagerErrorMessageHelperBridge.java |  26 --
 .../PasswordManagerHelper.java                | 146 +----------
 ...StoreAndroidBackendReceiverBridgeImpl.java |  10 -
 ...swordSyncControllerDelegateBridgeImpl.java |   6 +-
 ...d_manager_settings_service_android_impl.cc |  59 +----
 chrome/browser/privacy/BUILD.gn               |   1 -
 chrome/browser/privacy_guide/android/BUILD.gn |   2 -
 .../res/layout/privacy_guide_msbb_step.xml    |   7 -
 .../browser/privacy_guide/MSBBFragment.java   |   9 -
 .../privacy_guide/PrivacyGuideUtils.java      |   5 +-
 ...hrome_browser_main_extra_parts_profiles.cc |   3 +-
 chrome/browser/search_resumption/BUILD.gn     |   4 -
 .../SearchResumptionModuleMediator.java       |  37 +--
 .../SearchResumptionModuleUtils.java          |  12 -
 .../ManageAccountDevicesLinkView.java         |  28 +--
 .../SendTabToSelfCoordinator.java             | 152 ------------
 .../account_consistency_mode_manager.cc       |   7 +-
 .../signin/identity_manager_factory.cc        |   5 -
 .../identity_services_provider_android.cc     |  13 -
 .../services/IdentityServicesProvider.java    |  13 -
 chrome/browser/supervised_user/BUILD.gn       |   1 -
 .../WebsiteApprovalMediator.java              |  24 --
 chrome/browser/sync/sync_service_factory.cc   |  12 +-
 chrome/browser/ui/android/omnibox/BUILD.gn    |   2 -
 .../browser/omnibox/LocationBarMediator.java  |   1 -
 ...onfirmImportSyncDataDialogCoordinator.java |   7 +-
 .../signin/ConfirmSyncDataStateMachine.java   |  16 +-
 .../ui/signin/SignOutDialogCoordinator.java   |  34 +--
 .../ui/signin/SyncConsentFragmentBase.java    | 106 +-------
 .../ui/signin/SyncPromoController.java        |  15 +-
 .../WebSigninAccountPickerDelegate.java       |  23 --
 .../ui/signin/fre/SigninFirstRunMediator.java |  64 +----
 .../strings/android_chrome_strings.grd        |  18 --
 .../core/browser/leak_detection_delegate.cc   |   2 +-
 .../core/browser/password_form_manager.cc     |  34 +--
 .../browser/password_manager_client_helper.cc |  45 +---
 .../core/browser/sync_credentials_filter.cc   |  49 +---
 components/signin/features.gni                |   4 +-
 .../primary_account_manager.cc                |  17 +-
 ...e_oauth2_token_service_delegate_android.cc | 125 +---------
 ...le_oauth2_token_service_delegate_android.h |  10 -
 .../signin/SystemAccountManagerDelegate.java  |  25 +-
 .../ProfileOAuth2TokenServiceDelegate.java    |  52 ----
 .../net/HttpNegotiateAuthenticator.java       |  88 +------
 .../chromoting/base/OAuthTokenFetcher.java    |   2 -
 108 files changed, 110 insertions(+), 2745 deletions(-)

diff --git a/chrome/android/BUILD.gn b/chrome/android/BUILD.gn
--- a/chrome/android/BUILD.gn
+++ b/chrome/android/BUILD.gn
@@ -135,7 +135,6 @@ if (current_toolchain == default_toolchain) {
       "//chrome/browser/password_manager/android:java_resources",
       "//chrome/browser/quick_delete:java_resources",
       "//chrome/browser/search_resumption:java_resources",
-      "//chrome/browser/signin/services/android:java_resources",
       "//chrome/browser/tab:java_resources",
       "//chrome/browser/ui/android/appmenu:java_resources",
       "//chrome/browser/ui/android/favicon:java_resources",
@@ -338,7 +337,6 @@ if (current_toolchain == default_toolchain) {
       "//chrome/browser/share:java",
       "//chrome/browser/share/android:java_resources",
       "//chrome/browser/signin/services/android:java",
-      "//chrome/browser/sync/android:java",
       "//chrome/browser/tab:java",
       "//chrome/browser/tab_group:java",
       "//chrome/browser/tabmodel:factory_java",
@@ -488,7 +486,6 @@ if (current_toolchain == default_toolchain) {
       "//components/strictmode/android:java",
       "//components/stylus_handwriting/android:java",
       "//components/subresource_filter/android:java",
-      "//components/sync/android:sync_java",
       "//components/sync/protocol:protocol_java",
       "//components/sync_device_info:sync_device_info_java",
       "//components/thin_webview:factory_java",
@@ -933,9 +930,6 @@ if (current_toolchain == default_toolchain) {
       "//chrome/browser/segmentation_platform:factory_java",
       "//chrome/browser/settings:junit_test_support",
       "//chrome/browser/share:java",
-      "//chrome/browser/signin/services/android:java",
-      "//chrome/browser/signin/services/android:junit",
-      "//chrome/browser/sync/android:java",
       "//chrome/browser/tab:java",
       "//chrome/browser/tab:junit",
       "//chrome/browser/tab_group:java",
@@ -969,8 +963,6 @@ if (current_toolchain == default_toolchain) {
       "//chrome/browser/ui/android/omnibox:junit",
       "//chrome/browser/ui/android/quickactionsearchwidget:java",
       "//chrome/browser/ui/android/searchactivityutils:java",
-      "//chrome/browser/ui/android/signin:java",
-      "//chrome/browser/ui/android/signin:junit",
       "//chrome/browser/ui/android/theme:java",
       "//chrome/browser/ui/android/toolbar:java",
       "//chrome/browser/ui/android/toolbar:junit",
@@ -1062,7 +1054,6 @@ if (current_toolchain == default_toolchain) {
       "//components/signin/core/browser:signin_enums_java",
       "//components/signin/public/android:java",
       "//components/signin/public/android:signin_java_test_support",
-      "//components/sync/android:sync_java",
       "//components/sync_device_info:sync_device_info_java",
       "//components/translate/content/android:junit",
       "//components/ukm/android:java",
@@ -1499,10 +1490,8 @@ if (current_toolchain == default_toolchain) {
       "//chrome/browser/settings:test_support_java",
       "//chrome/browser/share:java",
       "//chrome/browser/share/android:java_resources",
-      "//chrome/browser/signin/services/android:java",
       "//chrome/browser/supervised_user:javatests",
       "//chrome/browser/supervised_user:test_support_java",
-      "//chrome/browser/sync/android:java",
       "//chrome/browser/sync/test/android:test_support_java",
       "//chrome/browser/tab:critical_persisted_tab_data_flatbuffer_java",
       "//chrome/browser/tab:critical_persisted_tab_data_proto_java",
@@ -1528,8 +1517,6 @@ if (current_toolchain == default_toolchain) {
       "//chrome/browser/ui/android/quickactionsearchwidget:java",
       "//chrome/browser/ui/android/quickactionsearchwidget:javatests",
       "//chrome/browser/ui/android/searchactivityutils:java",
-      "//chrome/browser/ui/android/signin:java",
-      "//chrome/browser/ui/android/signin:javatests",
       "//chrome/browser/ui/android/theme:java",
       "//chrome/browser/ui/android/toolbar:java",
       "//chrome/browser/ui/messages/android:java",
@@ -1645,7 +1632,6 @@ if (current_toolchain == default_toolchain) {
       "//components/signin/public/android:java",
       "//components/signin/public/android:signin_java_test_support",
       "//components/site_engagement/content/android:java",
-      "//components/sync/android:sync_java",
       "//components/sync/protocol:protocol_java",
       "//components/sync_device_info:sync_device_info_java",
       "//components/url_formatter/android:url_formatter_java",
@@ -2337,7 +2323,6 @@ if (current_toolchain == default_toolchain) {
       "//chrome/browser/download/android:java",
       "//chrome/browser/prefetch/android:java",
       "//chrome/browser/profiles/android:java",
-      "//chrome/browser/sync/android:java",
       "//chrome/browser/tab:java",
       "//components/offline_items_collection/core:core_java",
       "//components/sync/protocol:protocol_java",
@@ -2760,13 +2745,11 @@ if (current_toolchain == default_toolchain) {
       "//chrome/browser/optimization_guide/android:unit_device_javatests",
       "//chrome/browser/partnercustomizations:unit_device_javatests",
       "//chrome/browser/password_edit_dialog/android:unit_device_javatests",
-      "//chrome/browser/signin/services/android:unit_device_javatests",
       "//chrome/browser/thumbnail/generator:unit_device_javatests",
       "//chrome/browser/ui/android/appmenu/internal:unit_device_javatests",
       "//chrome/browser/ui/android/night_mode:unit_device_javatests",
       "//chrome/browser/ui/android/omnibox:unit_device_javatests",
       "//chrome/browser/ui/android/searchactivityutils:unit_device_javatests",
-      "//chrome/browser/ui/android/signin:unit_device_javatests",
       "//chrome/browser/ui/messages/android:unit_device_javatests",
       "//chrome/browser/video_tutorials/internal:unit_device_javatests",
       "//components/browser_ui/bottomsheet/android/internal:unit_device_javatests",
@@ -3623,7 +3606,6 @@ generate_jni("chrome_jni_headers") {
     "java/src/org/chromium/chrome/browser/sharing/shared_clipboard/SharedClipboardMessageHandler.java",
     "java/src/org/chromium/chrome/browser/sharing/sms_fetcher/SmsFetcherMessageHandler.java",
     "java/src/org/chromium/chrome/browser/signin/SigninBridge.java",
-    "java/src/org/chromium/chrome/browser/signin/SigninManagerImpl.java",
     "java/src/org/chromium/chrome/browser/site_settings/CookieControlsServiceBridge.java",
     "java/src/org/chromium/chrome/browser/status_indicator/StatusIndicatorSceneLayer.java",
     "java/src/org/chromium/chrome/browser/suggestions/mostvisited/MostVisitedSites.java",
diff --git a/chrome/android/chrome_java_sources.gni b/chrome/android/chrome_java_sources.gni
--- a/chrome/android/chrome_java_sources.gni
+++ b/chrome/android/chrome_java_sources.gni
@@ -11,7 +11,6 @@ chrome_java_sources = [
   "java/src/org/chromium/chrome/browser/AppIndexingUtil.java",
   "java/src/org/chromium/chrome/browser/ApplicationLifetime.java",
   "java/src/org/chromium/chrome/browser/BackPressHelper.java",
-  "java/src/org/chromium/chrome/browser/BackupSigninProcessor.java",
   "java/src/org/chromium/chrome/browser/BrowserRestartActivity.java",
   "java/src/org/chromium/chrome/browser/ChromeActionModeHandler.java",
   "java/src/org/chromium/chrome/browser/ChromeActivitySessionTracker.java",
@@ -608,14 +607,11 @@ chrome_java_sources = [
   "java/src/org/chromium/chrome/browser/firstrun/FirstRunPage.java",
   "java/src/org/chromium/chrome/browser/firstrun/FirstRunPageDelegate.java",
   "java/src/org/chromium/chrome/browser/firstrun/FirstRunPagerAdapter.java",
-  "java/src/org/chromium/chrome/browser/firstrun/FirstRunSignInProcessor.java",
   "java/src/org/chromium/chrome/browser/firstrun/FirstRunUtils.java",
-  "java/src/org/chromium/chrome/browser/firstrun/ForcedSigninProcessor.java",
   "java/src/org/chromium/chrome/browser/firstrun/FreIntentCreator.java",
   "java/src/org/chromium/chrome/browser/firstrun/LightweightFirstRunActivity.java",
   "java/src/org/chromium/chrome/browser/firstrun/PolicyLoadListener.java",
   "java/src/org/chromium/chrome/browser/firstrun/SkipTosDialogPolicyListener.java",
-  "java/src/org/chromium/chrome/browser/firstrun/SyncConsentFirstRunFragment.java",
   "java/src/org/chromium/chrome/browser/firstrun/TabbedModeFirstRunActivity.java",
   "java/src/org/chromium/chrome/browser/firstrun/TosDialogBehaviorSharedPrefInvalidator.java",
   "java/src/org/chromium/chrome/browser/flags/BadFlagsSnackbarManager.java",
@@ -801,7 +797,6 @@ chrome_java_sources = [
   "java/src/org/chromium/chrome/browser/ntp/RevampedIncognitoDescriptionView.java",
   "java/src/org/chromium/chrome/browser/ntp/SnapScrollHelperImpl.java",
   "java/src/org/chromium/chrome/browser/ntp/TitleUtil.java",
-  "java/src/org/chromium/chrome/browser/ntp/cards/SignInPromo.java",
   "java/src/org/chromium/chrome/browser/ntp/search/SearchBoxContainerView.java",
   "java/src/org/chromium/chrome/browser/ntp/search/SearchBoxCoordinator.java",
   "java/src/org/chromium/chrome/browser/ntp/search/SearchBoxMediator.java",
@@ -1004,14 +999,6 @@ chrome_java_sources = [
   "java/src/org/chromium/chrome/browser/sharing/click_to_call/ClickToCallUma.java",
   "java/src/org/chromium/chrome/browser/sharing/shared_clipboard/SharedClipboardMessageHandler.java",
   "java/src/org/chromium/chrome/browser/sharing/sms_fetcher/SmsFetcherMessageHandler.java",
-  "java/src/org/chromium/chrome/browser/signin/LegacySyncPromoView.java",
-  "java/src/org/chromium/chrome/browser/signin/SigninBridge.java",
-  "java/src/org/chromium/chrome/browser/signin/SigninCheckerProvider.java",
-  "java/src/org/chromium/chrome/browser/signin/SigninFirstRunFragment.java",
-  "java/src/org/chromium/chrome/browser/signin/SigninManagerImpl.java",
-  "java/src/org/chromium/chrome/browser/signin/SyncConsentActivity.java",
-  "java/src/org/chromium/chrome/browser/signin/SyncConsentActivityLauncherImpl.java",
-  "java/src/org/chromium/chrome/browser/signin/SyncConsentFragment.java",
   "java/src/org/chromium/chrome/browser/site_settings/ChromeSiteSettingsDelegate.java",
   "java/src/org/chromium/chrome/browser/site_settings/CookieControlsServiceBridge.java",
   "java/src/org/chromium/chrome/browser/site_settings/ManageSpaceActivity.java",
@@ -1051,23 +1038,6 @@ chrome_java_sources = [
   "java/src/org/chromium/chrome/browser/supervised_user/ChildAccountService.java",
   "java/src/org/chromium/chrome/browser/survey/ChromeSurveyController.java",
   "java/src/org/chromium/chrome/browser/survey/SurveyController.java",
-  "java/src/org/chromium/chrome/browser/sync/SyncErrorNotifier.java",
-  "java/src/org/chromium/chrome/browser/sync/TrustedVaultClient.java",
-  "java/src/org/chromium/chrome/browser/sync/settings/AccountManagementFragment.java",
-  "java/src/org/chromium/chrome/browser/sync/settings/ClearDataProgressDialog.java",
-  "java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java",
-  "java/src/org/chromium/chrome/browser/sync/settings/ManageSyncSettings.java",
-  "java/src/org/chromium/chrome/browser/sync/settings/SignInPreference.java",
-  "java/src/org/chromium/chrome/browser/sync/settings/SyncErrorCardPreference.java",
-  "java/src/org/chromium/chrome/browser/sync/settings/SyncPromoPreference.java",
-  "java/src/org/chromium/chrome/browser/sync/settings/SyncSettingsUtils.java",
-  "java/src/org/chromium/chrome/browser/sync/ui/PassphraseActivity.java",
-  "java/src/org/chromium/chrome/browser/sync/ui/PassphraseCreationDialogFragment.java",
-  "java/src/org/chromium/chrome/browser/sync/ui/PassphraseDialogFragment.java",
-  "java/src/org/chromium/chrome/browser/sync/ui/PassphraseTypeDialogFragment.java",
-  "java/src/org/chromium/chrome/browser/sync/ui/SyncErrorMessage.java",
-  "java/src/org/chromium/chrome/browser/sync/ui/SyncErrorMessageImpressionTracker.java",
-  "java/src/org/chromium/chrome/browser/sync/ui/SyncTrustedVaultProxyActivity.java",
   "java/src/org/chromium/chrome/browser/tab/AccessibilityVisibilityHandler.java",
   "java/src/org/chromium/chrome/browser/tab/AutofillSessionLifetimeController.java",
   "java/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateClientImpl.java",
diff --git a/chrome/android/features/tab_ui/BUILD.gn b/chrome/android/features/tab_ui/BUILD.gn
--- a/chrome/android/features/tab_ui/BUILD.gn
+++ b/chrome/android/features/tab_ui/BUILD.gn
@@ -202,7 +202,6 @@ android_library("java") {
     "//chrome/browser/profiles/android:java",
     "//chrome/browser/search_engines/android:java",
     "//chrome/browser/share:java",
-    "//chrome/browser/signin/services/android:java",
     "//chrome/browser/tab:java",
     "//chrome/browser/tab_group:java",
     "//chrome/browser/tabmodel:java",
diff --git a/chrome/android/feed/core/java/src/org/chromium/chrome/browser/feed/FeedSurfaceCoordinator.java b/chrome/android/feed/core/java/src/org/chromium/chrome/browser/feed/FeedSurfaceCoordinator.java
--- a/chrome/android/feed/core/java/src/org/chromium/chrome/browser/feed/FeedSurfaceCoordinator.java
+++ b/chrome/android/feed/core/java/src/org/chromium/chrome/browser/feed/FeedSurfaceCoordinator.java
@@ -837,12 +837,7 @@ public class FeedSurfaceCoordinator
 
     /** @return The {@link View} for this class. */
     View getSigninPromoView() {
-        if (mSigninPromoView == null) {
-            LayoutInflater inflater = LayoutInflater.from(mRootView.getContext());
-            mSigninPromoView = inflater.inflate(
-                    R.layout.sync_promo_view_content_suggestions, mRootView, false);
-        }
-        return mSigninPromoView;
+        return null;
     }
 
     /**
@@ -973,7 +968,7 @@ public class FeedSurfaceCoordinator
 
     @Override
     public boolean isSignedIn() {
-        return FeedServiceBridge.isSignedIn();
+        return false;
     }
 
     @Override
diff --git a/chrome/android/feed/core/java/src/org/chromium/chrome/browser/feed/FeedSurfaceMediator.java b/chrome/android/feed/core/java/src/org/chromium/chrome/browser/feed/FeedSurfaceMediator.java
--- a/chrome/android/feed/core/java/src/org/chromium/chrome/browser/feed/FeedSurfaceMediator.java
+++ b/chrome/android/feed/core/java/src/org/chromium/chrome/browser/feed/FeedSurfaceMediator.java
@@ -36,17 +36,12 @@ import org.chromium.chrome.browser.feed.v2.ContentOrder;
 import org.chromium.chrome.browser.feed.v2.FeedUserActionType;
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.ntp.NewTabPageLaunchOrigin;
-import org.chromium.chrome.browser.ntp.cards.SignInPromo;
 import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.preferences.PrefChangeRegistrar;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.search_engines.TemplateUrlServiceFactory;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
-import org.chromium.chrome.browser.signin.services.SigninManager;
 import org.chromium.chrome.browser.suggestions.SuggestionsMetrics;
 import org.chromium.chrome.browser.ui.native_page.TouchEnabledDelegate;
-import org.chromium.chrome.browser.ui.signin.PersonalizedSigninPromoView;
-import org.chromium.chrome.browser.ui.signin.SyncPromoController;
 import org.chromium.chrome.browser.xsurface.FeedLaunchReliabilityLogger;
 import org.chromium.chrome.browser.xsurface.FeedLaunchReliabilityLogger.StreamType;
 import org.chromium.chrome.browser.xsurface.ListLayoutHelper;
@@ -120,7 +115,6 @@ public class FeedSurfaceMediator
     /**
      * The {@link SignInPromo} for the Feed.
      * TODO(huayinz): Update content and visibility through a ModelChangeProcessor.
-     */
     private class FeedSignInPromo extends SignInPromo {
         FeedSignInPromo(SigninManager signinManager) {
             super(signinManager);
@@ -141,7 +135,7 @@ public class FeedSurfaceMediator
             maybeUpdateSignInPromo();
         }
 
-        /** Update the content displayed in {@link PersonalizedSigninPromoView}. */
+        ** Update the content displayed in {@link PersonalizedSigninPromoView}. *
         private void maybeUpdateSignInPromo() {
             // Only call #setupPromoViewFromCache() if SignInPromo is visible to avoid potentially
             // blocking the UI thread for several seconds if the accounts cache is not populated
@@ -159,7 +153,7 @@ public class FeedSurfaceMediator
             super.onDismissPromo();
             mCoordinator.updateHeaderViews(false);
         }
-    }
+    } */
 
     /**
      * Internal implementation of Stream.StreamsMediator.
@@ -199,7 +193,6 @@ public class FeedSurfaceMediator
     private final @Nullable SnapScrollHelper mSnapScrollHelper;
     private final Profile mProfile;
     private final PrefChangeRegistrar mPrefChangeRegistrar;
-    private final SigninManager mSigninManager;
     private final TemplateUrlService mTemplateUrlService;
     private final PropertyModel mSectionHeaderModel;
     private final FeedActionDelegate mActionDelegate;
@@ -210,7 +203,6 @@ public class FeedSurfaceMediator
     private HasContentListener mHasContentListener;
     private ContentChangedListener mStreamContentChangedListener;
     private MemoryPressureCallback mMemoryPressureCallback;
-    private @Nullable SignInPromo mSignInPromo;
     private RecyclerViewAnimationFinishDetector mRecyclerViewAnimationFinishDetector =
             new RecyclerViewAnimationFinishDetector();
 
@@ -254,7 +246,6 @@ public class FeedSurfaceMediator
         mContext = context;
         mSnapScrollHelper = snapScrollHelper;
         mProfile = Profile.getLastUsedRegularProfile();
-        mSigninManager = IdentityServicesProvider.get().getSigninManager(mProfile);
         mTemplateUrlService = TemplateUrlServiceFactory.getForProfile(mProfile);
         mActionDelegate = actionDelegate;
         mOptionsCoordinator = optionsCoordinator;
@@ -477,7 +468,6 @@ public class FeedSurfaceMediator
         mFeedMenuModel = buildMenuItems();
 
         mCoordinator.initializeBubbleTriggering();
-        mSigninManager.getIdentityManager().addObserver(this);
 
         mSectionHeaderModel.set(SectionHeaderListProperties.MENU_MODEL_LIST_KEY, mFeedMenuModel);
         mSectionHeaderModel.set(
@@ -519,8 +509,6 @@ public class FeedSurfaceMediator
         };
         mCoordinator.getRecyclerView().addOnScrollListener(mStreamScrollListener);
 
-        initStreamHeaderViews();
-
         mMemoryPressureCallback =
                 pressure -> mCoordinator.getRecyclerView().getRecycledViewPool().clear();
         MemoryPressureListener.addCallback(mMemoryPressureCallback);
@@ -745,27 +733,12 @@ public class FeedSurfaceMediator
         }
     }
 
-    private void initStreamHeaderViews() {
-        boolean signInPromoVisible = shouldShowSigninPromo();
-        mCoordinator.updateHeaderViews(signInPromoVisible);
-    }
-
     /**
      * Determines whether a signin promo should be shown.
      * @return Whether the SignPromo should be visible.
      */
     private boolean shouldShowSigninPromo() {
-        SyncPromoController.resetNTPSyncPromoLimitsIfHiddenForTooLong();
-        if (!SignInPromo.shouldCreatePromo()
-                || !SyncPromoController.canShowSyncPromo(
-                        SigninAccessPoint.NTP_CONTENT_SUGGESTIONS)) {
-            return false;
-        }
-        if (mSignInPromo == null) {
-            mSignInPromo = new FeedSignInPromo(mSigninManager);
-            mSignInPromo.setCanShowPersonalizedSuggestions(isSuggestionsVisible());
-        }
-        return mSignInPromo.isVisible();
+        return false;
     }
 
     /** Clear any dependencies related to the {@link Stream}. */
@@ -780,11 +753,6 @@ public class FeedSurfaceMediator
         MemoryPressureListener.removeCallback(mMemoryPressureCallback);
         mMemoryPressureCallback = null;
 
-        if (mSignInPromo != null) {
-            mSignInPromo.destroy();
-            mSignInPromo = null;
-        }
-
         unbindStream();
         for (Stream s : mTabToStreamMap.values()) {
             s.removeOnContentChangedListener(mStreamContentChangedListener);
@@ -795,7 +763,6 @@ public class FeedSurfaceMediator
 
         mPrefChangeRegistrar.removeObserver(Pref.ARTICLES_LIST_VISIBLE);
         mTemplateUrlService.removeObserver(this);
-        mSigninManager.getIdentityManager().removeObserver(this);
 
         mSectionHeaderModel.get(SectionHeaderListProperties.SECTION_HEADERS_KEY).clear();
 
@@ -865,9 +832,6 @@ public class FeedSurfaceMediator
         // Update toggleswitch item, which is last item in list.
         mSectionHeaderModel.set(SectionHeaderListProperties.MENU_MODEL_LIST_KEY, buildMenuItems());
 
-        if (mSignInPromo != null) {
-            mSignInPromo.setCanShowPersonalizedSuggestions(suggestionsVisible);
-        }
         if (suggestionsVisible) mCoordinator.getSurfaceLifecycleManager().show();
         mStreamContentChanged = true;
 
@@ -945,35 +909,6 @@ public class FeedSurfaceMediator
 
     private ModelList buildMenuItems() {
         ModelList itemList = new ModelList();
-        int iconId = 0;
-        if (FeedServiceBridge.isSignedIn()) {
-            if (ChromeFeatureList.isEnabled(ChromeFeatureList.WEB_FEED)) {
-                itemList.add(buildMenuListItem(
-                        R.string.ntp_manage_feed, R.id.ntp_feed_header_menu_item_manage, iconId));
-            } else {
-                itemList.add(buildMenuListItem(R.string.ntp_manage_my_activity,
-                        R.id.ntp_feed_header_menu_item_activity, iconId));
-                itemList.add(buildMenuListItem(R.string.ntp_manage_interests,
-                        R.id.ntp_feed_header_menu_item_interest, iconId));
-                if (FeedServiceBridge.isAutoplayEnabled()) {
-                    itemList.add(buildMenuListItem(R.string.ntp_manage_autoplay,
-                            R.id.ntp_feed_header_menu_item_autoplay, iconId));
-                }
-                if (ChromeFeatureList.isEnabled(ChromeFeatureList.INTEREST_FEED_V2_HEARTS)) {
-                    itemList.add(buildMenuListItem(R.string.ntp_manage_reactions,
-                            R.id.ntp_feed_header_menu_item_reactions, iconId));
-                }
-            }
-        } else if (FeedServiceBridge.isAutoplayEnabled()) {
-            // Show manage autoplay if not signed in.
-            itemList.add(buildMenuListItem(
-                    R.string.ntp_manage_autoplay, R.id.ntp_feed_header_menu_item_autoplay, iconId));
-        }
-        itemList.add(buildMenuListItem(
-                R.string.learn_more, R.id.ntp_feed_header_menu_item_learn, iconId));
-        itemList.add(getMenuToggleSwitch(
-                mSectionHeaderModel.get(SectionHeaderListProperties.IS_SECTION_ENABLED_KEY),
-                iconId));
         return itemList;
     }
 
@@ -1159,11 +1094,6 @@ public class FeedSurfaceMediator
         updateSectionHeader();
     }
 
-    @VisibleForTesting
-    public SignInPromo getSignInPromoForTesting() {
-        return mSignInPromo;
-    }
-
     void manualRefresh(Callback<Boolean> callback) {
         if (mCurrentStream != null) {
             mCurrentStream.triggerRefresh(callback);
diff --git a/chrome/android/java/AndroidManifest.xml b/chrome/android/java/AndroidManifest.xml
--- a/chrome/android/java/AndroidManifest.xml
+++ b/chrome/android/java/AndroidManifest.xml
@@ -73,9 +73,7 @@ by a child template that "extends" this file.
     <uses-permission android:name="android.permission.FOREGROUND_SERVICE_MEDIA_PLAYBACK" tools:ignore="SystemPermissionTypo" />
     <uses-permission android:name="android.permission.FOREGROUND_SERVICE_DATA_SYNC" tools:ignore="SystemPermissionTypo" />
 
-    <uses-permission android:name="android.permission.GET_ACCOUNTS"/>
     <uses-permission android:name="android.permission.INTERNET"/>
-    <uses-permission android:name="android.permission.MANAGE_ACCOUNTS"/>
     <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS"/>
     <uses-permission android:name="android.permission.NFC"/>
     <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
@@ -86,7 +84,6 @@ by a child template that "extends" this file.
     <uses-permission-sdk-23 android:name="android.permission.READ_MEDIA_VIDEO"/>
     <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
     <uses-permission android:name="android.permission.RECORD_AUDIO"/>
-    <uses-permission android:name="android.permission.USE_CREDENTIALS"/>
     <uses-permission-sdk-23 android:name="android.permission.USE_BIOMETRIC"/>
     <uses-permission-sdk-23 android:name="android.permission.USE_FINGERPRINT"/>
     <uses-permission android:name="android.permission.VIBRATE"/>
@@ -131,8 +128,6 @@ by a child template that "extends" this file.
     <uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" />
     <uses-permission android:name="com.android.launcher.permission.INSTALL_SHORTCUT"/>
 
-    <uses-permission android:name="com.google.android.apps.now.CURRENT_ACCOUNT_ACCESS" />
-
     {% block extra_uses_permissions %}
     {% endblock %}
 
@@ -564,15 +559,6 @@ by a child template that "extends" this file.
             TODO(crbug.com/1093292): investigate why
             @android:style/Theme.NoDisplay can't be used here.
         -->
-        <activity android:name="org.chromium.chrome.browser.sync.ui.SyncTrustedVaultProxyActivity"
-            android:theme="@style/Theme.MaterialComponents"
-            android:excludeFromRecents="true"
-            android:exported="false">
-        </activity>
-        <activity android:name="org.chromium.chrome.browser.sync.ui.PassphraseActivity"
-            android:theme="@style/Theme.Chromium.Activity"
-            android:autoRemoveFromRecents="true">
-        </activity>
         <activity android:name="org.chromium.chrome.browser.firstrun.LightweightFirstRunActivity"
             android:theme="@style/Theme.BrowserUI.AlertDialog.NoActionBar.DayNight"
             android:launchMode="singleInstance"
@@ -615,11 +601,6 @@ by a child template that "extends" this file.
             android:theme="@style/Theme.AppCompat.NoActionBar">
         </activity>
         {% endif %}
-        <activity android:name="org.chromium.chrome.browser.signin.SyncConsentActivity"
-            android:theme="@style/Theme.Chromium.DialogWhenLarge"
-            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|mcc|mnc|screenLayout|smallestScreenSize"
-            android:exported="false">
-        </activity>
         <activity android:name="org.chromium.chrome.browser.settings.SettingsActivity"
             android:theme="@style/Theme.Chromium.Settings"
             android:configChanges="orientation|keyboardHidden|keyboard|screenSize|mcc|mnc|screenLayout|smallestScreenSize"
diff --git a/chrome/android/java/res/xml/google_services_preferences.xml b/chrome/android/java/res/xml/google_services_preferences.xml
--- a/chrome/android/java/res/xml/google_services_preferences.xml
+++ b/chrome/android/java/res/xml/google_services_preferences.xml
@@ -21,16 +21,6 @@ found in the LICENSE file.
         android:key="metrics_settings"
         android:title="@string/manage_metrics_settings"
         android:fragment="org.chromium.chrome.browser.metrics_settings.MetricsSettingsFragment"/>
-    <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
-        android:key="url_keyed_anonymized_data"
-        android:title="@string/url_keyed_anonymized_data_title"
-        android:summary="@string/url_keyed_anonymized_data_summary"
-        android:persistent="false"/>
-    <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
-        android:key="search_suggestions"
-        android:title="@string/improve_search_suggestions_title"
-        android:summary="@string/improve_search_suggestions_summary"
-        android:persistent="false"/>
     <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
         android:key="price_tracking_annotations"
         android:title="@string/track_prices_on_tabs"
diff --git a/chrome/android/java/res/xml/main_preferences.xml b/chrome/android/java/res/xml/main_preferences.xml
--- a/chrome/android/java/res/xml/main_preferences.xml
+++ b/chrome/android/java/res/xml/main_preferences.xml
@@ -9,29 +9,11 @@ found in the LICENSE file.
     xmlns:app="http://schemas.android.com/apk/res-auto"
     android:orderingFromXml="false">
 
-    <org.chromium.chrome.browser.sync.settings.SyncPromoPreference
-        android:key="sync_promo"
-        android:order="0"/>
     <PreferenceCategory
         android:key="account_and_google_services_section"
         android:order="1"
-        android:title="@string/prefs_section_account_and_google_services"/>
-    <org.chromium.chrome.browser.sync.settings.SignInPreference
-        android:key="sign_in"
-        android:order="2"
-        android:title="@string/sign_in_to_chrome"/>
-    <org.chromium.components.browser_ui.settings.ChromeBasePreference
-        android:key="manage_sync"
-        android:order="3"
-        android:layout="@layout/account_management_account_row"
-        android:title="@string/sync_category_title"/>
-    <org.chromium.components.browser_ui.settings.ChromeBasePreference
-        android:key="google_services"
-        android:order="4"
-        android:layout="@layout/account_management_account_row"
-        android:title="@string/prefs_google_services"
-        android:icon="@drawable/ic_google_services_48dp"
-        android:fragment="org.chromium.chrome.browser.sync.settings.GoogleServicesSettings"/>
+        android:title="@string/prefs_section_account_and_google_services"
+        app:isPreferenceVisible="false" />
 
     <PreferenceCategory
         android:key="basics_section"
diff --git a/chrome/android/java/res/xml/manage_sync_preferences.xml b/chrome/android/java/res/xml/manage_sync_preferences.xml
--- a/chrome/android/java/res/xml/manage_sync_preferences.xml
+++ b/chrome/android/java/res/xml/manage_sync_preferences.xml
@@ -87,16 +87,4 @@ found in the LICENSE file.
         android:key="sync_review_data"
         android:title="@string/sync_review_data"/>
 
-    <!-- This category is only shown for advanced sync consent flow. -->
-    <PreferenceCategory
-        android:key="search_and_browse_category"
-        android:title="@string/search_and_browse_category"
-        app:isPreferenceVisible="false">
-
-        <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
-            android:key="url_keyed_anonymized_data"
-            android:title="@string/url_keyed_anonymized_data_title"
-            android:summary="@string/url_keyed_anonymized_data_summary"/>
-    </PreferenceCategory>
-
 </PreferenceScreen>
diff --git a/chrome/android/java/res/xml/privacy_preferences.xml b/chrome/android/java/res/xml/privacy_preferences.xml
--- a/chrome/android/java/res/xml/privacy_preferences.xml
+++ b/chrome/android/java/res/xml/privacy_preferences.xml
@@ -54,8 +54,4 @@ found in the LICENSE file.
         android:title="@string/cablev2_paask_title"
         android:summary="@string/cablev2_paask_body"
         android:fragment="org.chromium.chrome.browser.webauthn.PrivacySettingsFragment"/>
-    <org.chromium.components.browser_ui.settings.TextMessagePreference
-        android:key="sync_and_services_link"
-        android:summary="@string/privacy_sync_and_services_link_legacy"
-        app:allowDividerBelow="false"/>
 </PreferenceScreen>
diff --git a/chrome/android/java/res/xml/privacy_preferences_v2.xml b/chrome/android/java/res/xml/privacy_preferences_v2.xml
--- a/chrome/android/java/res/xml/privacy_preferences_v2.xml
+++ b/chrome/android/java/res/xml/privacy_preferences_v2.xml
@@ -70,8 +70,4 @@ found in the LICENSE file.
         android:key="can_make_payment"
         android:title="@string/can_make_payment_title"
         android:summary="@string/settings_can_make_payment_toggle_label" />
-    <org.chromium.components.browser_ui.settings.TextMessagePreference
-        android:key="sync_and_services_link"
-        android:summary="@string/privacy_sync_and_services_link_legacy"
-        app:allowDividerBelow="false" />
 </PreferenceScreen>
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/AppHooks.java b/chrome/android/java/src/org/chromium/chrome/browser/AppHooks.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/AppHooks.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/AppHooks.java
@@ -32,8 +32,6 @@ import org.chromium.chrome.browser.password_manager.GooglePasswordManagerUIProvi
 import org.chromium.chrome.browser.policy.PolicyAuditor;
 import org.chromium.chrome.browser.rlz.RevenueStats;
 import org.chromium.chrome.browser.survey.SurveyController;
-import org.chromium.chrome.browser.sync.TrustedVaultClient;
-import org.chromium.chrome.browser.ui.signin.GoogleActivityController;
 import org.chromium.chrome.browser.usage_stats.DigitalWellbeingClient;
 import org.chromium.chrome.browser.webapps.GooglePlayWebApkInstallDelegate;
 import org.chromium.chrome.browser.xsurface.ProcessScope;
@@ -41,8 +39,6 @@ import org.chromium.chrome.browser.xsurface.ProcessScopeDependencyProvider;
 import org.chromium.chrome.modules.image_editor.ImageEditorModuleProvider;
 import org.chromium.components.policy.AppRestrictionsProvider;
 import org.chromium.components.policy.CombinedPolicyProvider;
-import org.chromium.components.signin.AccountManagerDelegate;
-import org.chromium.components.signin.SystemAccountManagerDelegate;
 import org.chromium.components.webapps.AppDetailsDelegate;
 
 import java.util.Collections;
@@ -73,14 +69,6 @@ public abstract class AppHooks {
         return sInstance;
     }
 
-    /**
-     * Creates a new {@link AccountManagerDelegate}.
-     * @return the created {@link AccountManagerDelegate}.
-     */
-    public AccountManagerDelegate createAccountManagerDelegate() {
-        return new SystemAccountManagerDelegate();
-    }
-
     /**
      * @return An instance of AppDetailsDelegate that can be queried about app information for the
      *         App Banner feature.  Will be null if one is unavailable.
@@ -128,21 +116,6 @@ public abstract class AppHooks {
         return new FeedbackReporter() {};
     }
 
-    /**
-     * @return An instance of GoogleActivityController.
-     */
-    public GoogleActivityController createGoogleActivityController() {
-        return new GoogleActivityController();
-    }
-
-    /**
-     * @return An instance of {@link GSAHelper} that handles the start point of chrome's integration
-     *         with GSA.
-     */
-    public GSAHelper createGsaHelper() {
-        return new GSAHelper();
-    }
-
     /**
      * Returns a new instance of HelpAndFeedbackLauncher.
      */
@@ -252,13 +225,6 @@ public abstract class AppHooks {
                                              : ConnectionResult.SUCCESS;
     }
 
-    /**
-     * Returns a new {@link TrustedVaultClient.Backend} instance.
-     */
-    public TrustedVaultClient.Backend createSyncTrustedVaultClientBackend() {
-        return new TrustedVaultClient.EmptyBackend();
-    }
-
     /**
      * This is deprecated, and should not be called. Use FeedHooks instead.
      */
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/ChromeBackupAgentImpl.java b/chrome/android/java/src/org/chromium/chrome/browser/ChromeBackupAgentImpl.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/ChromeBackupAgentImpl.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ChromeBackupAgentImpl.java
@@ -28,7 +28,6 @@ import org.chromium.chrome.browser.init.AsyncInitTaskRunner;
 import org.chromium.chrome.browser.init.ChromeBrowserInitializer;
 import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
 import org.chromium.components.signin.AccountManagerFacadeProvider;
 import org.chromium.components.signin.AccountUtils;
 import org.chromium.components.signin.base.CoreAccountInfo;
@@ -179,7 +178,6 @@ public class ChromeBackupAgentImpl extends ChromeBackupAgent.Impl {
             ParcelFileDescriptor newState) throws IOException {
         final ArrayList<String> backupNames = new ArrayList<>();
         final ArrayList<byte[]> backupValues = new ArrayList<>();
-        final AtomicReference<CoreAccountInfo> syncAccount = new AtomicReference<>();
 
         // The native preferences can only be read on the UI thread.
         Boolean nativePrefsRead = PostTask.runSynchronously(TaskTraits.UI_DEFAULT, () -> {
@@ -188,10 +186,6 @@ public class ChromeBackupAgentImpl extends ChromeBackupAgent.Impl {
             // immediately, so by the time it does Chrome may not be running.
             if (!initializeBrowser()) return false;
 
-            syncAccount.set(IdentityServicesProvider.get()
-                                    .getIdentityManager(Profile.getLastUsedRegularProfile())
-                                    .getPrimaryAccountInfo(ConsentLevel.SYNC));
-
             String[] nativeBackupNames = ChromeBackupAgentImplJni.get().getBoolBackupNames(this);
             boolean[] nativeBackupValues = ChromeBackupAgentImplJni.get().getBoolBackupValues(this);
             assert nativeBackupNames.length == nativeBackupValues.length;
@@ -245,8 +239,7 @@ public class ChromeBackupAgentImpl extends ChromeBackupAgent.Impl {
 
         // Finally add the user id.
         backupNames.add(ANDROID_DEFAULT_PREFIX + SIGNED_IN_ACCOUNT_KEY);
-        backupValues.add(ApiCompatibilityUtils.getBytesUtf8(
-                syncAccount.get() == null ? "" : syncAccount.get().getEmail()));
+        backupValues.add(ApiCompatibilityUtils.getBytesUtf8(""));
 
         BackupState newBackupState = new BackupState(backupNames, backupValues);
 
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/ChromeBackupWatcher.java b/chrome/android/java/src/org/chromium/chrome/browser/ChromeBackupWatcher.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/ChromeBackupWatcher.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ChromeBackupWatcher.java
@@ -16,7 +16,6 @@ import org.chromium.base.annotations.JNINamespace;
 import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
 import org.chromium.components.signin.identitymanager.IdentityManager;
 import org.chromium.components.signin.identitymanager.PrimaryAccountChangeEvent;
 
@@ -57,15 +56,6 @@ public class ChromeBackupWatcher {
                 }
             }
         });
-        // Update the backup if the sign-in status changes.
-        IdentityManager identityManager = IdentityServicesProvider.get().getIdentityManager(
-                Profile.getLastUsedRegularProfile());
-        identityManager.addObserver(new IdentityManager.Observer() {
-            @Override
-            public void onPrimaryAccountChanged(PrimaryAccountChangeEvent eventDetails) {
-                onBackupPrefsChanged();
-            }
-        });
     }
 
     @CalledByNative
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java
@@ -88,7 +88,6 @@ import org.chromium.chrome.browser.download.DownloadUtils;
 import org.chromium.chrome.browser.feature_engagement.TrackerFactory;
 import org.chromium.chrome.browser.feature_guide.notifications.FeatureNotificationUtils;
 import org.chromium.chrome.browser.feed.FeedSurfaceTracker;
-import org.chromium.chrome.browser.firstrun.FirstRunSignInProcessor;
 import org.chromium.chrome.browser.flags.ActivityType;
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.flags.ChromeSwitches;
@@ -138,7 +137,6 @@ import org.chromium.chrome.browser.settings.SettingsLauncherImpl;
 import org.chromium.chrome.browser.share.send_tab_to_self.SendTabToSelfAndroidBridge;
 import org.chromium.chrome.browser.suggestions.SuggestionsMetrics;
 import org.chromium.chrome.browser.survey.ChromeSurveyController;
-import org.chromium.chrome.browser.sync.ui.SyncErrorMessage;
 import org.chromium.chrome.browser.tab.EmptyTabObserver;
 import org.chromium.chrome.browser.tab.RedirectHandlerTabHelper;
 import org.chromium.chrome.browser.tab.Tab;
@@ -661,10 +659,6 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
     }
 
     private void refreshSignIn() {
-        try (TraceEvent e = TraceEvent.scoped("ChromeTabbedActivity.refreshSignIn")) {
-            FirstRunSignInProcessor.openSyncSettingsIfScheduled(this);
-            BackupSigninProcessor.start(this);
-        }
     }
 
     private void setupCompositorContentPreNativeForPhone() {
@@ -1905,9 +1899,6 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
                     Tab tab, NavigationHandle navigation) {
                 if (!navigation.hasCommitted()) return;
 
-                try (TraceEvent e = TraceEvent.scoped("CheckSyncErrorOnDidFinishNavigation")) {
-                    SyncErrorMessage.maybeShowMessageUi(getWindowAndroid());
-                }
                 try (TraceEvent te = TraceEvent.scoped("updateActiveWebContents")) {
                     SendTabToSelfAndroidBridge.updateActiveWebContents(tab.getWebContents());
                 }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
@@ -104,7 +104,6 @@ import org.chromium.chrome.browser.download.DownloadUtils;
 import org.chromium.chrome.browser.download.items.OfflineContentAggregatorNotificationBridgeUiFactory;
 import org.chromium.chrome.browser.feature_engagement.TrackerFactory;
 import org.chromium.chrome.browser.feedback.HelpAndFeedbackLauncherImpl;
-import org.chromium.chrome.browser.firstrun.ForcedSigninProcessor;
 import org.chromium.chrome.browser.flags.ActivityType;
 import org.chromium.chrome.browser.flags.CachedFeatureFlags;
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
@@ -150,7 +149,6 @@ import org.chromium.chrome.browser.share.ShareDelegate;
 import org.chromium.chrome.browser.share.ShareDelegateImpl;
 import org.chromium.chrome.browser.share.ShareDelegateSupplier;
 import org.chromium.chrome.browser.stylus_handwriting.StylusWritingCoordinator;
-import org.chromium.chrome.browser.sync.SyncService;
 import org.chromium.chrome.browser.tab.AccessibilityVisibilityHandler;
 import org.chromium.chrome.browser.tab.RequestDesktopUtils;
 import org.chromium.chrome.browser.tab.Tab;
@@ -212,8 +210,6 @@ import org.chromium.components.policy.CombinedPolicyProvider;
 import org.chromium.components.policy.CombinedPolicyProvider.PolicyChangeListener;
 import org.chromium.components.prefs.PrefService;
 import org.chromium.components.profile_metrics.BrowserProfileType;
-import org.chromium.components.sync.ModelType;
-import org.chromium.components.sync.PassphraseType;
 import org.chromium.components.user_prefs.UserPrefs;
 import org.chromium.components.webapk.lib.client.WebApkValidator;
 import org.chromium.components.webapps.AddToHomescreenCoordinator;
@@ -315,9 +311,6 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
     private boolean mRemoveWindowBackgroundDone;
     protected AccessibilityVisibilityHandler mAccessibilityVisibilityHandler;
 
-    // Observes when sync becomes ready to create the mContextReporter.
-    private SyncService.SyncStateChangedListener mSyncStateChangedListener;
-
     // The FullscreenVideoPictureInPictureController is initialized lazily https://crbug.com/729738.
     private FullscreenVideoPictureInPictureController mFullscreenVideoPictureInPictureController;
 
@@ -1076,60 +1069,6 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
         return StatusBarColorController.UNDEFINED_STATUS_BAR_COLOR;
     }
 
-    private void createContextReporterIfNeeded() {
-        if (!mStarted) return; // Sync state reporting should work only in started state.
-        if (mContextReporter != null || getActivityTab() == null) return;
-
-        final SyncService syncService = SyncService.get();
-
-        if (syncService != null && syncService.isSyncingUnencryptedUrls()) {
-            ContextReporter.SelectionReporter controller =
-                    getContextualSearchManagerSupplier().hasValue() ? new ContextReporter.SelectionReporter() {
-                        @Override
-                        public void enable(Callback<GSAContextDisplaySelection> callback) {
-                            getContextualSearchManagerSupplier().get().enableContextReporting(
-                                    callback);
-                        }
-
-                        @Override
-                        public void disable() {
-                            getContextualSearchManagerSupplier().get().disableContextReporting();
-                        }
-                    } : null;
-            mContextReporter = AppHooks.get().createGsaHelper().getContextReporter(
-                    getActivityTabProvider(), mTabModelSelectorSupplier, controller);
-
-            if (mSyncStateChangedListener != null) {
-                syncService.removeSyncStateChangedListener(mSyncStateChangedListener);
-                mSyncStateChangedListener = null;
-            }
-
-            return;
-        } else {
-            reportSyncStatus(syncService);
-        }
-
-        if (mSyncStateChangedListener == null && syncService != null) {
-            mSyncStateChangedListener = () -> createContextReporterIfNeeded();
-            syncService.addSyncStateChangedListener(mSyncStateChangedListener);
-        }
-    }
-
-    /** Records an appropriate status via UMA given the current sync status. */
-    private static void reportSyncStatus(@Nullable SyncService syncService) {
-        if (syncService == null || !syncService.isEngineInitialized()) {
-            ContextReporter.reportStatus(ContextReporter.STATUS_SYNC_NOT_INITIALIZED);
-        } else if (!syncService.getActiveDataTypes().contains(ModelType.TYPED_URLS)
-                && !syncService.getActiveDataTypes().contains(ModelType.HISTORY)) {
-            ContextReporter.reportStatus(ContextReporter.STATUS_SYNC_NOT_SYNCING_URLS);
-        } else if (syncService.getPassphraseType() != PassphraseType.KEYSTORE_PASSPHRASE
-                && syncService.getPassphraseType() != PassphraseType.TRUSTED_VAULT_PASSPHRASE) {
-            ContextReporter.reportStatus(ContextReporter.STATUS_SYNC_NOT_KEYSTORE_PASSPHRASE);
-        } else {
-            ContextReporter.reportStatus(ContextReporter.STATUS_SYNC_OTHER);
-        }
-    }
-
     @Override
     public void onResumeWithNative() {
         // First, update the activity type in order to have it properly captured in
@@ -1246,14 +1185,6 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
         if (GSAState.getInstance().isGsaAvailable() && !SysUtils.isLowEndDevice()) {
             if (mGSAAccountChangeListener != null) mGSAAccountChangeListener.disconnect();
         }
-        if (mSyncStateChangedListener != null) {
-            SyncService syncService = SyncService.get();
-            if (syncService != null) {
-                syncService.removeSyncStateChangedListener(mSyncStateChangedListener);
-            }
-            mSyncStateChangedListener = null;
-        }
-        if (mContextReporter != null) mContextReporter.disable();
 
         super.onStopWithNative();
     }
@@ -1335,11 +1266,6 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
                     .recordUserFontPrefOnStartup();
         });
 
-        DeferredStartupHandler.getInstance().addDeferredTask(() -> {
-            if (isActivityFinishingOrDestroyed()) return;
-            ForcedSigninProcessor.checkCanSignIn(ChromeActivity.this);
-        });
-
         // GSA connection is not needed on low-end devices because Icing is disabled.
         if (!SysUtils.isLowEndDevice()) {
             DeferredStartupHandler.getInstance().addDeferredTask(() -> {
@@ -1354,7 +1280,6 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
                             GSAAccountChangeListener.create(AppHooks.get().createGsaHelper());
                 }
                 mGSAAccountChangeListener.connect();
-                createContextReporterIfNeeded();
             });
         }
 
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/app/creator/CreatorActionDelegateImpl.java b/chrome/android/java/src/org/chromium/chrome/browser/app/creator/CreatorActionDelegateImpl.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/app/creator/CreatorActionDelegateImpl.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/app/creator/CreatorActionDelegateImpl.java
@@ -15,7 +15,6 @@ import org.chromium.chrome.browser.creator.CreatorCoordinator;
 import org.chromium.chrome.browser.feed.FeedActionDelegate;
 import org.chromium.chrome.browser.feed.signinbottomsheet.SigninBottomSheetCoordinator;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.SyncConsentActivityLauncherImpl;
 import org.chromium.chrome.browser.tab.TabLaunchType;
 import org.chromium.chrome.browser.tabmodel.document.TabDelegate;
 import org.chromium.chrome.browser.ui.messages.snackbar.SnackbarManager;
@@ -74,8 +73,6 @@ public class CreatorActionDelegateImpl implements FeedActionDelegate {
 
     @Override
     public void showSyncConsentActivity(int signinAccessPoint) {
-        SyncConsentActivityLauncherImpl.get().launchActivityIfAllowed(
-                mActivityContext, signinAccessPoint);
     }
 
     @Override
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/app/feed/FeedActionDelegateImpl.java b/chrome/android/java/src/org/chromium/chrome/browser/app/feed/FeedActionDelegateImpl.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/app/feed/FeedActionDelegateImpl.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/app/feed/FeedActionDelegateImpl.java
@@ -23,7 +23,6 @@ import org.chromium.chrome.browser.ntp.NewTabPageUma;
 import org.chromium.chrome.browser.offlinepages.OfflinePageBridge;
 import org.chromium.chrome.browser.offlinepages.RequestCoordinatorBridge;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.SyncConsentActivityLauncherImpl;
 import org.chromium.chrome.browser.signin.services.SigninMetricsUtils;
 import org.chromium.chrome.browser.suggestions.SuggestionsConfig;
 import org.chromium.chrome.browser.tab.EmptyTabObserver;
@@ -137,8 +136,6 @@ public class FeedActionDelegateImpl implements FeedActionDelegate {
     @Override
     public void showSyncConsentActivity(@SigninAccessPoint int signinAccessPoint) {
         if (ChromeFeatureList.isEnabled(ChromeFeatureList.FEED_SHOW_SIGN_IN_COMMAND)) {
-            SyncConsentActivityLauncherImpl.get().launchActivityIfAllowed(
-                    mActivityContext, signinAccessPoint);
         }
     }
 
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/autofill/settings/AddressEditor.java b/chrome/android/java/src/org/chromium/chrome/browser/autofill/settings/AddressEditor.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/autofill/settings/AddressEditor.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/autofill/settings/AddressEditor.java
@@ -24,14 +24,11 @@ import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.payments.AutofillAddress;
 import org.chromium.chrome.browser.payments.AutofillAddress.CompletenessCheckType;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
-import org.chromium.chrome.browser.sync.SyncService;
 import org.chromium.components.autofill.prefeditor.EditorFieldModel;
 import org.chromium.components.autofill.prefeditor.EditorFieldModel.EditorFieldValidator;
 import org.chromium.components.signin.base.CoreAccountInfo;
 import org.chromium.components.signin.identitymanager.ConsentLevel;
 import org.chromium.components.signin.identitymanager.IdentityManager;
-import org.chromium.components.sync.UserSelectableType;
 
 import java.util.HashMap;
 import java.util.HashSet;
@@ -159,13 +156,8 @@ public class AddressEditor extends EditorBase<AutofillAddress> {
         String deleteConfirmationTitle =
                 mContext.getString(R.string.autofill_delete_address_confirmation_dialog_title);
         if (mProfile.getSource() == Source.ACCOUNT) {
-            final IdentityManager identityManager =
-                    IdentityServicesProvider.get().getIdentityManager(
-                            Profile.getLastUsedRegularProfile());
-            CoreAccountInfo accountInfo =
-                    identityManager.getPrimaryAccountInfo(ConsentLevel.SIGNIN);
             @Nullable
-            String email = CoreAccountInfo.getEmailFrom(accountInfo);
+            String email = "";
 
             if (email != null) {
                 footerMessageText =
@@ -176,14 +168,8 @@ public class AddressEditor extends EditorBase<AutofillAddress> {
                                 .replace("$1", email);
             }
         } else {
-            if (SyncService.get().isSyncFeatureEnabled()
-                    && SyncService.get().getSelectedTypes().contains(UserSelectableType.AUTOFILL)) {
-                deleteConfirmationText =
-                        mContext.getString(R.string.autofill_delete_sync_address_source_notice);
-            } else {
                 deleteConfirmationText =
                         mContext.getString(R.string.autofill_delete_local_address_source_notice);
-            }
         }
 
         mEditor = new EditorModel(editTitle, mCustomDoneButtonText, footerMessageText,
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkListEntry.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkListEntry.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkListEntry.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkListEntry.java
@@ -23,15 +23,12 @@ public final class BookmarkListEntry {
      * Specifies the view types that the bookmark delegate screen can contain.
      */
     @Retention(RetentionPolicy.SOURCE)
-    @IntDef({ViewType.INVALID, ViewType.PERSONALIZED_SIGNIN_PROMO, ViewType.PERSONALIZED_SYNC_PROMO,
-            ViewType.SYNC_PROMO, ViewType.FOLDER, ViewType.BOOKMARK, ViewType.DIVIDER,
+    @IntDef({ViewType.INVALID,
+            ViewType.FOLDER, ViewType.BOOKMARK, ViewType.DIVIDER,
             ViewType.SECTION_HEADER, ViewType.SHOPPING_POWER_BOOKMARK, ViewType.TAG_CHIP_LIST,
             ViewType.SHOPPING_FILTER})
     public @interface ViewType {
         int INVALID = -1;
-        int PERSONALIZED_SIGNIN_PROMO = 0;
-        int PERSONALIZED_SYNC_PROMO = 1;
-        int SYNC_PROMO = 2;
         int FOLDER = 3;
         int BOOKMARK = 4;
         int DIVIDER = 5;
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerCoordinator.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerCoordinator.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerCoordinator.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerCoordinator.java
@@ -256,11 +256,6 @@ public class BookmarkManagerCoordinator
         }
 
         switch (viewType) {
-            case ViewType.PERSONALIZED_SIGNIN_PROMO:
-            case ViewType.PERSONALIZED_SYNC_PROMO:
-                return buildPersonalizedPromoView(parent);
-            case ViewType.SYNC_PROMO:
-                return buildLegacyPromoView(parent);
             case ViewType.SECTION_HEADER:
                 return buildSectionHeaderView(parent);
             case ViewType.FOLDER:
@@ -282,13 +277,6 @@ public class BookmarkManagerCoordinator
     public void bindView(View view, @ViewType int viewType, PropertyModel model) {
         ViewBinder<PropertyModel, View, PropertyKey> viewBinder = null;
         switch (viewType) {
-            case ViewType.PERSONALIZED_SIGNIN_PROMO:
-            case ViewType.PERSONALIZED_SYNC_PROMO:
-                viewBinder = BookmarkManagerViewBinder::bindPersonalizedPromoView;
-                break;
-            case ViewType.SYNC_PROMO:
-                viewBinder = BookmarkManagerViewBinder::bindLegacyPromoView;
-                break;
             case ViewType.SECTION_HEADER:
                 viewBinder = BookmarkManagerViewBinder::bindSectionHeaderView;
                 break;
@@ -313,14 +301,6 @@ public class BookmarkManagerCoordinator
         PropertyModelChangeProcessor.create(model, view, viewBinder);
     }
 
-    private View buildPersonalizedPromoView(ViewGroup parent) {
-        return mPromoHeaderManager.createPersonalizedSigninAndSyncPromoHolder(parent);
-    }
-
-    private View buildLegacyPromoView(ViewGroup parent) {
-        return mPromoHeaderManager.createSyncPromoHolder(parent);
-    }
-
     private View buildSectionHeaderView(ViewGroup parent) {
         return inflate(parent, org.chromium.chrome.R.layout.bookmark_section_header);
     }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerMediator.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerMediator.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerMediator.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerMediator.java
@@ -26,8 +26,6 @@ import org.chromium.chrome.browser.feature_engagement.TrackerFactory;
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.partnerbookmarks.PartnerBookmarksReader;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.sync.SyncService;
-import org.chromium.chrome.browser.sync.SyncService.SyncStateChangedListener;
 import org.chromium.chrome.browser.ui.native_page.BasicNativePage;
 import org.chromium.chrome.browser.ui.signin.SyncPromoController.SyncPromoState;
 import org.chromium.components.bookmarks.BookmarkId;
@@ -236,7 +234,6 @@ class BookmarkManagerMediator implements BookmarkDelegate, TestingDelegate,
             mBookmarkModel.removeObserver(mBookmarkModelObserver2);
             getSelectionDelegate().removeObserver(mSelectionObserver);
             mPromoHeaderManager.destroy();
-            mSyncService.removeSyncStateChangedListener(mSyncStateChangedListener);
         }
 
         @Override
@@ -285,20 +282,6 @@ class BookmarkManagerMediator implements BookmarkDelegate, TestingDelegate,
         }
     };
 
-    private final SyncStateChangedListener mSyncStateChangedListener =
-            new SyncStateChangedListener() {
-                @Override
-                public void syncStateChanged() {
-                    // If the bookmark model isn't loaded, we will set the top level folders on
-                    // load (see onBookmarkModelLoaded method below).
-                    if (!mBookmarkModel.isBookmarkModelLoaded()) {
-                        return;
-                    }
-                    mTopLevelFolders.clear();
-                    populateTopLevelFoldersList();
-                }
-            };
-
     private final ObserverList<BookmarkUiObserver> mUiObservers = new ObserverList<>();
     private final BookmarkDragStateDelegate mDragStateDelegate = new BookmarkDragStateDelegate();
     private final Context mContext;
@@ -320,7 +303,6 @@ class BookmarkManagerMediator implements BookmarkDelegate, TestingDelegate,
     private final ObservableSupplierImpl<Boolean> mBackPressStateSupplier;
     private final List<BookmarkId> mTopLevelFolders = new ArrayList<>();
     private final Profile mProfile;
-    private final SyncService mSyncService;
     private final BookmarkPromoHeader mPromoHeaderManager;
     private final BookmarkUndoController mBookmarkUndoController;
 
@@ -360,8 +342,6 @@ class BookmarkManagerMediator implements BookmarkDelegate, TestingDelegate,
         mIsIncognito = isIncognito;
         mBackPressStateSupplier = backPressStateSupplier;
         mProfile = profile;
-        mSyncService = SyncService.get();
-        mSyncService.addSyncStateChangedListener(mSyncStateChangedListener);
         // Notify the view of changes to the elements list as the promo might be showing.
         Runnable promoHeaderChangeAction = () -> updateHeader(true);
         mPromoHeaderManager = new BookmarkPromoHeader(mContext, mProfile, promoHeaderChangeAction);
@@ -494,10 +474,7 @@ class BookmarkManagerMediator implements BookmarkDelegate, TestingDelegate,
     public PropertyModel buildModel(ViewHolder holder, int position) {
         PropertyModel model = new PropertyModel(BookmarkManagerProperties.ALL_KEYS);
         final @ViewType int viewType = holder.getItemViewType();
-        if (viewType == ViewType.PERSONALIZED_SIGNIN_PROMO
-                || viewType == ViewType.PERSONALIZED_SYNC_PROMO) {
-            model.set(BookmarkManagerProperties.BOOKMARK_PROMO_HEADER, mPromoHeaderManager);
-        } else if (viewType == ViewType.SECTION_HEADER) {
+        if (viewType == ViewType.SECTION_HEADER) {
             model.set(BookmarkManagerProperties.BOOKMARK_LIST_ENTRY, getItemByPosition(position));
         } else if (BookmarkListEntry.isBookmarkEntry(viewType)) {
             BookmarkId id = getIdByPosition(position);
@@ -519,11 +496,6 @@ class BookmarkManagerMediator implements BookmarkDelegate, TestingDelegate,
     @Override
     public void recycleView(View view, @ViewType int viewType) {
         switch (viewType) {
-            case ViewType.PERSONALIZED_SIGNIN_PROMO:
-                // fall through
-            case ViewType.PERSONALIZED_SYNC_PROMO:
-                mPromoHeaderManager.detachPersonalizePromoView();
-                break;
             default:
                 // Other view holders don't have special recycling code.
         }
@@ -573,7 +545,6 @@ class BookmarkManagerMediator implements BookmarkDelegate, TestingDelegate,
 
     @Override
     public void simulateSignInForTesting() {
-        mSyncStateChangedListener.syncStateChanged();
         mBookmarkUiObserver.onFolderStateSet(mCurrentFolder);
     }
 
@@ -857,9 +828,6 @@ class BookmarkManagerMediator implements BookmarkDelegate, TestingDelegate,
         getElements().clear();
 
         // Restore the header, if it exists, then update it.
-        if (hasPromoHeader()) {
-            getElements().add(BookmarkListEntry.createSyncPromoHeader(mPromoHeaderType));
-        }
 
         updateHeader(false);
         if (BookmarkId.SHOPPING_FOLDER.equals(mCurrentFolder)) {
@@ -917,28 +885,12 @@ class BookmarkManagerMediator implements BookmarkDelegate, TestingDelegate,
         } else if (currentUiState == BookmarkUiMode.SEARCHING) {
             mPromoHeaderType = ViewType.INVALID;
         } else {
-            switch (mPromoHeaderManager.getPromoState()) {
-                case SyncPromoState.NO_PROMO:
-                    mPromoHeaderType = ViewType.INVALID;
-                    break;
-                case SyncPromoState.PROMO_FOR_SIGNED_OUT_STATE:
-                    mPromoHeaderType = ViewType.PERSONALIZED_SIGNIN_PROMO;
-                    break;
-                case SyncPromoState.PROMO_FOR_SIGNED_IN_STATE:
-                    mPromoHeaderType = ViewType.PERSONALIZED_SYNC_PROMO;
-                    break;
-                case SyncPromoState.PROMO_FOR_SYNC_TURNED_OFF_STATE:
-                    mPromoHeaderType = ViewType.SYNC_PROMO;
-                    break;
-                default:
-                    assert false : "Unexpected value for promo state!";
-            }
+            mPromoHeaderType = ViewType.INVALID;
         }
 
         boolean willShowPromo = hasPromoHeader();
         if (!wasShowingPromo && willShowPromo) {
             // A null element at the 0th index represents a promo header.
-            getElements().add(0, BookmarkListEntry.createSyncPromoHeader(mPromoHeaderType));
             if (shouldNotify) mBookmarkItemsAdapter.notifyItemInserted(0);
         } else if (wasShowingPromo && willShowPromo) {
             if (shouldNotify) mBookmarkItemsAdapter.notifyItemChanged(0);
@@ -1028,8 +980,4 @@ class BookmarkManagerMediator implements BookmarkDelegate, TestingDelegate,
     BookmarkUndoController getUndoControllerForTesting() {
         return mBookmarkUndoController;
     }
-
-    SyncStateChangedListener getSyncStateChangedListenerForTesting() {
-        return mSyncStateChangedListener;
-    }
 }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerViewBinder.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerViewBinder.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerViewBinder.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManagerViewBinder.java
@@ -20,17 +20,6 @@ import org.chromium.ui.modelutil.PropertyModel;
 
 /** Responsible for binding views to their properties. */
 class BookmarkManagerViewBinder {
-    static void bindPersonalizedPromoView(PropertyModel model, View view, PropertyKey key) {
-        if (key == BookmarkManagerProperties.BOOKMARK_PROMO_HEADER) {
-            PersonalizedSigninPromoView promoView =
-                    view.findViewById(org.chromium.chrome.R.id.signin_promo_view_container);
-            model.get(BookmarkManagerProperties.BOOKMARK_PROMO_HEADER)
-                    .setUpSyncPromoView(promoView);
-        }
-    }
-
-    static void bindLegacyPromoView(PropertyModel model, View view, PropertyKey key) {}
-
     static void bindSectionHeaderView(PropertyModel model, View view, PropertyKey key) {
         if (key == BookmarkManagerProperties.BOOKMARK_LIST_ENTRY) {
             BookmarkListEntry bookmarkListEntry =
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkPromoHeader.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkPromoHeader.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkPromoHeader.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkPromoHeader.java
@@ -4,246 +4,26 @@
 
 package org.chromium.chrome.browser.bookmarks;
 
-import android.content.Context;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import androidx.annotation.Nullable;
-import androidx.annotation.VisibleForTesting;
-
-import org.chromium.chrome.R;
-import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;
-import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.LegacySyncPromoView;
-import org.chromium.chrome.browser.signin.SyncConsentActivityLauncherImpl;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
-import org.chromium.chrome.browser.signin.services.ProfileDataCache;
-import org.chromium.chrome.browser.signin.services.SigninManager;
-import org.chromium.chrome.browser.signin.services.SigninManager.SignInStateObserver;
-import org.chromium.chrome.browser.sync.SyncService;
-import org.chromium.chrome.browser.ui.signin.PersonalizedSigninPromoView;
-import org.chromium.chrome.browser.ui.signin.SyncPromoController;
-import org.chromium.chrome.browser.ui.signin.SyncPromoController.SyncPromoState;
-import org.chromium.components.signin.AccountManagerFacade;
-import org.chromium.components.signin.AccountManagerFacadeProvider;
-import org.chromium.components.signin.AccountsChangeObserver;
-import org.chromium.components.signin.identitymanager.ConsentLevel;
-import org.chromium.components.signin.metrics.SigninAccessPoint;
+
+import android.content.Context;
 
 /**
  * Class that manages all the logic and UI behind the signin promo header in the bookmark
  * content UI. The header is shown only on certain situations, (e.g., not signed in).
  */
-public class BookmarkPromoHeader implements SyncService.SyncStateChangedListener,
-                                            SignInStateObserver, ProfileDataCache.Observer,
-                                            AccountsChangeObserver {
+public class BookmarkPromoHeader {
     // TODO(kkimlabs): Figure out the optimal number based on UMA data.
     private static final int MAX_SIGNIN_AND_SYNC_PROMO_SHOW_COUNT = 10;
 
-    private static @Nullable @SyncPromoState Integer sPromoStateForTests;
-
-    private final Context mContext;
-    private final SigninManager mSigninManager;
-    private final AccountManagerFacade mAccountManagerFacade;
-    private final Runnable mPromoHeaderChangeAction;
-
-    private @Nullable ProfileDataCache mProfileDataCache;
-    private final @Nullable SyncPromoController mSyncPromoController;
-    private @SyncPromoState int mPromoState = SyncPromoState.NO_PROMO;
-    private final @Nullable SyncService mSyncService;
-    private final Profile mProfile;
-
     /**
      * Initializes the class. Note that this will start listening to signin related events and
      * update itself if needed.
      */
-    BookmarkPromoHeader(Context context, Profile profile, Runnable promoHeaderChangeAction) {
-        mContext = context;
-        mProfile = profile;
-        mPromoHeaderChangeAction = promoHeaderChangeAction;
-
-        mSyncService = SyncService.get();
-        if (mSyncService != null) mSyncService.addSyncStateChangedListener(this);
-
-        mSigninManager = IdentityServicesProvider.get().getSigninManager(mProfile);
-        mSigninManager.addSignInStateObserver(this);
-
-        mAccountManagerFacade = AccountManagerFacadeProvider.getInstance();
-
-        if (SyncPromoController.canShowSyncPromo(SigninAccessPoint.BOOKMARK_MANAGER)) {
-            mProfileDataCache = ProfileDataCache.createWithDefaultImageSizeAndNoBadge(mContext);
-            mProfileDataCache.addObserver(this);
-            mSyncPromoController = new SyncPromoController(
-                    SigninAccessPoint.BOOKMARK_MANAGER, SyncConsentActivityLauncherImpl.get());
-            mAccountManagerFacade.addObserver(this);
-        } else {
-            mProfileDataCache = null;
-            mSyncPromoController = null;
-        }
-        updatePromoState();
-    }
+    BookmarkPromoHeader(Context context, Profile profile, Runnable promoHeaderChangeAction) {}
 
     /**
      * Clean ups the class. Must be called once done using this class.
      */
-    void destroy() {
-        if (mSyncService != null) mSyncService.removeSyncStateChangedListener(this);
-
-        if (mSyncPromoController != null) {
-            mAccountManagerFacade.removeObserver(this);
-            mProfileDataCache.removeObserver(this);
-        }
-
-        mSigninManager.removeSignInStateObserver(this);
-    }
-
-    /**
-     * @return The current state of the promo.
-     */
-    @SyncPromoState
-    int getPromoState() {
-        return mPromoState;
-    }
-
-    /** Returns personalized signin promo header {@link View}. */
-    View createPersonalizedSigninAndSyncPromoHolder(ViewGroup parent) {
-        return LayoutInflater.from(mContext).inflate(
-                R.layout.sync_promo_view_bookmarks, parent, false);
-    }
-
-    /** Returns sync promo header {@link View}. */
-    View createSyncPromoHolder(ViewGroup parent) {
-        return LegacySyncPromoView.create(parent, SigninAccessPoint.BOOKMARK_MANAGER);
-    }
-
-    /**
-     * Sets up the sync promo view.
-     */
-    void setUpSyncPromoView(PersonalizedSigninPromoView view) {
-        mSyncPromoController.setUpSyncPromoView(
-                mProfileDataCache, view, this::setPersonalizedSigninPromoDeclined);
-    }
-
-    /**
-     * Detaches the previously configured {@link PersonalizedSigninPromoView}.
-     */
-    void detachPersonalizePromoView() {
-        if (mSyncPromoController != null) mSyncPromoController.detach();
-    }
-
-    /**
-     * Saves that the personalized signin promo was declined and updates the UI.
-     */
-    private void setPersonalizedSigninPromoDeclined() {
-        mPromoState = calculatePromoState();
-        triggerPromoUpdate();
-    }
-
-    /**
-     * @return Whether the personalized signin promo should be shown to user.
-     */
-    private boolean shouldShowBookmarkSigninPromo() {
-        return mSigninManager.isSyncOptInAllowed()
-                && SyncPromoController.canShowSyncPromo(SigninAccessPoint.BOOKMARK_MANAGER);
-    }
-
-    private @SyncPromoState int calculatePromoState() {
-        if (sPromoStateForTests != null) {
-            return sPromoStateForTests;
-        }
-
-        if (mSyncService == null) {
-            // |mSyncService| will remain null until the next browser startup, so no sense in
-            // offering any promo.
-            return SyncPromoState.NO_PROMO;
-        }
-
-        if (!mSigninManager.getIdentityManager().hasPrimaryAccount(ConsentLevel.SYNC)) {
-            if (!shouldShowBookmarkSigninPromo()) {
-                return SyncPromoState.NO_PROMO;
-            }
-
-            return mSigninManager.getIdentityManager().hasPrimaryAccount(ConsentLevel.SIGNIN)
-                    ? SyncPromoState.PROMO_FOR_SIGNED_IN_STATE
-                    : SyncPromoState.PROMO_FOR_SIGNED_OUT_STATE;
-        }
-
-        boolean impressionLimitNotReached =
-                SharedPreferencesManager.getInstance().readInt(
-                        ChromePreferenceKeys.SIGNIN_AND_SYNC_PROMO_SHOW_COUNT)
-                < MAX_SIGNIN_AND_SYNC_PROMO_SHOW_COUNT;
-        if ((!mSyncService.isSyncRequested() || mSyncService.getSelectedTypes().isEmpty())
-                && impressionLimitNotReached) {
-            return SyncPromoState.PROMO_FOR_SYNC_TURNED_OFF_STATE;
-        }
-        return SyncPromoState.NO_PROMO;
-    }
-
-    private void updatePromoState() {
-        final @SyncPromoState int newState = calculatePromoState();
-        if (newState == mPromoState) return;
-
-        // PROMO_SYNC state and it's impression counts is not tracked by SyncPromoController.
-        final boolean hasSyncPromoStateChangedtoShown =
-                (mPromoState == SyncPromoState.NO_PROMO
-                        || mPromoState == SyncPromoState.PROMO_FOR_SYNC_TURNED_OFF_STATE)
-                && (newState == SyncPromoState.PROMO_FOR_SIGNED_OUT_STATE
-                        || newState == SyncPromoState.PROMO_FOR_SIGNED_IN_STATE);
-        if (mSyncPromoController != null && hasSyncPromoStateChangedtoShown) {
-            mSyncPromoController.increasePromoShowCount();
-        }
-        if (newState == SyncPromoState.PROMO_FOR_SYNC_TURNED_OFF_STATE) {
-            SharedPreferencesManager.getInstance().incrementInt(
-                    ChromePreferenceKeys.SIGNIN_AND_SYNC_PROMO_SHOW_COUNT);
-        }
-        mPromoState = newState;
-    }
-
-    // SyncService.SyncStateChangedListener implementation.
-    @Override
-    public void syncStateChanged() {
-        updatePromoState();
-        triggerPromoUpdate();
-    }
-
-    // SignInStateObserver implementation.
-    @Override
-    public void onSignedIn() {
-        updatePromoState();
-        triggerPromoUpdate();
-    }
-
-    @Override
-    public void onSignedOut() {
-        updatePromoState();
-        triggerPromoUpdate();
-    }
-
-    // ProfileDataCache.Observer implementation.
-    @Override
-    public void onProfileDataUpdated(String accountEmail) {
-        triggerPromoUpdate();
-    }
-
-    // AccountsChangeObserver implementation.
-    @Override
-    public void onAccountsChanged() {
-        triggerPromoUpdate();
-    }
-
-    private void triggerPromoUpdate() {
-        detachPersonalizePromoView();
-        mPromoHeaderChangeAction.run();
-    }
-
-    /**
-     * Forces the promo state to a particular value for testing purposes.
-     * @param promoState The promo state to which the header will be set to.
-     */
-    @VisibleForTesting
-    public static void forcePromoStateForTesting(@Nullable @SyncPromoState Integer promoState) {
-        sPromoStateForTests = promoState;
-    }
+    void destroy() {}
 }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/browsing_data/ClearBrowsingDataFragment.java b/chrome/android/java/src/org/chromium/chrome/browser/browsing_data/ClearBrowsingDataFragment.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/browsing_data/ClearBrowsingDataFragment.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/browsing_data/ClearBrowsingDataFragment.java
@@ -37,17 +37,10 @@ import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.quick_delete.QuickDeleteController;
 import org.chromium.chrome.browser.settings.ProfileDependentSetting;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
-import org.chromium.chrome.browser.signin.services.SigninManager;
-import org.chromium.chrome.browser.sync.settings.ClearDataProgressDialog;
-import org.chromium.chrome.browser.ui.signin.SignOutDialogCoordinator;
-import org.chromium.chrome.browser.ui.signin.SignOutDialogCoordinator.ActionType;
 import org.chromium.components.browser_ui.settings.ClickableSpansTextMessagePreference;
 import org.chromium.components.browser_ui.settings.CustomDividerFragment;
 import org.chromium.components.browser_ui.settings.SettingsUtils;
 import org.chromium.components.browser_ui.settings.SpinnerPreference;
-import org.chromium.components.signin.GAIAServiceType;
-import org.chromium.components.signin.identitymanager.ConsentLevel;
 import org.chromium.components.user_prefs.UserPrefs;
 import org.chromium.ui.modaldialog.ModalDialogManagerHolder;
 import org.chromium.ui.text.NoUnderlineClickableSpan;
@@ -69,7 +62,6 @@ import java.util.Set;
 public abstract class ClearBrowsingDataFragment extends PreferenceFragmentCompat
         implements BrowsingDataBridge.OnClearBrowsingDataListener,
                    Preference.OnPreferenceClickListener, Preference.OnPreferenceChangeListener,
-                   SignOutDialogCoordinator.Listener, SigninManager.SignInStateObserver,
                    CustomDividerFragment, ProfileDependentSetting {
     private static final String CLEAR_DATA_PROGRESS_DIALOG_TAG = "clear_data_progress";
 
@@ -232,8 +224,6 @@ public abstract class ClearBrowsingDataFragment extends PreferenceFragmentCompat
     private OtherFormsOfHistoryDialogFragment mDialogAboutOtherFormsOfBrowsingHistory;
 
     private Profile mProfile;
-    private SigninManager mSigninManager;
-
     private ProgressDialog mProgressDialog;
     private Item[] mItems;
     private ClearBrowsingDataFetcher mFetcher;
@@ -569,7 +559,6 @@ public abstract class ClearBrowsingDataFragment extends PreferenceFragmentCompat
         }
         getActivity().setTitle(R.string.clear_browsing_data_title);
         SettingsUtils.addPreferencesFromResource(this, R.xml.clear_browsing_data_preferences_tab);
-        mSigninManager = IdentityServicesProvider.get().getSigninManager(mProfile);
         List<Integer> options = getDialogOptions();
         mItems = new Item[options.size()];
         for (int i = 0; i < options.size(); i++) {
@@ -615,11 +604,6 @@ public abstract class ClearBrowsingDataFragment extends PreferenceFragmentCompat
         assert spinnerOptionIndex != -1;
         spinner.setOptions(spinnerOptions, spinnerOptionIndex);
         spinner.setOnPreferenceChangeListener(this);
-
-        // Text for sign-out option.
-        updateSignOutOfChromeText();
-
-        mSigninManager.addSignInStateObserver(this);
     }
 
     @Override
@@ -668,7 +652,6 @@ public abstract class ClearBrowsingDataFragment extends PreferenceFragmentCompat
         for (Item item : mItems) {
             item.destroy();
         }
-        mSigninManager.removeSignInStateObserver(this);
     }
 
     // We either show the dialog, or modify the current one to display our messages.  This avoids
@@ -694,27 +677,7 @@ public abstract class ClearBrowsingDataFragment extends PreferenceFragmentCompat
     private void updateSignOutOfChromeText() {
         ClickableSpansTextMessagePreference signOutOfChromeTextPref =
                 findPreference(ClearBrowsingDataFragment.PREF_SIGN_OUT_OF_CHROME_TEXT);
-        if (mSigninManager.isSignOutAllowed()) {
-            signOutOfChromeTextPref.setSummary(buildSignOutOfChromeText());
-            signOutOfChromeTextPref.setVisible(true);
-        } else {
             signOutOfChromeTextPref.setVisible(false);
-        }
-    }
-
-    @VisibleForTesting
-    SpannableString buildSignOutOfChromeText() {
-        return SpanApplier.applySpans(getContext().getString(R.string.sign_out_of_chrome_link),
-                new SpanInfo("<link1>", "</link1>",
-                        new NoUnderlineClickableSpan(
-                                requireContext(), createSignOutOfChromeCallback())));
-    }
-
-    private Callback<View> createSignOutOfChromeCallback() {
-        return view
-                -> SignOutDialogCoordinator.show(requireContext(),
-                        ((ModalDialogManagerHolder) getActivity()).getModalDialogManager(), this,
-                        ActionType.CLEAR_PRIMARY_ACCOUNT, GAIAServiceType.GAIA_SERVICE_TYPE_NONE);
     }
 
     /**
@@ -779,43 +742,4 @@ public abstract class ClearBrowsingDataFragment extends PreferenceFragmentCompat
                     ignoredDomains, ignoredDomainReasons);
         }
     }
-
-    /** {@link SignOutDialogCoordinator.Listener} implementation */
-    @Override
-    public void onSignOutClicked(boolean forceWipeUserData) {
-        // In case the user is not signed in, we guard the sign out so we do not hit a native crash.
-        if (!mSigninManager.getIdentityManager().hasPrimaryAccount(ConsentLevel.SIGNIN)) {
-            return;
-        }
-        mSigninManager.runAfterOperationInProgress(() -> {
-            // In case supervised users reach this flow, remove the preference and guard against
-            // signing out.
-            if (!mSigninManager.isSignOutAllowed()) {
-                updateSignOutOfChromeText();
-                return;
-            }
-            final DialogFragment clearDataProgressDialog = new ClearDataProgressDialog();
-            mSigninManager.signOut(org.chromium.components.signin.metrics.SignoutReason
-                                           .USER_CLICKED_SIGNOUT_FROM_CLEAR_BROWSING_DATA_PAGE,
-                    new SigninManager.SignOutCallback() {
-                        @Override
-                        public void preWipeData() {
-                            clearDataProgressDialog.show(
-                                    getChildFragmentManager(), CLEAR_DATA_PROGRESS_DIALOG_TAG);
-                        }
-
-                        @Override
-                        public void signOutComplete() {
-                            clearDataProgressDialog.dismissAllowingStateLoss();
-                        }
-                    },
-                    forceWipeUserData);
-        });
-    }
-
-    /** {@link SigninManager.SignInStateObserver} implementation. */
-    @Override
-    public void onSignOutAllowedChanged() {
-        updateSignOutOfChromeText();
-    }
 }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/browsing_data/ClearBrowsingDataFragmentBasic.java b/chrome/android/java/src/org/chromium/chrome/browser/browsing_data/ClearBrowsingDataFragmentBasic.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/browsing_data/ClearBrowsingDataFragmentBasic.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/browsing_data/ClearBrowsingDataFragmentBasic.java
@@ -23,16 +23,12 @@ import org.chromium.base.metrics.RecordUserAction;
 import org.chromium.chrome.R;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.search_engines.TemplateUrlServiceFactory;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
-import org.chromium.chrome.browser.sync.SyncService;
 import org.chromium.chrome.browser.tab.TabLaunchType;
 import org.chromium.chrome.browser.tabmodel.document.TabDelegate;
 import org.chromium.components.browser_ui.settings.ClickableSpansTextMessagePreference;
 import org.chromium.components.embedder_support.util.UrlConstants;
 import org.chromium.components.search_engines.TemplateUrl;
 import org.chromium.components.search_engines.TemplateUrlService;
-import org.chromium.components.signin.identitymanager.ConsentLevel;
-import org.chromium.components.signin.identitymanager.IdentityManager;
 import org.chromium.components.sync.ModelType;
 import org.chromium.ui.text.NoUnderlineClickableSpan;
 import org.chromium.ui.text.SpanApplier;
@@ -89,28 +85,12 @@ public class ClearBrowsingDataFragmentBasic extends ClearBrowsingDataFragment {
             new TabDelegate(false /* incognito */)
                     .launchUrl(UrlConstants.MY_ACTIVITY_URL_IN_CBD, TabLaunchType.FROM_CHROME_UI);
         });
-
-        IdentityManager identityManager =
-                IdentityServicesProvider.get().getIdentityManager(getProfile());
-        if (identityManager.hasPrimaryAccount(ConsentLevel.SIGNIN)) {
-            // Update the Clear Browsing History text based on the sign-in/sync state and whether
-            // the link to MyActivity is displayed inline or at the bottom of the page.
-            // Note: when  sync is disabled, the default string is used.
-            if (isHistorySyncEnabled()) {
-                // The text is different only for users with history sync.
-                historyCheckbox.setSummary(R.string.clear_browsing_history_summary_synced_no_link);
-            }
-            cookiesCheckbox.setSummary(
-                    R.string.clear_cookies_and_site_data_summary_basic_signed_in);
-        }
     }
 
     @Override
     public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
         super.onCreatePreferences(savedInstanceState, rootKey);
         Profile profile = getProfile();
-        IdentityManager identityManager =
-                IdentityServicesProvider.get().getIdentityManager(profile);
         ClickableSpansTextMessagePreference googleDataTextPref =
                 (ClickableSpansTextMessagePreference) findPreference(
                         ClearBrowsingDataFragment.PREF_GOOGLE_DATA_TEXT);
@@ -121,8 +101,7 @@ public class ClearBrowsingDataFragmentBasic extends ClearBrowsingDataFragment {
         boolean isDefaultSearchEngineGoogle = templateUrlService.isDefaultSearchEngineGoogle();
 
         // Google-related links to delete search history and other browsing activity.
-        if (defaultSearchEngine == null
-                || !identityManager.hasPrimaryAccount(ConsentLevel.SIGNIN)) {
+        if (defaultSearchEngine == null) {
             // One of two cases:
             // 1. The default search engine is disabled.
             // 2. The user is not signed into Chrome.
@@ -225,9 +204,7 @@ public class ClearBrowsingDataFragmentBasic extends ClearBrowsingDataFragment {
     }
 
     private boolean isHistorySyncEnabled() {
-        SyncService syncService = SyncService.get();
-        return syncService != null && syncService.isSyncFeatureEnabled()
-                && syncService.getActiveDataTypes().contains(ModelType.HISTORY_DELETE_DIRECTIVES);
+        return false;
     }
 
     @Override
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/contacts_picker/ChromePickerAdapter.java b/chrome/android/java/src/org/chromium/chrome/browser/contacts_picker/ChromePickerAdapter.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/contacts_picker/ChromePickerAdapter.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/contacts_picker/ChromePickerAdapter.java
@@ -15,16 +15,8 @@ import androidx.recyclerview.widget.RecyclerView;
 
 import org.chromium.chrome.R;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.services.DisplayableProfileData;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
-import org.chromium.chrome.browser.signin.services.ProfileDataCache;
 import org.chromium.components.browser_ui.contacts_picker.ContactDetails;
 import org.chromium.components.browser_ui.contacts_picker.PickerAdapter;
-import org.chromium.components.signin.AccountManagerFacadeProvider;
-import org.chromium.components.signin.AccountUtils;
-import org.chromium.components.signin.base.CoreAccountInfo;
-import org.chromium.components.signin.identitymanager.ConsentLevel;
-import org.chromium.components.signin.identitymanager.IdentityManager;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -35,10 +27,7 @@ import java.util.Collections;
  * Owner email is looked up in the {@link ProfileDataCache}, or, failing that, via the {@link
  * AccountManagerFacade}.
  */
-public class ChromePickerAdapter extends PickerAdapter implements ProfileDataCache.Observer {
-    // The profile data cache to consult when figuring out the signed in user.
-    private ProfileDataCache mProfileDataCache;
-
+public class ChromePickerAdapter extends PickerAdapter {
     // Whether an observer for ProfileDataCache has been registered.
     private boolean mObserving;
 
@@ -46,8 +35,6 @@ public class ChromePickerAdapter extends PickerAdapter implements ProfileDataCac
     private boolean mWaitingOnOwnerInfo;
 
     public ChromePickerAdapter(Context context) {
-        mProfileDataCache =
-                ProfileDataCache.createWithoutBadge(context, R.dimen.contact_picker_icon_size);
     }
 
     // Adapter:
@@ -64,38 +51,15 @@ public class ChromePickerAdapter extends PickerAdapter implements ProfileDataCac
         removeProfileDataObserver();
     }
 
-    // ProfileDataCache.Observer:
-
-    @Override
-    public void onProfileDataUpdated(String accountEmail) {
-        if (!mWaitingOnOwnerInfo || !TextUtils.equals(accountEmail, getOwnerEmail())) {
-            return;
-        }
-
-        // Now that we've received an update for the right accountId, we can stop listening and
-        // update our records.
-        mWaitingOnOwnerInfo = false;
-        removeProfileDataObserver();
-        // TODO(finnur): crbug.com/1021477 - Maintain an member instance of this.
-        DisplayableProfileData profileData =
-                mProfileDataCache.getProfileDataOrDefault(getOwnerEmail());
-        ContactDetails contact = getAllContacts().get(0);
-        Drawable icon = profileData.getImage();
-        contact.setSelfIcon(icon);
-        update();
-    }
-
     private void addProfileDataObserver() {
         if (!mObserving) {
             mObserving = true;
-            mProfileDataCache.addObserver(this);
         }
     }
 
     private void removeProfileDataObserver() {
         if (mObserving) {
             mObserving = false;
-            mProfileDataCache.removeObserver(this);
         }
     }
 
@@ -107,13 +71,7 @@ public class ChromePickerAdapter extends PickerAdapter implements ProfileDataCac
      */
     @Override
     protected String findOwnerEmail() {
-        CoreAccountInfo coreAccountInfo = getCoreAccountInfo();
-        if (coreAccountInfo != null) {
-            return coreAccountInfo.getEmail();
-        }
-        final @Nullable Account defaultAccount = AccountUtils.getDefaultAccountIfFulfilled(
-                AccountManagerFacadeProvider.getInstance().getAccounts());
-        return defaultAccount != null ? defaultAccount.name : null;
+        return null;
     }
 
     @Override
@@ -134,25 +92,8 @@ public class ChromePickerAdapter extends PickerAdapter implements ProfileDataCac
      */
     @SuppressLint("HardwareIds")
     private ContactDetails constructOwnerInfo(String ownerEmail) {
-        DisplayableProfileData profileData = mProfileDataCache.getProfileDataOrDefault(ownerEmail);
-        String name = profileData.getFullNameOrEmail();
-        if (TextUtils.isEmpty(name) || TextUtils.equals(name, ownerEmail)) {
-            name = CoreAccountInfo.getEmailFrom(getCoreAccountInfo());
-        }
-
-        ContactDetails contact = new ContactDetails(ContactDetails.SELF_CONTACT_ID, name,
+        ContactDetails contact = new ContactDetails(ContactDetails.SELF_CONTACT_ID, ownerEmail,
                 Collections.singletonList(ownerEmail), /*phoneNumbers=*/null, /*addresses=*/null);
-        Drawable icon = profileData.getImage();
-        contact.setIsSelf(true);
-        contact.setSelfIcon(icon);
-        return contact;
-    }
-
-    private CoreAccountInfo getCoreAccountInfo() {
-        // Since this is read-only operation to obtain email address, always using regular profile
-        // for both regular and off-the-record profile is safe.
-        IdentityManager identityManager = IdentityServicesProvider.get().getIdentityManager(
-                Profile.getLastUsedRegularProfile());
-        return identityManager.getPrimaryAccountInfo(ConsentLevel.SYNC);
+        return null;
     }
 }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/customtabs/CustomTabActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/customtabs/CustomTabActivity.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/customtabs/CustomTabActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/customtabs/CustomTabActivity.java
@@ -28,7 +28,6 @@ import androidx.browser.customtabs.CustomTabsSessionToken;
 import org.chromium.base.IntentUtils;
 import org.chromium.base.metrics.RecordUserAction;
 import org.chromium.chrome.R;
-import org.chromium.chrome.browser.BackupSigninProcessor;
 import org.chromium.chrome.browser.LaunchIntentDispatcher;
 import org.chromium.chrome.browser.app.metrics.LaunchCauseMetrics;
 import org.chromium.chrome.browser.browserservices.intents.BrowserServicesIntentDataProvider;
@@ -37,7 +36,6 @@ import org.chromium.chrome.browser.customtabs.content.CustomTabActivityTabProvid
 import org.chromium.chrome.browser.customtabs.dependency_injection.BaseCustomTabActivityComponent;
 import org.chromium.chrome.browser.customtabs.features.CustomTabNavigationBarController;
 import org.chromium.chrome.browser.dependency_injection.ChromeActivityCommonsModule;
-import org.chromium.chrome.browser.firstrun.FirstRunSignInProcessor;
 import org.chromium.chrome.browser.flags.AllCachedFieldTrialParameters;
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.fonts.FontPreloader;
@@ -157,11 +155,6 @@ public class CustomTabActivity extends BaseCustomTabActivity {
 
     @Override
     public void finishNativeInitialization() {
-        if (!mIntentDataProvider.isInfoPage()) {
-            FirstRunSignInProcessor.openSyncSettingsIfScheduled(this);
-            BackupSigninProcessor.start(this);
-        }
-
         mConnection.showSignInToastIfNecessary(mSession, getIntent());
 
         new CustomTabTrustedCdnPublisherUrlVisibility(
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/firstrun/LightweightFirstRunActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/firstrun/LightweightFirstRunActivity.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/firstrun/LightweightFirstRunActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/firstrun/LightweightFirstRunActivity.java
@@ -86,9 +86,7 @@ public class LightweightFirstRunActivity
                     return;
                 }
 
-                boolean isChild = freProperties.getBoolean(
-                        SyncConsentFirstRunFragment.IS_CHILD_ACCOUNT, false);
-                initializeViews(isChild);
+                initializeViews(false);
             }
         };
         mFirstRunFlowSequencer.start();
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/history/HistoryContentManager.java b/chrome/android/java/src/org/chromium/chrome/browser/history/HistoryContentManager.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/history/HistoryContentManager.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/history/HistoryContentManager.java
@@ -35,8 +35,6 @@ import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.preferences.PrefChangeRegistrar;
 import org.chromium.chrome.browser.preferences.PrefChangeRegistrar.PrefObserver;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
-import org.chromium.chrome.browser.signin.services.SigninManager.SignInStateObserver;
 import org.chromium.chrome.browser.tab.Tab;
 import org.chromium.chrome.browser.tab.TabLaunchType;
 import org.chromium.chrome.browser.tabmodel.document.TabDelegate;
@@ -58,7 +56,7 @@ import java.util.function.Function;
 /**
  * Displays and manages the content view / list UI for browsing history.
  */
-public class HistoryContentManager implements SignInStateObserver, PrefObserver {
+public class HistoryContentManager implements PrefObserver {
     /**
      * Interface for a class that wants to receive updates from this Manager.
      */
@@ -229,11 +227,6 @@ public class HistoryContentManager implements SignInStateObserver, PrefObserver
         mHistoryAdapter.generateHeaderItems();
         mHistoryAdapter.generateFooterItems();
 
-        // Listen to changes in sign in state.
-        IdentityServicesProvider.get()
-                .getSigninManager(Profile.getLastUsedRegularProfile())
-                .addSignInStateObserver(this);
-
         // Create PrefChangeRegistrar to receive notifications on preference changes.
         mPrefChangeRegistrar = new PrefChangeRegistrar();
         mPrefChangeRegistrar.addObserver(Pref.ALLOW_DELETING_BROWSER_HISTORY, this);
@@ -267,9 +260,6 @@ public class HistoryContentManager implements SignInStateObserver, PrefObserver
         mHistoryAdapter.onDestroyed();
         mLargeIconBridge.destroy();
         mLargeIconBridge = null;
-        IdentityServicesProvider.get()
-                .getSigninManager(Profile.getLastUsedRegularProfile())
-                .removeSignInStateObserver(this);
         mPrefChangeRegistrar.destroy();
     }
 
@@ -499,22 +489,9 @@ public class HistoryContentManager implements SignInStateObserver, PrefObserver
         mHistoryAdapter.removeHeader();
     }
 
-    @Override
-    public void onSignedIn() {
-        mObserver.onUserAccountStateChanged();
-        mHistoryAdapter.onSignInStateChange();
-    }
-
-    @Override
-    public void onSignedOut() {
-        mObserver.onUserAccountStateChanged();
-        mHistoryAdapter.onSignInStateChange();
-    }
-
     @Override
     public void onPreferenceChange() {
         mObserver.onUserAccountStateChanged();
-        mHistoryAdapter.onSignInStateChange();
     }
 
     /**
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/identity_disc/IdentityDiscController.java b/chrome/android/java/src/org/chromium/chrome/browser/identity_disc/IdentityDiscController.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/identity_disc/IdentityDiscController.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/identity_disc/IdentityDiscController.java
@@ -25,10 +25,7 @@ import org.chromium.chrome.browser.ntp.NewTabPage;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.settings.MainSettings;
 import org.chromium.chrome.browser.settings.SettingsLauncherImpl;
-import org.chromium.chrome.browser.signin.SyncConsentActivityLauncherImpl;
 import org.chromium.chrome.browser.signin.services.DisplayableProfileData;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
-import org.chromium.chrome.browser.signin.services.ProfileDataCache;
 import org.chromium.chrome.browser.signin.services.SigninManager;
 import org.chromium.chrome.browser.tab.Tab;
 import org.chromium.chrome.browser.tasks.ReturnToChromeUtil;
@@ -45,29 +42,19 @@ import org.chromium.components.feature_engagement.EventConstants;
 import org.chromium.components.feature_engagement.FeatureConstants;
 import org.chromium.components.feature_engagement.Tracker;
 import org.chromium.components.signin.base.CoreAccountInfo;
-import org.chromium.components.signin.identitymanager.ConsentLevel;
-import org.chromium.components.signin.identitymanager.IdentityManager;
-import org.chromium.components.signin.identitymanager.PrimaryAccountChangeEvent;
 import org.chromium.components.signin.metrics.SigninAccessPoint;
 
 /**
  * Handles displaying IdentityDisc on toolbar depending on several conditions
  * (user sign-in state, whether NTP is shown)
  */
-public class IdentityDiscController implements NativeInitObserver, ProfileDataCache.Observer,
-                                               IdentityManager.Observer, ButtonDataProvider {
+public class IdentityDiscController implements NativeInitObserver, ButtonDataProvider {
     // Context is used for fetching resources and launching preferences page.
     private final Context mContext;
     private ActivityLifecycleDispatcher mActivityLifecycleDispatcher;
     private final ObservableSupplier<Profile> mProfileSupplier;
     private final Callback<Profile> mProfileSupplierObserver = this::setProfile;
 
-    // We observe IdentityManager to receive primary account state change notifications.
-    private IdentityManager mIdentityManager;
-
-    // ProfileDataCache facilitates retrieving profile picture.
-    private ProfileDataCache mProfileDataCache;
-
     // Whether the identity disc is visible.
     private boolean mIsIdentityDiscShown;
 
@@ -198,22 +185,13 @@ public class IdentityDiscController implements NativeInitObserver, ProfileDataCa
      * IdentityDiscController for profile data updates.
      */
     private void ensureProfileDataCache(boolean isIdentityDiscShown) {
-        if (!isIdentityDiscShown || mProfileDataCache != null) return;
-
-        mProfileDataCache =
-                ProfileDataCache.createWithoutBadge(mContext, R.dimen.toolbar_identity_disc_size);
-        mProfileDataCache.addObserver(this);
     }
 
     /**
      * Returns Profile picture Drawable. The size of the image corresponds to current visual state.
      */
     private Drawable getProfileImage(@Nullable String email) {
-        assert mIsIdentityDiscShown;
-        if (shouldUseSignedOutAvatar(email)) {
-            return AppCompatResources.getDrawable(mContext, R.drawable.account_circle);
-        }
-        return mProfileDataCache.getProfileDataOrDefault(email).getImage();
+        return null;
     }
 
     /**
@@ -221,11 +199,6 @@ public class IdentityDiscController implements NativeInitObserver, ProfileDataCa
      * when sign-in state changes.
      */
     private void resetIdentityDiscCache() {
-        if (mProfileDataCache != null) {
-            assert mIsIdentityDiscShown;
-            mProfileDataCache.removeObserver(this);
-            mProfileDataCache = null;
-        }
     }
 
     private void notifyObservers(boolean hint) {
@@ -234,47 +207,6 @@ public class IdentityDiscController implements NativeInitObserver, ProfileDataCa
         }
     }
 
-    /**
-     * Called after profile image becomes available. Updates the image on toolbar button.
-     */
-    @Override
-    public void onProfileDataUpdated(String accountEmail) {
-        if (!mIsIdentityDiscShown) return;
-        assert mProfileDataCache != null;
-
-        if (accountEmail.equals(CoreAccountInfo.getEmailFrom(getSignedInAccountInfo()))) {
-            /**
-             * We need to call {@link notifyObservers(false)} before caling
-             * {@link notifyObservers(true)}. This is because {@link notifyObservers(true)} has been
-             * called in {@link setProfile()}, and without calling {@link notifyObservers(false)},
-             * the ObservableSupplierImpl doesn't propagate the call. See https://cubug.com/1137535.
-             */
-            notifyObservers(false);
-            notifyObservers(true);
-        }
-    }
-
-    /**
-     * Implements {@link IdentityManager.Observer}.
-     *
-     * IdentityDisc should be shown as long as the user is signed in or IDENTITY_STATUS_CONSISTENCY
-     * is enabled. Whether the user is syncing or not should not matter.
-     */
-    @Override
-    public void onPrimaryAccountChanged(PrimaryAccountChangeEvent eventDetails) {
-        switch (eventDetails.getEventTypeFor(ConsentLevel.SIGNIN)) {
-            case PrimaryAccountChangeEvent.Type.SET:
-                notifyObservers(true);
-                break;
-            case PrimaryAccountChangeEvent.Type.CLEARED:
-                resetIdentityDiscCache();
-                notifyObservers(false);
-                break;
-            case PrimaryAccountChangeEvent.Type.NONE:
-                break;
-        }
-    }
-
     /**
      * Call to tear down dependencies.
      */
@@ -285,16 +217,6 @@ public class IdentityDiscController implements NativeInitObserver, ProfileDataCa
             mActivityLifecycleDispatcher = null;
         }
 
-        if (mProfileDataCache != null) {
-            mProfileDataCache.removeObserver(this);
-            mProfileDataCache = null;
-        }
-
-        if (mIdentityManager != null) {
-            mIdentityManager.removeObserver(this);
-            mIdentityManager = null;
-        }
-
         if (mNativeIsInitialized) {
             mProfileSupplier.removeObserver(mProfileSupplierObserver);
         }
@@ -320,9 +242,7 @@ public class IdentityDiscController implements NativeInitObserver, ProfileDataCa
      * @return account info for the current profile. Returns null for OTR profile.
      */
     private CoreAccountInfo getSignedInAccountInfo() {
-        return mIdentityManager != null
-                ? mIdentityManager.getPrimaryAccountInfo(ConsentLevel.SIGNIN)
-                : null;
+        return null;
     }
 
     /**
@@ -330,17 +250,6 @@ public class IdentityDiscController implements NativeInitObserver, ProfileDataCa
      * mIdentityManager is updated with the profile, as set to null if profile is off-the-record.
      */
     private void setProfile(Profile profile) {
-        if (mIdentityManager != null) {
-            mIdentityManager.removeObserver(this);
-        }
-
-        if (profile.isOffTheRecord()) {
-            mIdentityManager = null;
-        } else {
-            mIdentityManager = IdentityServicesProvider.get().getIdentityManager(profile);
-            mIdentityManager.addObserver(this);
-            notifyObservers(true);
-        }
     }
 
     private String getContentDescription(@Nullable String email) {
@@ -352,16 +261,8 @@ public class IdentityDiscController implements NativeInitObserver, ProfileDataCa
             return mContext.getString(R.string.accessibility_toolbar_btn_signed_out_identity_disc);
         }
 
-        DisplayableProfileData profileData = mProfileDataCache.getProfileDataOrDefault(email);
-        String userName = profileData.getFullName();
-        if (profileData.hasDisplayableEmailAddress()) {
-            return mContext.getString(
-                    R.string.accessibility_toolbar_btn_identity_disc_with_name_and_email, userName,
-                    email);
-        }
-
         return mContext.getString(
-                R.string.accessibility_toolbar_btn_identity_disc_with_name, userName);
+                R.string.accessibility_toolbar_btn_identity_disc_with_name, "");
     }
 
     @VisibleForTesting
@@ -371,20 +272,13 @@ public class IdentityDiscController implements NativeInitObserver, ProfileDataCa
         }
         recordIdentityDiscUsed();
 
-        SigninManager signinManager = IdentityServicesProvider.get().getSigninManager(
-                Profile.getLastUsedRegularProfile());
-        if (getSignedInAccountInfo() == null && !signinManager.isSigninDisabledByPolicy()) {
-            SyncConsentActivityLauncherImpl.get().launchActivityIfAllowed(
-                    mContext, SigninAccessPoint.NTP_SIGNED_OUT_ICON);
-        } else {
-            SettingsLauncher settingsLauncher = new SettingsLauncherImpl();
-            settingsLauncher.launchSettingsActivity(mContext, MainSettings.class);
-        }
+        SettingsLauncher settingsLauncher = new SettingsLauncherImpl();
+        settingsLauncher.launchSettingsActivity(mContext, MainSettings.class);
     }
 
     @VisibleForTesting
     boolean isProfileDataCacheEmpty() {
-        return mProfileDataCache == null;
+        return true;
     }
 
     private static boolean shouldUseSignedOutAvatar(@Nullable String email) {
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/init/ChromeBrowserInitializer.java b/chrome/android/java/src/org/chromium/chrome/browser/init/ChromeBrowserInitializer.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/init/ChromeBrowserInitializer.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/init/ChromeBrowserInitializer.java
@@ -36,7 +36,6 @@ import org.chromium.chrome.browser.download.DownloadManagerService;
 import org.chromium.chrome.browser.flags.ChromeSwitches;
 import org.chromium.chrome.browser.language.GlobalAppLocaleController;
 import org.chromium.chrome.browser.metrics.UmaUtils;
-import org.chromium.chrome.browser.signin.SigninCheckerProvider;
 import org.chromium.chrome.browser.webapps.ChromeWebApkHost;
 import org.chromium.components.background_task_scheduler.BackgroundTaskSchedulerFactory;
 import org.chromium.components.crash.browser.ChildProcessCrashObserver;
@@ -355,7 +354,6 @@ public class ChromeBrowserInitializer {
             getBrowserStartupController().startBrowserProcessesSync(
                     LibraryProcessType.PROCESS_BROWSER, /*singleProcess=*/false,
                     /*startGpuProcess=*/startGpuProcess);
-            SigninCheckerProvider.get();
         } finally {
             TraceEvent.end("ChromeBrowserInitializer.startChromeBrowserProcessesSync");
         }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/init/ProcessInitializationHandler.java b/chrome/android/java/src/org/chromium/chrome/browser/init/ProcessInitializationHandler.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/init/ProcessInitializationHandler.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/init/ProcessInitializationHandler.java
@@ -80,7 +80,6 @@ import org.chromium.chrome.browser.query_tiles.QueryTileUtils;
 import org.chromium.chrome.browser.quickactionsearchwidget.QuickActionSearchWidgetProvider;
 import org.chromium.chrome.browser.rlz.RevenueStats;
 import org.chromium.chrome.browser.searchwidget.SearchWidgetProvider;
-import org.chromium.chrome.browser.signin.SigninCheckerProvider;
 import org.chromium.chrome.browser.tab.state.PersistedTabData;
 import org.chromium.chrome.browser.tab.state.ShoppingPersistedTabData;
 import org.chromium.chrome.browser.ui.searchactivityutils.SearchActivityPreferencesManager;
@@ -99,8 +98,6 @@ import org.chromium.components.crash.anr.AnrCollector;
 import org.chromium.components.embedder_support.util.UrlUtilities;
 import org.chromium.components.minidump_uploader.CrashFileManager;
 import org.chromium.components.optimization_guide.proto.HintsProto;
-import org.chromium.components.signin.AccountManagerFacadeImpl;
-import org.chromium.components.signin.AccountManagerFacadeProvider;
 import org.chromium.components.version_info.Channel;
 import org.chromium.components.version_info.VersionConstants;
 import org.chromium.components.version_info.VersionInfo;
@@ -177,11 +174,6 @@ public class ProcessInitializationHandler {
     protected void handlePreNativeInitialization() {
         Context application = ContextUtils.getApplicationContext();
 
-        // Initialize the AccountManagerFacade with the correct AccountManagerDelegate. Must be done
-        // only once and before AccountManagerFacadeProvider.getInstance() is invoked.
-        AccountManagerFacadeProvider.setInstance(
-                new AccountManagerFacadeImpl(AppHooks.get().createAccountManagerDelegate()));
-
         setProcessStateSummaryForAnrs(false);
     }
 
@@ -386,7 +378,6 @@ public class ProcessInitializationHandler {
         deferredStartupHandler.addDeferredTask(new Runnable() {
             @Override
             public void run() {
-                SigninCheckerProvider.get().onMainActivityStart();
                 RevenueStats.getInstance();
             }
         });
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/ntp/RecentTabsManager.java b/chrome/android/java/src/org/chromium/chrome/browser/ntp/RecentTabsManager.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/ntp/RecentTabsManager.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ntp/RecentTabsManager.java
@@ -15,24 +15,11 @@ import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.recent_tabs.ForeignSessionHelper;
 import org.chromium.chrome.browser.recent_tabs.ForeignSessionHelper.ForeignSession;
 import org.chromium.chrome.browser.recent_tabs.ForeignSessionHelper.ForeignSessionTab;
-import org.chromium.chrome.browser.signin.SyncConsentActivityLauncherImpl;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
-import org.chromium.chrome.browser.signin.services.ProfileDataCache;
-import org.chromium.chrome.browser.signin.services.SigninManager;
-import org.chromium.chrome.browser.signin.services.SigninManager.SignInStateObserver;
-import org.chromium.chrome.browser.sync.SyncService;
 import org.chromium.chrome.browser.tab.Tab;
 import org.chromium.chrome.browser.tabmodel.TabModel;
 import org.chromium.chrome.browser.tabmodel.TabModelSelector;
 import org.chromium.chrome.browser.ui.favicon.FaviconHelper;
 import org.chromium.chrome.browser.ui.favicon.FaviconHelper.FaviconImageCallback;
-import org.chromium.chrome.browser.ui.signin.PersonalizedSigninPromoView;
-import org.chromium.chrome.browser.ui.signin.SyncPromoController;
-import org.chromium.chrome.browser.ui.signin.SyncPromoController.SyncPromoState;
-import org.chromium.components.signin.AccountManagerFacadeProvider;
-import org.chromium.components.signin.AccountsChangeObserver;
-import org.chromium.components.signin.identitymanager.ConsentLevel;
-import org.chromium.components.signin.metrics.SigninAccessPoint;
 import org.chromium.url.GURL;
 
 import java.util.HashMap;
@@ -42,8 +29,7 @@ import java.util.Map;
 /**
  * Provides the domain logic and data for RecentTabsPage and RecentTabsRowAdapter.
  */
-public class RecentTabsManager implements SyncService.SyncStateChangedListener, SignInStateObserver,
-                                          ProfileDataCache.Observer, AccountsChangeObserver {
+public class RecentTabsManager {
     /**
      * Implement this to receive updates when the page contents change.
      */
@@ -64,21 +50,15 @@ public class RecentTabsManager implements SyncService.SyncStateChangedListener,
     private final Runnable mShowHistoryManager;
 
     private TabModel mTabModel;
-    private @SyncPromoState int mPromoState = SyncPromoState.NO_PROMO;
     private FaviconHelper mFaviconHelper;
     private ForeignSessionHelper mForeignSessionHelper;
     private List<ForeignSession> mForeignSessions;
     private List<RecentlyClosedEntry> mRecentlyClosedEntries;
     private RecentTabsPagePrefs mPrefs;
     private RecentlyClosedTabManager mRecentlyClosedTabManager;
-    private SigninManager mSignInManager;
     private UpdatedCallback mUpdatedCallback;
     private boolean mIsDestroyed;
 
-    private final ProfileDataCache mProfileDataCache;
-    private final SyncPromoController mSyncPromoController;
-    private final SyncService mSyncService;
-
     /**
      * Maps Session IDs to whether that entry was restored split by entry type. These are used to
      * record historgrams on {@link #destroy()} to measure restore ratio. Cached Session IDs are
@@ -109,12 +89,6 @@ public class RecentTabsManager implements SyncService.SyncStateChangedListener,
         mRecentlyClosedTabManager = sRecentlyClosedTabManagerForTests != null
                 ? sRecentlyClosedTabManagerForTests
                 : new RecentlyClosedBridge(profile, tabModelSelector);
-        mSignInManager = IdentityServicesProvider.get().getSigninManager(mProfile);
-
-        mProfileDataCache = ProfileDataCache.createWithDefaultImageSizeAndNoBadge(context);
-        mSyncPromoController = new SyncPromoController(
-                SigninAccessPoint.RECENT_TABS, SyncConsentActivityLauncherImpl.get());
-        mSyncService = SyncService.get();
 
         mRecentlyClosedTabManager.setEntriesUpdatedRunnable(this::updateRecentlyClosedEntries);
         updateRecentlyClosedEntries();
@@ -123,12 +97,6 @@ public class RecentTabsManager implements SyncService.SyncStateChangedListener,
         updateForeignSessions();
         mForeignSessionHelper.triggerSessionSync();
 
-        mSyncService.addSyncStateChangedListener(this);
-        mSignInManager.addSignInStateObserver(this);
-        mProfileDataCache.addObserver(this);
-        AccountManagerFacadeProvider.getInstance().addObserver(this);
-        updatePromoState();
-
         SessionsInvalidationManager.get(mProfile).onRecentTabsPageOpened();
     }
 
@@ -166,14 +134,6 @@ public class RecentTabsManager implements SyncService.SyncStateChangedListener,
         recordEntries("Group", mGroupSessionIdsRestored);
         recordEntries("Bulk", mBulkSessionIdsRestored);
 
-        mSyncService.removeSyncStateChangedListener(this);
-
-        mSignInManager.removeSignInStateObserver(this);
-        mSignInManager = null;
-
-        mProfileDataCache.removeObserver(this);
-        AccountManagerFacadeProvider.getInstance().removeObserver(this);
-
         mFaviconHelper.destroy();
         mFaviconHelper = null;
 
@@ -392,97 +352,13 @@ public class RecentTabsManager implements SyncService.SyncStateChangedListener,
         mRecentlyClosedTabManager.clearRecentlyClosedEntries();
     }
 
-    /**
-     * Collapse the promo.
-     *
-     * @param isCollapsed Whether the promo is collapsed.
-     */
-    public void setPromoCollapsed(boolean isCollapsed) {
-        if (mIsDestroyed) return;
-        mPrefs.setSyncPromoCollapsed(isCollapsed);
-    }
-
     /**
      * Determine whether the promo is collapsed.
      *
      * @return Whether the promo is collapsed.
      */
     public boolean isPromoCollapsed() {
-        return mPrefs.getSyncPromoCollapsed();
-    }
-
-    /** Returns the current promo state. */
-    @SyncPromoState
-    int getPromoState() {
-        return mPromoState;
-    }
-
-    private @SyncPromoState int calculatePromoState() {
-        if (!mSignInManager.getIdentityManager().hasPrimaryAccount(ConsentLevel.SYNC)) {
-            if (!mSignInManager.isSyncOptInAllowed()) {
-                return SyncPromoState.NO_PROMO;
-            }
-            if (mSignInManager.getIdentityManager().hasPrimaryAccount(ConsentLevel.SIGNIN)) {
-                return SyncPromoState.PROMO_FOR_SIGNED_IN_STATE;
-            }
-            return SyncPromoState.PROMO_FOR_SIGNED_OUT_STATE;
-        }
-
-        if (mSyncService.isSyncRequested() && !mForeignSessions.isEmpty()) {
-            return SyncPromoState.NO_PROMO;
-        }
-        return SyncPromoState.PROMO_FOR_SYNC_TURNED_OFF_STATE;
-    }
-
-    private void updatePromoState() {
-        final @SyncPromoState int newState = calculatePromoState();
-        if (newState == mPromoState) return;
-
-        final boolean hasSyncPromoStateChangedtoShown =
-                (mPromoState == SyncPromoState.NO_PROMO
-                        || mPromoState == SyncPromoState.PROMO_FOR_SYNC_TURNED_OFF_STATE)
-                && (newState == SyncPromoState.PROMO_FOR_SIGNED_IN_STATE
-                        || newState == SyncPromoState.PROMO_FOR_SIGNED_OUT_STATE);
-        if (hasSyncPromoStateChangedtoShown) {
-            mSyncPromoController.increasePromoShowCount();
-        }
-        mPromoState = newState;
-    }
-
-    /**
-     * Sets up the sync promo view.
-     */
-    void setUpSyncPromoView(PersonalizedSigninPromoView view) {
-        mSyncPromoController.setUpSyncPromoView(mProfileDataCache, view, null);
-    }
-
-    // SignInStateObserver implementation.
-    @Override
-    public void onSignedIn() {
-        update();
-    }
-
-    @Override
-    public void onSignedOut() {
-        update();
-    }
-
-    // AccountsChangeObserver implementation.
-    @Override
-    public void onAccountsChanged() {
-        update();
-    }
-
-    // ProfileDataCache.Observer implementation.
-    @Override
-    public void onProfileDataUpdated(String accountEmail) {
-        update();
-    }
-
-    // SyncService.SyncStateChangedListener implementation.
-    @Override
-    public void syncStateChanged() {
-        update();
+        return true;
     }
 
     private void onUpdateDone() {
@@ -492,7 +368,6 @@ public class RecentTabsManager implements SyncService.SyncStateChangedListener,
     }
 
     private void update() {
-        updatePromoState();
         if (mIsDestroyed) return;
         updateForeignSessions();
         onUpdateDone();
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/ntp/RecentTabsRowAdapter.java b/chrome/android/java/src/org/chromium/chrome/browser/ntp/RecentTabsRowAdapter.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/ntp/RecentTabsRowAdapter.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ntp/RecentTabsRowAdapter.java
@@ -29,11 +29,9 @@ import org.chromium.chrome.R;
 import org.chromium.chrome.browser.recent_tabs.ForeignSessionHelper.ForeignSession;
 import org.chromium.chrome.browser.recent_tabs.ForeignSessionHelper.ForeignSessionTab;
 import org.chromium.chrome.browser.recent_tabs.ForeignSessionHelper.ForeignSessionWindow;
-import org.chromium.chrome.browser.signin.LegacySyncPromoView;
 import org.chromium.chrome.browser.ui.favicon.FaviconHelper.DefaultFaviconHelper;
 import org.chromium.chrome.browser.ui.favicon.FaviconHelper.FaviconImageCallback;
 import org.chromium.chrome.browser.ui.favicon.FaviconUtils;
-import org.chromium.chrome.browser.ui.signin.SyncPromoController.SyncPromoState;
 import org.chromium.components.browser_ui.styles.SemanticColorUtils;
 import org.chromium.components.browser_ui.widget.RoundedIconGenerator;
 import org.chromium.components.embedder_support.util.UrlUtilities;
@@ -421,12 +419,11 @@ public class RecentTabsRowAdapter extends BaseExpandableListAdapter {
 
         @Override
         void setCollapsed(boolean isCollapsed) {
-            mRecentTabsManager.setPromoCollapsed(isCollapsed);
         }
 
         @Override
         boolean isCollapsed() {
-            return mRecentTabsManager.isPromoCollapsed();
+            return true;
         }
     }
 
@@ -451,13 +448,6 @@ public class RecentTabsRowAdapter extends BaseExpandableListAdapter {
         @Override
         View getChildView(
                 int childPosition, boolean isLastChild, View convertView, ViewGroup parent) {
-            if (convertView == null) {
-                LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
-                convertView =
-                        layoutInflater.inflate(R.layout.sync_promo_view_recent_tabs, parent, false);
-            }
-            mRecentTabsManager.setUpSyncPromoView(
-                    convertView.findViewById(R.id.signin_promo_view_container));
             return convertView;
         }
     }
@@ -474,9 +464,6 @@ public class RecentTabsRowAdapter extends BaseExpandableListAdapter {
         @Override
         View getChildView(
                 int childPosition, boolean isLastChild, View convertView, ViewGroup parent) {
-            if (convertView == null) {
-                convertView = LegacySyncPromoView.create(parent, SigninAccessPoint.RECENT_TABS);
-            }
             return convertView;
         }
     }
@@ -911,22 +898,6 @@ public class RecentTabsRowAdapter extends BaseExpandableListAdapter {
             addGroup(new ForeignSessionGroup(session));
         }
 
-        switch (mRecentTabsManager.getPromoState()) {
-            case SyncPromoState.NO_PROMO:
-                break;
-            case SyncPromoState.PROMO_FOR_SIGNED_OUT_STATE:
-                addGroup(new PersonalizedSyncPromoGroup(ChildType.PERSONALIZED_SIGNIN_PROMO));
-                break;
-            case SyncPromoState.PROMO_FOR_SIGNED_IN_STATE:
-                addGroup(new PersonalizedSyncPromoGroup(ChildType.PERSONALIZED_SYNC_PROMO));
-                break;
-            case SyncPromoState.PROMO_FOR_SYNC_TURNED_OFF_STATE:
-                addGroup(new SyncPromoGroup());
-                break;
-            default:
-                assert false : "Unexpected value for promo type!";
-        }
-
         // Add separator line after the recently closed tabs group.
         int recentlyClosedIndex = mGroups.indexOf(mRecentlyClosedTabsGroup);
         if (DeviceFormFactor.isNonMultiDisplayContextOnTablet(mActivity)) {
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/ntp/search/SearchBoxMediator.java b/chrome/android/java/src/org/chromium/chrome/browser/ntp/search/SearchBoxMediator.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/ntp/search/SearchBoxMediator.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ntp/search/SearchBoxMediator.java
@@ -25,7 +25,6 @@ import org.chromium.chrome.browser.omnibox.voice.AssistantVoiceSearchService;
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.search_engines.TemplateUrlServiceFactory;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
 import org.chromium.chrome.browser.ui.theme.BrandedColorScheme;
 import org.chromium.components.externalauth.ExternalAuthUtils;
 import org.chromium.components.signin.AccountManagerFacadeProvider;
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/omaha/RequestGenerator.java b/chrome/android/java/src/org/chromium/chrome/browser/omaha/RequestGenerator.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/omaha/RequestGenerator.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/omaha/RequestGenerator.java
@@ -34,9 +34,6 @@ public abstract class RequestGenerator {
     private static final String URL_OMAHA_SERVER = "https://update.googleapis.com/service/update2";
 
     protected RequestGenerator() {
-        UniqueIdentificationGeneratorFactory.registerGenerator(
-                SettingsSecureBasedIdentificationGenerator.GENERATOR_ID,
-                new SettingsSecureBasedIdentificationGenerator(), false);
     }
 
     /**
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/password_manager/AccountChooserDialog.java b/chrome/android/java/src/org/chromium/chrome/browser/password_manager/AccountChooserDialog.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/password_manager/AccountChooserDialog.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/password_manager/AccountChooserDialog.java
@@ -128,7 +128,7 @@ public class AccountChooserDialog
                 Drawable avatar = credential.getAvatar();
                 if (avatar == null) {
                     avatar = AppCompatResources.getDrawable(
-                            getContext(), R.drawable.logo_avatar_anonymous);
+                            getContext(), R.drawable.ic_help_and_feedback);
                 }
                 avatarView.setImageDrawable(avatar);
 
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/password_manager/AutoSigninSnackbarController.java b/chrome/android/java/src/org/chromium/chrome/browser/password_manager/AutoSigninSnackbarController.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/password_manager/AutoSigninSnackbarController.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/password_manager/AutoSigninSnackbarController.java
@@ -47,7 +47,7 @@ public class AutoSigninSnackbarController implements SnackbarManager.SnackbarCon
         Snackbar snackbar = Snackbar.make(
                 text, snackbarController, Snackbar.TYPE_NOTIFICATION, Snackbar.UMA_AUTO_LOGIN);
         int backgroundColor = SemanticColorUtils.getDefaultControlColorActive(activity);
-        Drawable icon = AppCompatResources.getDrawable(activity, R.drawable.logo_avatar_anonymous);
+        Drawable icon = AppCompatResources.getDrawable(activity, R.drawable.ic_help_and_feedback);
         snackbar.setSingleLine(false)
                 .setBackgroundColor(backgroundColor)
                 .setProfileImage(icon)
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerLauncher.java b/chrome/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerLauncher.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerLauncher.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerLauncher.java
@@ -10,7 +10,6 @@ import org.chromium.base.annotations.CalledByNative;
 import org.chromium.base.supplier.ObservableSupplier;
 import org.chromium.base.supplier.ObservableSupplierImpl;
 import org.chromium.chrome.browser.settings.SettingsLauncherImpl;
-import org.chromium.chrome.browser.sync.SyncService;
 import org.chromium.content_public.browser.WebContents;
 import org.chromium.ui.base.WindowAndroid;
 import org.chromium.ui.modaldialog.ModalDialogManager;
@@ -32,9 +31,8 @@ public class PasswordManagerLauncher {
             @ManagePasswordsReferrer int referrer,
             ObservableSupplier<ModalDialogManager> modalDialogManagerSupplier,
             boolean managePasskeys) {
-        SyncService syncService = SyncService.get();
         PasswordManagerHelper.showPasswordSettings(activity, referrer, new SettingsLauncherImpl(),
-                syncService, modalDialogManagerSupplier, managePasskeys);
+                modalDialogManagerSupplier, managePasskeys);
     }
 
     @CalledByNative
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/password_manager/settings/PasswordSettings.java b/chrome/android/java/src/org/chromium/chrome/browser/password_manager/settings/PasswordSettings.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/password_manager/settings/PasswordSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/password_manager/settings/PasswordSettings.java
@@ -41,8 +41,6 @@ import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.settings.ChromeManagedPreferenceDelegate;
 import org.chromium.chrome.browser.settings.SettingsLauncherImpl;
-import org.chromium.chrome.browser.sync.SyncService;
-import org.chromium.chrome.browser.sync.settings.SyncSettingsUtils;
 import org.chromium.components.browser_ui.settings.ChromeBasePreference;
 import org.chromium.components.browser_ui.settings.ChromeSwitchPreference;
 import org.chromium.components.browser_ui.settings.SearchUtils;
@@ -64,7 +62,7 @@ import java.util.Locale;
  */
 public class PasswordSettings extends PreferenceFragmentCompat
         implements PasswordManagerHandler.PasswordListObserver,
-                   Preference.OnPreferenceClickListener, SyncService.SyncStateChangedListener,
+                   Preference.OnPreferenceClickListener,
                    FragmentHelpAndFeedbackLauncher {
     @IntDef({TrustedVaultBannerState.NOT_SHOWN, TrustedVaultBannerState.OFFER_OPT_IN,
             TrustedVaultBannerState.OPTED_IN})
@@ -159,10 +157,6 @@ public class PasswordSettings extends PreferenceFragmentCompat
         setPreferenceScreen(getPreferenceManager().createPreferenceScreen(getStyledContext()));
         PasswordManagerHandlerProvider.getInstance().addObserver(this);
 
-        if (SyncService.get() != null) {
-            SyncService.get().addSyncStateChangedListener(this);
-        }
-
         setHasOptionsMenu(true); // Password Export might be optional but Search is always present.
 
         mManagePasswordsReferrer = getReferrerFromInstanceStateOrLaunchBundle(savedInstanceState);
@@ -467,9 +461,6 @@ public class PasswordSettings extends PreferenceFragmentCompat
     public void onDestroy() {
         super.onDestroy();
 
-        if (SyncService.get() != null) {
-            SyncService.get().removeSyncStateChangedListener(this);
-        }
         // The component should only be destroyed when the activity has been closed by the user
         // (e.g. by pressing on the back button) and not when the activity is temporarily destroyed
         // by the system.
@@ -587,34 +578,6 @@ public class PasswordSettings extends PreferenceFragmentCompat
     }
 
     private void displayManageAccountLink() {
-        SyncService syncService = SyncService.get();
-        if (syncService == null || !syncService.isEngineInitialized()) {
-            return;
-        }
-        if (!PasswordManagerHelper.isSyncingPasswordsWithNoCustomPassphrase(SyncService.get())) {
-            return;
-        }
-        if (mSearchQuery != null && !mNoPasswords) {
-            return; // Don't add the Manage Account link if there is a search going on.
-        }
-        if (getPreferenceScreen().findPreference(PREF_KEY_MANAGE_ACCOUNT_LINK) != null) {
-            return; // Don't add the Manage Account link if it's present.
-        }
-        if (mLinkPref != null) {
-            // If we created the link before, reuse it.
-            getPreferenceScreen().addPreference(mLinkPref);
-            return;
-        }
-        ForegroundColorSpan colorSpan =
-                new ForegroundColorSpan(SemanticColorUtils.getDefaultTextColorLink(getContext()));
-        SpannableString title = SpanApplier.applySpans(getString(R.string.manage_passwords_text),
-                new SpanApplier.SpanInfo("<link>", "</link>", colorSpan));
-        mLinkPref = new ChromeBasePreference(getStyledContext());
-        mLinkPref.setKey(PREF_KEY_MANAGE_ACCOUNT_LINK);
-        mLinkPref.setTitle(title);
-        mLinkPref.setOnPreferenceClickListener(this);
-        mLinkPref.setOrder(ORDER_MANAGE_ACCOUNT_LINK);
-        getPreferenceScreen().addPreference(mLinkPref);
     }
 
     private Context getStyledContext() {
@@ -625,43 +588,11 @@ public class PasswordSettings extends PreferenceFragmentCompat
         return UserPrefs.get(Profile.getLastUsedRegularProfile());
     }
 
-    @Override
-    public void syncStateChanged() {
-        final @TrustedVaultBannerState int oldTrustedVaultBannerState = mTrustedVaultBannerState;
-        computeTrustedVaultBannerState();
-        if (oldTrustedVaultBannerState != mTrustedVaultBannerState) {
-            rebuildPasswordLists();
-        }
-    }
-
     private void computeTrustedVaultBannerState() {
-        final SyncService syncService = SyncService.get();
-        if (syncService == null) {
-            mTrustedVaultBannerState = TrustedVaultBannerState.NOT_SHOWN;
-            return;
-        }
-        if (!syncService.isEngineInitialized()) {
-            // Can't call getPassphraseType() yet.
             mTrustedVaultBannerState = TrustedVaultBannerState.NOT_SHOWN;
-            return;
-        }
-        if (syncService.getPassphraseType() == PassphraseType.TRUSTED_VAULT_PASSPHRASE) {
-            mTrustedVaultBannerState = TrustedVaultBannerState.OPTED_IN;
-            return;
-        }
-        if (syncService.shouldOfferTrustedVaultOptIn()) {
-            mTrustedVaultBannerState = TrustedVaultBannerState.OFFER_OPT_IN;
-            return;
-        }
-        mTrustedVaultBannerState = TrustedVaultBannerState.NOT_SHOWN;
     }
 
     private boolean openTrustedVaultOptInDialog(Preference unused) {
-        assert SyncService.get() != null;
-        CoreAccountInfo accountInfo = SyncService.get().getAccountInfo();
-        assert accountInfo != null;
-        SyncSettingsUtils.openTrustedVaultOptInDialog(
-                this, accountInfo, REQUEST_CODE_TRUSTED_VAULT_OPT_IN);
         // Return true to notify the click was handled.
         return true;
     }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/payments/ui/PaymentRequestUI.java b/chrome/android/java/src/org/chromium/chrome/browser/payments/ui/PaymentRequestUI.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/payments/ui/PaymentRequestUI.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/payments/ui/PaymentRequestUI.java
@@ -45,7 +45,6 @@ import org.chromium.chrome.browser.payments.ui.PaymentRequestSection.OptionSecti
 import org.chromium.chrome.browser.payments.ui.PaymentRequestSection.SectionSeparator;
 import org.chromium.chrome.browser.payments.ui.PaymentUiService.PaymentUisShowStateReconciler;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
 import org.chromium.components.autofill.EditableOption;
 import org.chromium.components.autofill.prefeditor.EditorObserverForTest;
 import org.chromium.components.browser_ui.widget.FadingEdgeScrollView;
@@ -1123,16 +1122,7 @@ public class PaymentRequestUI implements DimmingDialog.OnDismissListener, View.O
      */
     @Nullable
     private String getSignedInUsersEmail() {
-        if (mProfile.isOffTheRecord()) {
-            return null;
-        }
-
-        IdentityManager identityManager =
-                IdentityServicesProvider.get().getIdentityManager(mProfile);
-        if (identityManager == null) return null;
-        CoreAccountInfo info = identityManager.getPrimaryAccountInfo(ConsentLevel.SYNC);
-        if (info == null) return null;
-        return info.getEmail();
+        return null;
     }
 
     private Callback<SectionInformation> createUpdateSectionCallback(@DataType final int type) {
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java b/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
@@ -33,9 +33,6 @@ import org.chromium.chrome.browser.privacy_sandbox.PrivacySandboxSettingsBaseFra
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.settings.ChromeManagedPreferenceDelegate;
 import org.chromium.chrome.browser.settings.SettingsLauncherImpl;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
-import org.chromium.chrome.browser.sync.settings.GoogleServicesSettings;
-import org.chromium.chrome.browser.sync.settings.ManageSyncSettings;
 import org.chromium.components.browser_ui.settings.ChromeSwitchPreference;
 import org.chromium.components.browser_ui.settings.SettingsLauncher;
 import org.chromium.components.browser_ui.settings.SettingsUtils;
@@ -58,7 +55,6 @@ public class PrivacySettings extends PreferenceFragmentCompat
     private static final String PREF_HTTPS_FIRST_MODE = "https_first_mode";
     private static final String PREF_SECURE_DNS = "secure_dns";
     private static final String PREF_DO_NOT_TRACK = "do_not_track";
-    private static final String PREF_SYNC_AND_SERVICES_LINK = "sync_and_services_link";
     private static final String PREF_CLEAR_BROWSING_DATA = "clear_browsing_data";
     private static final String PREF_PRIVACY_SANDBOX = "privacy_sandbox";
     private static final String PREF_PRIVACY_GUIDE = "privacy_guide";
@@ -144,9 +140,6 @@ public class PrivacySettings extends PreferenceFragmentCompat
         Preference secureDnsPref = findPreference(PREF_SECURE_DNS);
         secureDnsPref.setVisible(SecureDnsSettings.isUiEnabled());
 
-        Preference syncAndServicesLink = findPreference(PREF_SYNC_AND_SERVICES_LINK);
-        syncAndServicesLink.setSummary(buildSyncAndServicesLink());
-
         Preference thirdPartyCookies = findPreference(PREF_THIRD_PARTY_COOKIES);
         if (thirdPartyCookies != null) {
             thirdPartyCookies.getExtras().putString(
@@ -158,30 +151,6 @@ public class PrivacySettings extends PreferenceFragmentCompat
         updatePreferences();
     }
 
-    private SpannableString buildSyncAndServicesLink() {
-        SettingsLauncher settingsLauncher = new SettingsLauncherImpl();
-        NoUnderlineClickableSpan servicesLink = new NoUnderlineClickableSpan(getContext(), v -> {
-            settingsLauncher.launchSettingsActivity(getActivity(), GoogleServicesSettings.class);
-        });
-        if (IdentityServicesProvider.get()
-                        .getIdentityManager(Profile.getLastUsedRegularProfile())
-                        .getPrimaryAccountInfo(ConsentLevel.SYNC)
-                == null) {
-            // Sync is off, show the string with one link to "Google Services".
-            return SpanApplier.applySpans(
-                    getString(R.string.privacy_sync_and_services_link_sync_off),
-                    new SpanApplier.SpanInfo("<link>", "</link>", servicesLink));
-        }
-        // Otherwise, show the string with both links to "Sync" and "Google Services".
-        NoUnderlineClickableSpan syncLink = new NoUnderlineClickableSpan(getContext(), v -> {
-            settingsLauncher.launchSettingsActivity(getActivity(), ManageSyncSettings.class,
-                    ManageSyncSettings.createArguments(false));
-        });
-        return SpanApplier.applySpans(getString(R.string.privacy_sync_and_services_link_sync_on),
-                new SpanApplier.SpanInfo("<link1>", "</link1>", syncLink),
-                new SpanApplier.SpanInfo("<link2>", "</link2>", servicesLink));
-    }
-
     @Override
     public boolean onPreferenceChange(Preference preference, Object newValue) {
         String key = preference.getKey();
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/settings/MainSettings.java b/chrome/android/java/src/org/chromium/chrome/browser/settings/MainSettings.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/settings/MainSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/settings/MainSettings.java
@@ -4,7 +4,6 @@
 
 package org.chromium.chrome.browser.settings;
 
-import static org.chromium.chrome.browser.password_manager.PasswordManagerHelper.hasChosenToSyncPasswords;
 import static org.chromium.chrome.browser.password_manager.PasswordManagerHelper.usesUnifiedPasswordManagerBranding;
 import static org.chromium.chrome.browser.password_manager.PasswordManagerHelper.usesUnifiedPasswordManagerUI;
 
@@ -39,13 +38,6 @@ import org.chromium.chrome.browser.password_manager.PasswordManagerLauncher;
 import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.search_engines.TemplateUrlServiceFactory;
-import org.chromium.chrome.browser.signin.SyncConsentActivityLauncherImpl;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
-import org.chromium.chrome.browser.signin.services.SigninManager;
-import org.chromium.chrome.browser.sync.SyncService;
-import org.chromium.chrome.browser.sync.settings.ManageSyncSettings;
-import org.chromium.chrome.browser.sync.settings.SignInPreference;
-import org.chromium.chrome.browser.sync.settings.SyncSettingsUtils;
 import org.chromium.chrome.browser.toolbar.adaptive.AdaptiveToolbarStatePredictor;
 import org.chromium.chrome.browser.tracing.settings.DeveloperSettings;
 import org.chromium.components.browser_ui.settings.ChromeBasePreference;
@@ -55,9 +47,6 @@ import org.chromium.components.browser_ui.settings.SettingsUtils;
 import org.chromium.components.browser_ui.styles.SemanticColorUtils;
 import org.chromium.components.search_engines.TemplateUrl;
 import org.chromium.components.search_engines.TemplateUrlService;
-import org.chromium.components.signin.base.CoreAccountInfo;
-import org.chromium.components.signin.identitymanager.ConsentLevel;
-import org.chromium.components.signin.metrics.SigninAccessPoint;
 import org.chromium.components.user_prefs.UserPrefs;
 import org.chromium.ui.modaldialog.ModalDialogManager;
 import org.chromium.ui.text.SpanApplier;
@@ -70,14 +59,10 @@ import java.util.Map;
  * The main settings screen, shown when the user first opens Settings.
  */
 public class MainSettings extends PreferenceFragmentCompat
-        implements TemplateUrlService.LoadListener, SyncService.SyncStateChangedListener,
-                   SigninManager.SignInStateObserver, ProfileDependentSetting {
-    public static final String PREF_SYNC_PROMO = "sync_promo";
+        implements TemplateUrlService.LoadListener, ProfileDependentSetting {
     public static final String PREF_ACCOUNT_AND_GOOGLE_SERVICES_SECTION =
             "account_and_google_services_section";
     public static final String PREF_SIGN_IN = "sign_in";
-    public static final String PREF_MANAGE_SYNC = "manage_sync";
-    public static final String PREF_GOOGLE_SERVICES = "google_services";
     public static final String PREF_SEARCH_ENGINE = "search_engine";
     public static final String PREF_PASSWORDS = "passwords";
     public static final String PREF_HOMEPAGE = "homepage";
@@ -95,8 +80,6 @@ public class MainSettings extends PreferenceFragmentCompat
 
     private final ManagedPreferenceDelegate mManagedPreferenceDelegate;
     private final Map<String, Preference> mAllPreferences = new HashMap<>();
-    private SignInPreference mSignInPreference;
-    private ChromeBasePreference mManageSync;
     private @Nullable PasswordCheck mPasswordCheck;
     private Profile mProfile;
     private ObservableSupplier<ModalDialogManager> mModalDialogManagerSupplier;
@@ -138,30 +121,13 @@ public class MainSettings extends PreferenceFragmentCompat
     @Override
     public void onStart() {
         super.onStart();
-        SigninManager signinManager = IdentityServicesProvider.get().getSigninManager(mProfile);
-        if (signinManager.isSigninSupported()) {
-            signinManager.addSignInStateObserver(this);
-        }
-        SyncService syncService = SyncService.get();
-        if (syncService != null) {
-            syncService.addSyncStateChangedListener(this);
-        }
     }
 
     @Override
     public void onStop() {
         super.onStop();
-        SigninManager signinManager = IdentityServicesProvider.get().getSigninManager(mProfile);
-        if (signinManager.isSigninSupported()) {
-            signinManager.removeSignInStateObserver(this);
-        }
-        SyncService syncService = SyncService.get();
-        if (syncService != null) {
-            syncService.removeSyncStateChangedListener(this);
-        }
     }
 
-    @Override
     public void onResume() {
         super.onResume();
         updatePreferences();
@@ -232,8 +198,6 @@ public class MainSettings extends PreferenceFragmentCompat
             Preference preference = getPreferenceScreen().getPreference(index);
             mAllPreferences.put(preference.getKey(), preference);
         }
-        mSignInPreference = (SignInPreference) mAllPreferences.get(PREF_SIGN_IN);
-        mManageSync = (ChromeBasePreference) findPreference(PREF_MANAGE_SYNC);
     }
 
     private void setManagedPreferenceDelegateForPreference(String key) {
@@ -242,13 +206,6 @@ public class MainSettings extends PreferenceFragmentCompat
     }
 
     private void updatePreferences() {
-        if (IdentityServicesProvider.get().getSigninManager(mProfile).isSigninSupported()) {
-            addPreferenceIfAbsent(PREF_SIGN_IN);
-        } else {
-            removePreferenceIfPresent(PREF_SIGN_IN);
-        }
-
-        updateManageSyncPreference();
         updateSearchEnginePreference();
         updatePasswordsPreference();
 
@@ -282,35 +239,6 @@ public class MainSettings extends PreferenceFragmentCompat
         if (preference != null) getPreferenceScreen().removePreference(preference);
     }
 
-    private void updateManageSyncPreference() {
-        String primaryAccountName = CoreAccountInfo.getEmailFrom(
-                IdentityServicesProvider.get().getIdentityManager(mProfile).getPrimaryAccountInfo(
-                        ConsentLevel.SIGNIN));
-        boolean showManageSync = primaryAccountName != null;
-        mManageSync.setVisible(showManageSync);
-        if (!showManageSync) return;
-
-        boolean isSyncConsentAvailable =
-                IdentityServicesProvider.get().getIdentityManager(mProfile).getPrimaryAccountInfo(
-                        ConsentLevel.SYNC)
-                != null;
-        mManageSync.setIcon(SyncSettingsUtils.getSyncStatusIcon(getActivity()));
-        mManageSync.setSummary(SyncSettingsUtils.getSyncStatusSummary(getActivity()));
-        mManageSync.setOnPreferenceClickListener(pref -> {
-            Context context = getContext();
-            if (SyncService.get().isSyncDisabledByEnterprisePolicy()) {
-                SyncSettingsUtils.showSyncDisabledByAdministratorToast(context);
-            } else if (isSyncConsentAvailable) {
-                SettingsLauncher settingsLauncher = new SettingsLauncherImpl();
-                settingsLauncher.launchSettingsActivity(context, ManageSyncSettings.class);
-            } else {
-                SyncConsentActivityLauncherImpl.get().launchActivityForPromoDefaultFlow(
-                        context, SigninAccessPoint.SETTINGS_SYNC_OFF_ROW, primaryAccountName);
-            }
-            return true;
-        });
-    }
-
     private void updateSearchEnginePreference() {
         TemplateUrlService templateUrlService = TemplateUrlServiceFactory.getForProfile(mProfile);
         if (!templateUrlService.isLoaded()) {
@@ -347,8 +275,7 @@ public class MainSettings extends PreferenceFragmentCompat
     }
 
     private boolean shouldShowNewLabelForPasswordsPreference() {
-        return usesUnifiedPasswordManagerUI() && hasChosenToSyncPasswords(SyncService.get())
-                && !UserPrefs.get(mProfile).getBoolean(Pref.PASSWORDS_PREF_WITH_NEW_LABEL_USED);
+        return false;
     }
 
     // TODO(crbug.com/1217070): remove this method once UPM feature is rolled out.
@@ -379,19 +306,6 @@ public class MainSettings extends PreferenceFragmentCompat
         pref.setSummary(isOn ? R.string.text_on : R.string.text_off);
     }
 
-    // SigninManager.SignInStateObserver implementation.
-    @Override
-    public void onSignedIn() {
-        // After signing in or out of a managed account, preferences may change or become enabled
-        // or disabled.
-        new Handler().post(() -> updatePreferences());
-    }
-
-    @Override
-    public void onSignedOut() {
-        updatePreferences();
-    }
-
     // TemplateUrlService.LoadListener implementation.
     @Override
     public void onTemplateUrlServiceLoaded() {
@@ -399,12 +313,6 @@ public class MainSettings extends PreferenceFragmentCompat
         updateSearchEnginePreference();
     }
 
-    @Override
-    public void syncStateChanged() {
-        updateManageSyncPreference();
-        updatePasswordsPreference();
-    }
-
     @VisibleForTesting
     public ManagedPreferenceDelegate getManagedPreferenceDelegateForTest() {
         return mManagedPreferenceDelegate;
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/settings/SettingsActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/settings/SettingsActivity.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/settings/SettingsActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/settings/SettingsActivity.java
@@ -60,11 +60,7 @@ import org.chromium.chrome.browser.privacy_sandbox.AdMeasurementFragment;
 import org.chromium.chrome.browser.privacy_sandbox.PrivacySandboxSettingsBaseFragment;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.profiles.ProfileManagerUtils;
-import org.chromium.chrome.browser.safety_check.SafetyCheckCoordinator;
-import org.chromium.chrome.browser.safety_check.SafetyCheckSettingsFragment;
-import org.chromium.chrome.browser.safety_check.SafetyCheckUpdatesDelegateImpl;
 import org.chromium.chrome.browser.search_engines.settings.SearchEngineSettings;
-import org.chromium.chrome.browser.signin.SyncConsentActivityLauncherImpl;
 import org.chromium.chrome.browser.site_settings.ChromeSiteSettingsDelegate;
 import org.chromium.chrome.browser.ui.messages.snackbar.SnackbarManager;
 import org.chromium.chrome.browser.ui.messages.snackbar.SnackbarManager.SnackbarManageable;
@@ -430,11 +426,6 @@ public class SettingsActivity extends ChromeBaseAppCompatActivity
             fragmentHelpAndFeedbackLauncher.setHelpAndFeedbackLauncher(
                     HelpAndFeedbackLauncherImpl.getForProfile(mProfile));
         }
-        if (fragment instanceof SafetyCheckSettingsFragment) {
-            SafetyCheckCoordinator.create((SafetyCheckSettingsFragment) fragment,
-                    new SafetyCheckUpdatesDelegateImpl(), mSettingsLauncher,
-                    SyncConsentActivityLauncherImpl.get(), getModalDialogManagerSupplier());
-        }
         if (fragment instanceof PasswordCheckFragmentView) {
             PasswordCheckComponentUiFactory.create((PasswordCheckFragmentView) fragment,
                     HelpAndFeedbackLauncherImpl.getForProfile(mProfile), mSettingsLauncher,
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/survey/ChromeSurveyController.java b/chrome/android/java/src/org/chromium/chrome/browser/survey/ChromeSurveyController.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/survey/ChromeSurveyController.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/survey/ChromeSurveyController.java
@@ -236,7 +236,7 @@ public class ChromeSurveyController {
                                 MessageIdentifier.CHROME_SURVEY)
                         .with(MessageBannerProperties.TITLE,
                                 resources.getString(R.string.chrome_survey_message_title))
-                        .with(MessageBannerProperties.ICON_RESOURCE_ID, R.drawable.chrome_sync_logo)
+                        .with(MessageBannerProperties.ICON_RESOURCE_ID, R.drawable.ic_help_and_feedback)
                         .with(MessageBannerProperties.ICON_TINT_COLOR,
                                 MessageBannerProperties.TINT_NONE)
                         .with(MessageBannerProperties.PRIMARY_BUTTON_TEXT,
@@ -290,7 +290,7 @@ public class ChromeSurveyController {
      */
     private void showSurvey(String siteId) {
         SurveyController.getInstance().showSurveyIfAvailable(
-                mActivity, siteId, true, R.drawable.chrome_sync_logo, mLifecycleDispatcher);
+                mActivity, siteId, true, R.drawable.ic_help_and_feedback, mLifecycleDispatcher);
     }
 
     /**
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/tabbed_mode/TabbedRootUiCoordinator.java b/chrome/android/java/src/org/chromium/chrome/browser/tabbed_mode/TabbedRootUiCoordinator.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/tabbed_mode/TabbedRootUiCoordinator.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/tabbed_mode/TabbedRootUiCoordinator.java
@@ -85,7 +85,6 @@ import org.chromium.chrome.browser.read_later.ReadLaterIPHController;
 import org.chromium.chrome.browser.settings.SettingsLauncherImpl;
 import org.chromium.chrome.browser.share.ShareDelegate;
 import org.chromium.chrome.browser.share.link_to_text.LinkToTextIPHController;
-import org.chromium.chrome.browser.signin.SyncConsentActivityLauncherImpl;
 import org.chromium.chrome.browser.status_indicator.StatusIndicatorCoordinator;
 import org.chromium.chrome.browser.subscriptions.CommerceSubscriptionsService;
 import org.chromium.chrome.browser.subscriptions.CommerceSubscriptionsServiceFactory;
@@ -105,7 +104,6 @@ import org.chromium.chrome.browser.ui.appmenu.AppMenuBlocker;
 import org.chromium.chrome.browser.ui.appmenu.AppMenuDelegate;
 import org.chromium.chrome.browser.ui.default_browser_promo.DefaultBrowserPromoUtils;
 import org.chromium.chrome.browser.ui.messages.snackbar.SnackbarManager;
-import org.chromium.chrome.browser.ui.signin.FullScreenSyncPromoUtil;
 import org.chromium.chrome.browser.ui.system.StatusBarColorController.StatusBarColorProvider;
 import org.chromium.chrome.browser.webapps.AddToHomescreenIPHController;
 import org.chromium.chrome.browser.webapps.AddToHomescreenMostVisitedTileClickObserver;
@@ -945,23 +943,6 @@ public class TabbedRootUiCoordinator extends RootUiCoordinator {
         }
     }
 
-    private boolean maybeShowPromo() {
-        // Only one promo can be shown in one run to avoid nagging users too much.
-        if (FullScreenSyncPromoUtil.launchPromoIfNeeded(mActivity,
-                    SyncConsentActivityLauncherImpl.get(), VersionInfo.getProductMajorVersion())) {
-            return true;
-        }
-        if (DefaultBrowserPromoUtils.prepareLaunchPromoIfNeeded(
-                    mActivity, mWindowAndroid, false /* ignoreMaxCount */)) {
-            return true;
-        }
-        if (AppLanguagePromoDialog.maybeShowPrompt(mActivity, mModalDialogManagerSupplier,
-                    () -> ApplicationLifetime.terminate(true))) {
-            return true;
-        }
-        return LanguageAskPrompt.maybeShowLanguageAskPrompt(mActivity, mModalDialogManagerSupplier);
-    }
-
     @VisibleForTesting
     public static void setDisableStatusIndicatorAnimationsForTesting(boolean disable) {
         sDisableStatusIndicatorAnimations = disable;
diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -1979,7 +1979,6 @@ static_library("browser") {
     "//chrome/browser/share",
     "//chrome/browser/sharing:buildflags",
     "//chrome/browser/sharing/proto",
-    "//chrome/browser/signin:identity_manager_provider",
     "//chrome/browser/storage_access_api:permissions",
     "//chrome/browser/thumbnail",
     "//chrome/browser/top_level_storage_access_api:permissions",
@@ -2809,8 +2808,6 @@ static_library("browser") {
       "android/signin/fre_mobile_identity_consistency_field_trial.h",
       "android/signin/signin_bridge.cc",
       "android/signin/signin_bridge.h",
-      "android/signin/signin_manager_android.cc",
-      "android/signin/signin_manager_android.h",
       "android/signin/signin_metrics_utils.cc",
       "android/signin/unified_consent_service_bridge.cc",
       "android/signin/web_signin_bridge.cc",
@@ -3168,8 +3165,6 @@ static_library("browser") {
       "sharing/sms/sms_fetch_request_handler.h",
       "shell_integration_android.cc",
       "signin/identity_services_provider_android.cc",
-      "signin/signin_manager_android_factory.cc",
-      "signin/signin_manager_android_factory.h",
       "ssl/chrome_security_state_client.cc",
       "ssl/chrome_security_state_client.h",
       "ssl/chrome_security_state_model_delegate.cc",
@@ -4489,10 +4484,6 @@ static_library("browser") {
         "profiles/profile_statistics_factory.h",
         "signin/force_signin_verifier.cc",
         "signin/force_signin_verifier.h",
-        "signin/signin_manager.cc",
-        "signin/signin_manager.h",
-        "signin/signin_manager_factory.cc",
-        "signin/signin_manager_factory.h",
         "upgrade_detector/get_installed_version.cc",
         "upgrade_detector/get_installed_version.h",
         "upgrade_detector/installed_version_monitor.h",
diff --git a/chrome/browser/android/signin/fre_mobile_identity_consistency_field_trial.cc b/chrome/browser/android/signin/fre_mobile_identity_consistency_field_trial.cc
--- a/chrome/browser/android/signin/fre_mobile_identity_consistency_field_trial.cc
+++ b/chrome/browser/android/signin/fre_mobile_identity_consistency_field_trial.cc
@@ -5,25 +5,16 @@
 #include "chrome/browser/android/signin/fre_mobile_identity_consistency_field_trial.h"
 #include "base/android/jni_android.h"
 #include "base/android/jni_string.h"
-#include "chrome/browser/signin/services/android/jni_headers/FREMobileIdentityConsistencyFieldTrial_jni.h"
 
 namespace fre_mobile_identity_consistency_field_trial {
 
 std::string GetFREFieldTrialGroupName() {
-  JNIEnv* env = base::android::AttachCurrentThread();
-  base::android::ScopedJavaLocalRef<jstring> group =
-      Java_FREMobileIdentityConsistencyFieldTrial_getFirstRunVariationsTrialGroupName(
-          env);
-  return base::android::ConvertJavaStringToUTF8(env, group);
+  return std::string();
 }
 
 variations::VariationID GetFREFieldTrialVariationId(int low_entropy_source,
                                                     int low_entropy_size) {
-  JNIEnv* env = base::android::AttachCurrentThread();
-  jint variation_id =
-      Java_FREMobileIdentityConsistencyFieldTrial_getFirstRunTrialVariationId(
-          env, low_entropy_source, low_entropy_size);
-  return static_cast<variations::VariationID>(variation_id);
+  return variations::EMPTY_ID;
 }
 
 }  // namespace fre_mobile_identity_consistency_field_trial
diff --git a/chrome/browser/commerce/android/BUILD.gn b/chrome/browser/commerce/android/BUILD.gn
--- a/chrome/browser/commerce/android/BUILD.gn
+++ b/chrome/browser/commerce/android/BUILD.gn
@@ -24,8 +24,6 @@ android_library("java") {
     "//chrome/browser/preferences:java",
     "//chrome/browser/profiles/android:java",
     "//chrome/browser/settings:java",
-    "//chrome/browser/signin/services/android:java",
-    "//chrome/browser/sync/android:java",
     "//components/browser_ui/notifications/android:java",
     "//components/browser_ui/settings/android:java",
     "//components/commerce/core/android:core_java",
diff --git a/chrome/browser/commerce/android/java/src/org/chromium/chrome/browser/commerce/PriceNotificationPreferenceFragment.java b/chrome/browser/commerce/android/java/src/org/chromium/chrome/browser/commerce/PriceNotificationPreferenceFragment.java
--- a/chrome/browser/commerce/android/java/src/org/chromium/chrome/browser/commerce/PriceNotificationPreferenceFragment.java
+++ b/chrome/browser/commerce/android/java/src/org/chromium/chrome/browser/commerce/PriceNotificationPreferenceFragment.java
@@ -21,14 +21,12 @@ import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.preferences.PrefChangeRegistrar;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.settings.ProfileDependentSetting;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
 import org.chromium.components.browser_ui.notifications.NotificationManagerProxy;
 import org.chromium.components.browser_ui.notifications.NotificationManagerProxyImpl;
 import org.chromium.components.browser_ui.settings.ChromeSwitchPreference;
 import org.chromium.components.browser_ui.settings.SettingsUtils;
 import org.chromium.components.browser_ui.settings.TextMessagePreference;
 import org.chromium.components.prefs.PrefService;
-import org.chromium.components.signin.identitymanager.ConsentLevel;
 import org.chromium.components.user_prefs.UserPrefs;
 import org.chromium.ui.text.NoUnderlineClickableSpan;
 import org.chromium.ui.text.SpanApplier;
@@ -69,12 +67,8 @@ public class PriceNotificationPreferenceFragment
         mEmailNotificationsSwitch =
                 (ChromeSwitchPreference) findPreference(PREF_EMAIL_NOTIFICATIONS);
         mEmailNotificationsSwitch.setOnPreferenceChangeListener(this::onPreferenceChange);
-        String email = IdentityServicesProvider.get()
-                               .getIdentityManager(mProfile)
-                               .getPrimaryAccountInfo(ConsentLevel.SYNC)
-                               .getEmail();
         mEmailNotificationsSwitch.setSummary(
-                getString(R.string.price_notifications_settings_email_description, email));
+                getString(R.string.price_notifications_settings_email_description, "nobody@example.com"));
         mPrefChangeRegistrar.addObserver(
                 Pref.PRICE_EMAIL_NOTIFICATIONS_ENABLED, this::updateEmailNotificationSwitch);
         updateEmailNotificationSwitch();
diff --git a/chrome/browser/commerce/price_tracking/android/java/src/org/chromium/chrome/browser/price_tracking/PriceTrackingFeatures.java b/chrome/browser/commerce/price_tracking/android/java/src/org/chromium/chrome/browser/price_tracking/PriceTrackingFeatures.java
--- a/chrome/browser/commerce/price_tracking/android/java/src/org/chromium/chrome/browser/price_tracking/PriceTrackingFeatures.java
+++ b/chrome/browser/commerce/price_tracking/android/java/src/org/chromium/chrome/browser/price_tracking/PriceTrackingFeatures.java
@@ -81,14 +81,11 @@ public class PriceTrackingFeatures {
     }
 
     private static boolean isSignedIn() {
-        return IdentityServicesProvider.get()
-                .getIdentityManager(Profile.getLastUsedRegularProfile())
-                .hasPrimaryAccount(ConsentLevel.SYNC);
+        return false;
     }
 
     private static boolean isAnonymizedUrlDataCollectionEnabled() {
-        return UnifiedConsentServiceBridge.isUrlKeyedAnonymizedDataCollectionEnabled(
-                Profile.getLastUsedRegularProfile());
+        return false;
     }
 
     @VisibleForTesting
@@ -142,4 +139,4 @@ public class PriceTrackingFeatures {
         }
         return isPriceTrackingEligible();
     }
-}
\ No newline at end of file
+}
diff --git a/chrome/browser/commerce/subscriptions/android/BUILD.gn b/chrome/browser/commerce/subscriptions/android/BUILD.gn
--- a/chrome/browser/commerce/subscriptions/android/BUILD.gn
+++ b/chrome/browser/commerce/subscriptions/android/BUILD.gn
@@ -21,7 +21,6 @@ android_library("subscriptions_java") {
     "//chrome/browser/flags:java",
     "//chrome/browser/preferences:java",
     "//chrome/browser/profiles/android:java",
-    "//chrome/browser/signin/services/android:java",
     "//chrome/browser/tab:java",
     "//chrome/browser/tabmodel:java",
     "//components/commerce/core/android:core_java",
diff --git a/chrome/browser/commerce/subscriptions/android/java_sources.gni b/chrome/browser/commerce/subscriptions/android/java_sources.gni
--- a/chrome/browser/commerce/subscriptions/android/java_sources.gni
+++ b/chrome/browser/commerce/subscriptions/android/java_sources.gni
@@ -9,5 +9,4 @@ commerce_subscriptions_java_sources = [ "//chrome/browser/commerce/subscriptions
 commerce_subscriptions_java_deps = [
   "//base:base_java",
   "//chrome/browser/profiles/android:java",
-  "//chrome/browser/signin/services/android:java",
 ]
diff --git a/chrome/browser/feed/android/BUILD.gn b/chrome/browser/feed/android/BUILD.gn
--- a/chrome/browser/feed/android/BUILD.gn
+++ b/chrome/browser/feed/android/BUILD.gn
@@ -106,7 +106,6 @@ android_library("java") {
     "//chrome/browser/privacy:java",
     "//chrome/browser/profiles/android:java",
     "//chrome/browser/share:java",
-    "//chrome/browser/signin/services/android:java",
     "//chrome/browser/tab:java",
     "//chrome/browser/ui/android/appmenu:java",
     "//chrome/browser/ui/android/native_page:java",
diff --git a/chrome/browser/feed/android/java/src/org/chromium/chrome/browser/feed/FeedFeatures.java b/chrome/browser/feed/android/java/src/org/chromium/chrome/browser/feed/FeedFeatures.java
--- a/chrome/browser/feed/android/java/src/org/chromium/chrome/browser/feed/FeedFeatures.java
+++ b/chrome/browser/feed/android/java/src/org/chromium/chrome/browser/feed/FeedFeatures.java
@@ -13,9 +13,7 @@ import org.chromium.chrome.browser.feed.componentinterfaces.SurfaceCoordinator.S
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
 import org.chromium.components.prefs.PrefService;
-import org.chromium.components.signin.identitymanager.ConsentLevel;
 import org.chromium.components.user_prefs.UserPrefs;
 import org.chromium.ui.base.DeviceFormFactor;
 
diff --git a/chrome/browser/feed/android/java/src/org/chromium/chrome/browser/feed/FeedServiceBridge.java b/chrome/browser/feed/android/java/src/org/chromium/chrome/browser/feed/FeedServiceBridge.java
--- a/chrome/browser/feed/android/java/src/org/chromium/chrome/browser/feed/FeedServiceBridge.java
+++ b/chrome/browser/feed/android/java/src/org/chromium/chrome/browser/feed/FeedServiceBridge.java
@@ -182,7 +182,7 @@ public final class FeedServiceBridge {
      *         requested).
      */
     public static boolean isSignedIn() {
-        return FeedServiceBridgeJni.get().isSignedIn();
+        return false;
     }
 
     /** Observes whether or not the Feed stream contains unread content */
diff --git a/chrome/browser/feed/android/java/src/org/chromium/chrome/browser/feed/signinbottomsheet/SigninBottomSheetCoordinator.java b/chrome/browser/feed/android/java/src/org/chromium/chrome/browser/feed/signinbottomsheet/SigninBottomSheetCoordinator.java
--- a/chrome/browser/feed/android/java/src/org/chromium/chrome/browser/feed/signinbottomsheet/SigninBottomSheetCoordinator.java
+++ b/chrome/browser/feed/android/java/src/org/chromium/chrome/browser/feed/signinbottomsheet/SigninBottomSheetCoordinator.java
@@ -13,7 +13,6 @@ import org.chromium.base.Callback;
 import org.chromium.base.metrics.RecordHistogram;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
-import org.chromium.chrome.browser.signin.services.SigninManager;
 import org.chromium.chrome.browser.ui.signin.R;
 import org.chromium.chrome.browser.ui.signin.account_picker.AccountPickerBottomSheetCoordinator;
 import org.chromium.chrome.browser.ui.signin.account_picker.AccountPickerBottomSheetCoordinator.EntryPoint;
@@ -32,7 +31,6 @@ public class SigninBottomSheetCoordinator implements AccountPickerDelegate {
     private final Profile mProfile;
     private final WindowAndroid mWindowAndroid;
     private final BottomSheetController mController;
-    private final SigninManager mSigninManager;
     private boolean mSetTestToast;
     private AccountPickerBottomSheetCoordinator mAccountPickerBottomSheetCoordinator;
 
@@ -41,7 +39,6 @@ public class SigninBottomSheetCoordinator implements AccountPickerDelegate {
         mWindowAndroid = windowAndroid;
         mController = controller;
         mProfile = profile;
-        mSigninManager = IdentityServicesProvider.get().getSigninManager(mProfile);
         mSetTestToast = false;
     }
 
@@ -53,30 +50,7 @@ public class SigninBottomSheetCoordinator implements AccountPickerDelegate {
             String accountEmail, Callback<GoogleServiceAuthError> onSignInErrorCallback) {
         Account account = AccountUtils.createAccountFromName(accountEmail);
         AccountInfoServiceProvider.get().getAccountInfoByEmail(accountEmail).then(accountInfo -> {
-            if (mSigninManager.isSigninAllowed()) {
-                mSigninManager.signin(account, new SigninManager.SignInCallback() {
-                    @Override
-                    public void onSignInComplete() {
-                        RecordHistogram.recordBooleanHistogram(
-                                "ContentSuggestions.Feed.SignInFromFeedAction.SignInSuccessful",
-                                true);
-                        mController.hideContent(mController.getCurrentSheetContent(), true);
-                    }
-
-                    @Override
-                    public void onSignInAborted() {
-                        RecordHistogram.recordBooleanHistogram(
-                                "ContentSuggestions.Feed.SignInFromFeedAction.SignInSuccessful",
-                                false);
-                        // onSignInErrorCallback is called by the WebSigninBridge which is not
-                        // implemented in this signin flow as we do not need to wait for cookies to
-                        // propagate before proceeding with the Feed refresh. Instead of calling
-                        // AccountPickerBottomSheetMediator.onSigninFailed() from the signin bridge
-                        // we directly perform the creation of the "try again" bottom sheet view:
-                        mAccountPickerBottomSheetCoordinator.setTryAgainBottomSheetView();
-                    }
-                });
-            } else {
+            {
                 makeSigninNotAllowedToast();
                 mController.hideContent(mController.getCurrentSheetContent(), true);
             }
diff --git a/chrome/browser/feedback/android/BUILD.gn b/chrome/browser/feedback/android/BUILD.gn
--- a/chrome/browser/feedback/android/BUILD.gn
+++ b/chrome/browser/feedback/android/BUILD.gn
@@ -82,7 +82,6 @@ android_library("feedback_collector_java") {
     "//base:base_java",
     "//build/android:build_java",
     "//chrome/browser/profiles/android:java",
-    "//chrome/browser/signin/services/android:java",
     "//components/browser_ui/util/android:java",
     "//components/signin/public/android:java",
     "//third_party/android_deps:guava_android_java",
diff --git a/chrome/browser/feedback/android/java/src/org/chromium/chrome/browser/feedback/FeedbackCollector.java b/chrome/browser/feedback/android/java/src/org/chromium/chrome/browser/feedback/FeedbackCollector.java
--- a/chrome/browser/feedback/android/java/src/org/chromium/chrome/browser/feedback/FeedbackCollector.java
+++ b/chrome/browser/feedback/android/java/src/org/chromium/chrome/browser/feedback/FeedbackCollector.java
@@ -22,10 +22,7 @@ import org.chromium.base.metrics.RecordHistogram;
 import org.chromium.base.task.PostTask;
 import org.chromium.base.task.TaskTraits;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
 import org.chromium.components.signin.base.CoreAccountInfo;
-import org.chromium.components.signin.identitymanager.ConsentLevel;
-import org.chromium.components.signin.identitymanager.IdentityManager;
 
 import java.util.HashMap;
 import java.util.List;
@@ -68,12 +65,6 @@ public abstract class FeedbackCollector<T> implements Runnable {
         //    account.
         mSynchronousSources = buildSynchronousFeedbackSources(activity, initParams);
         mAsynchronousSources = buildAsynchronousFeedbackSources(initParams);
-        IdentityManager identityManager =
-                IdentityServicesProvider.get().getIdentityManager(profile);
-        if (identityManager != null) {
-            mAccountInUse = CoreAccountInfo.getEmailFrom(
-                    identityManager.getPrimaryAccountInfo(ConsentLevel.SIGNIN));
-        }
 
         // Sanity check in case a source is added to the wrong list.
         for (FeedbackSource source : mSynchronousSources) {
diff --git a/chrome/browser/first_run/android/java/src/org/chromium/chrome/browser/firstrun/MobileFreProgress.java b/chrome/browser/first_run/android/java/src/org/chromium/chrome/browser/firstrun/MobileFreProgress.java
--- a/chrome/browser/first_run/android/java/src/org/chromium/chrome/browser/firstrun/MobileFreProgress.java
+++ b/chrome/browser/first_run/android/java/src/org/chromium/chrome/browser/firstrun/MobileFreProgress.java
@@ -17,7 +17,7 @@ import java.lang.annotation.RetentionPolicy;
 @IntDef({
         MobileFreProgress.STARTED,
         MobileFreProgress.WELCOME_SHOWN,
-        MobileFreProgress.DEPRECATED_DATA_SAVER_SHOWN,
+        MobileFreProgress.DEPRECATED_DATA_SAVER_SHOWN_DISABLED,
         MobileFreProgress.SYNC_CONSENT_SHOWN,
         MobileFreProgress.SYNC_CONSENT_ACCEPTED,
         MobileFreProgress.SYNC_CONSENT_DISMISSED,
@@ -33,7 +33,7 @@ import java.lang.annotation.RetentionPolicy;
 public @interface MobileFreProgress {
     int STARTED = 0;
     int WELCOME_SHOWN = 1;
-    int DEPRECATED_DATA_SAVER_SHOWN = 2;
+    int DEPRECATED_DATA_SAVER_SHOWN_DISABLED = 2;
     int SYNC_CONSENT_SHOWN = 3;
     /** The user clicked on the continue button to continue with sync consent. */
     int SYNC_CONSENT_ACCEPTED = 4;
diff --git a/chrome/browser/media/router/discovery/access_code/BUILD.gn b/chrome/browser/media/router/discovery/access_code/BUILD.gn
--- a/chrome/browser/media/router/discovery/access_code/BUILD.gn
+++ b/chrome/browser/media/router/discovery/access_code/BUILD.gn
@@ -57,7 +57,6 @@ if (!is_android) {
       "//chrome/browser/media/router/discovery:discovery",
       "//chrome/browser/media/router/discovery/access_code:discovery_resources_proto",
       "//chrome/browser/profiles:profile",
-      "//chrome/browser/signin:identity_manager_provider",
       "//chrome/browser/ui/webui/access_code_cast:mojo_bindings",
       "//components/access_code_cast/common",
       "//components/endpoint_fetcher:endpoint_fetcher",
diff --git a/chrome/browser/password_manager/android/BUILD.gn b/chrome/browser/password_manager/android/BUILD.gn
--- a/chrome/browser/password_manager/android/BUILD.gn
+++ b/chrome/browser/password_manager/android/BUILD.gn
@@ -110,8 +110,6 @@ android_library("java") {
     "//chrome/browser/preferences:java",
     "//chrome/browser/profiles/android:java",
     "//chrome/browser/settings:java",
-    "//chrome/browser/signin/services/android:java",
-    "//chrome/browser/sync/android:java",
     "//components/browser_ui/notifications/android:java",
     "//components/browser_ui/settings/android:java",
     "//components/browser_ui/widget/android:java_resources",
@@ -226,8 +224,6 @@ robolectric_binary("password_manager_junit_tests") {
     "//chrome/browser/loading_modal/android:java",
     "//chrome/browser/preferences:java",
     "//chrome/browser/profiles/android:java",
-    "//chrome/browser/signin/services/android:java",
-    "//chrome/browser/sync/android:java",
     "//chrome/test/android:chrome_java_unit_test_support",
     "//components/browser_ui/settings/android:java",
     "//components/password_manager/core/browser:password_manager_java_enums",
diff --git a/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerErrorMessageHelperBridge.java b/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerErrorMessageHelperBridge.java
--- a/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerErrorMessageHelperBridge.java
+++ b/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerErrorMessageHelperBridge.java
@@ -16,11 +16,7 @@ import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;
 import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
 import org.chromium.components.prefs.PrefService;
-import org.chromium.components.signin.AccountManagerFacadeProvider;
-import org.chromium.components.signin.base.CoreAccountInfo;
-import org.chromium.components.signin.identitymanager.ConsentLevel;
 import org.chromium.components.user_prefs.UserPrefs;
 import org.chromium.ui.base.WindowAndroid;
 
@@ -49,15 +45,6 @@ public class PasswordManagerErrorMessageHelperBridge {
      */
     @CalledByNative
     static boolean shouldShowErrorUi() {
-        Profile profile = Profile.getLastUsedRegularProfile();
-        final CoreAccountInfo primaryAccountInfo =
-                IdentityServicesProvider.get().getIdentityManager(profile).getPrimaryAccountInfo(
-                        ConsentLevel.SIGNIN);
-        // It is possible that the account is removed from Chrome between the password manager
-        // calling the Google Play Services backend and Chrome receiving the reply. In that
-        // case, the error is no longer relevant/fixable.
-        if (primaryAccountInfo == null) return false;
-
         if (ChromeFeatureList.getFieldTrialParamByFeatureAsBoolean(
                     ChromeFeatureList.UNIFIED_PASSWORD_MANAGER_ERROR_MESSAGES,
                     "ignore_auth_error_message_timeouts", false)) {
@@ -91,18 +78,5 @@ public class PasswordManagerErrorMessageHelperBridge {
      */
     @CalledByNative
     static void startUpdateAccountCredentialsFlow(WindowAndroid windowAndroid) {
-        Profile profile = Profile.getLastUsedRegularProfile();
-        final CoreAccountInfo primaryAccountInfo =
-                IdentityServicesProvider.get().getIdentityManager(profile).getPrimaryAccountInfo(
-                        ConsentLevel.SIGNIN);
-        // If the account has been removed before calling this method, there are no credentials to
-        // update.
-        if (primaryAccountInfo == null) return;
-        final Activity activity = windowAndroid.getActivity().get();
-        AccountManagerFacadeProvider.getInstance().updateCredentials(
-                CoreAccountInfo.getAndroidAccountFrom(primaryAccountInfo), activity, (success) -> {
-                    RecordHistogram.recordBooleanHistogram(
-                            "PasswordManager.UPMUpdateSignInCredentialsSucces", success);
-                });
     }
 }
diff --git a/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerHelper.java b/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerHelper.java
--- a/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerHelper.java
+++ b/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordManagerHelper.java
@@ -21,9 +21,6 @@ import android.os.SystemClock;
 import androidx.annotation.IntDef;
 import androidx.annotation.VisibleForTesting;
 
-import com.google.android.gms.common.GoogleApiAvailability;
-import com.google.android.gms.common.api.ApiException;
-
 import org.chromium.base.Callback;
 import org.chromium.base.metrics.RecordHistogram;
 import org.chromium.base.supplier.ObservableSupplier;
@@ -34,7 +31,6 @@ import org.chromium.chrome.browser.password_manager.CredentialManagerLauncher.Cr
 import org.chromium.chrome.browser.password_manager.PasswordCheckupClientHelper.PasswordCheckBackendException;
 import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.sync.SyncService;
 import org.chromium.components.browser_ui.settings.SettingsLauncher;
 import org.chromium.components.prefs.PrefService;
 import org.chromium.components.signin.base.CoreAccountInfo;
@@ -147,20 +143,9 @@ public class PasswordManagerHelper {
      *      attempt to launch the credential manager even without syncing enabled.
      */
     public static void showPasswordSettings(Context context, @ManagePasswordsReferrer int referrer,
-            SettingsLauncher settingsLauncher, SyncService syncService,
+            SettingsLauncher settingsLauncher,
             ObservableSupplier<ModalDialogManager> modalDialogManagerSupplier,
             boolean managePasskeys) {
-        RecordHistogram.recordEnumeratedHistogram("PasswordManager.ManagePasswordsReferrer",
-                referrer, ManagePasswordsReferrer.MAX_VALUE + 1);
-
-        if (canUseUpm()) {
-            LoadingModalDialogCoordinator loadingDialogCoordinator =
-                    LoadingModalDialogCoordinator.create(modalDialogManagerSupplier, context);
-            launchTheCredentialManager(referrer, syncService, loadingDialogCoordinator,
-                    modalDialogManagerSupplier, context);
-            return;
-        }
-
         if (managePasskeys && canUseAccountSettings()) {
             // Passkey management has been selected but UPM is not available, possibly because
             // password sync is not turned on. Attempt to use an AccountSettings intent to show
@@ -177,9 +162,7 @@ public class PasswordManagerHelper {
                 return;
             }
 
-            String accountName = (syncService != null)
-                    ? CoreAccountInfo.getEmailFrom(syncService.getAccountInfo())
-                    : "";
+            String accountName = "";
             credentialManagerLauncher.getAccountSettingsIntent(accountName, context::startActivity);
             return;
         }
@@ -204,13 +187,7 @@ public class PasswordManagerHelper {
      * @return True if Unified Password Manager can be used, false otherwise.
      */
     public static boolean canUseUpm() {
-        SyncService syncService = SyncService.get();
-        PrefService prefService = UserPrefs.get(Profile.getLastUsedRegularProfile());
-        return PasswordManagerHelper.usesUnifiedPasswordManagerUI() && syncService != null
-                && hasChosenToSyncPasswords(syncService)
-                && !prefService.getBoolean(
-                        Pref.UNENROLLED_FROM_GOOGLE_MOBILE_SERVICES_DUE_TO_ERRORS)
-                && PasswordManagerBackendSupportHelper.getInstance().isBackendPresent();
+        return false;
     }
 
     /**
@@ -240,19 +217,7 @@ public class PasswordManagerHelper {
      *         loading dialog.
      */
     public static void showPasswordCheckup(Context context, @PasswordCheckReferrer int referrer,
-            SyncService syncService,
             ObservableSupplier<ModalDialogManager> modalDialogManagerSupplier) {
-        assert canUseUpm();
-
-        Optional<String> account = hasChosenToSyncPasswords(syncService)
-                ? Optional.of(CoreAccountInfo.getEmailFrom(syncService.getAccountInfo()))
-                : Optional.empty();
-
-        LoadingModalDialogCoordinator loadingDialogCoordinator =
-                LoadingModalDialogCoordinator.create(modalDialogManagerSupplier, context);
-
-        launchPasswordCheckup(
-                referrer, account, loadingDialogCoordinator, modalDialogManagerSupplier, context);
     }
 
     /**
@@ -332,51 +297,6 @@ public class PasswordManagerHelper {
                 });
     }
 
-    /**
-     * Checks whether the sync feature is enabled and the user has chosen to sync passwords.
-     * Note that this doesn't mean that passwords are actively syncing.
-     *
-     * @param syncService the service to query about the sync status.
-     * @return true if syncing passwords is enabled
-     */
-    public static boolean hasChosenToSyncPasswords(SyncService syncService) {
-        return syncService != null && syncService.isSyncFeatureEnabled()
-                && syncService.getSelectedTypes().contains(UserSelectableType.PASSWORDS);
-    }
-
-    /**
-     * Checks whether the sync feature is enabled, the user has chosen to sync passwords and
-     * they haven't set up a custom passphrase.
-     * The caller should make sure that the sync engine is initialized before calling this
-     * method.
-     *
-     *  Note that this doesn't mean that passwords are actively syncing.
-     *
-     * @param syncService the service to query about the sync status.
-     * @return true if syncing passwords is enabled without custom passphrase.
-     */
-    public static boolean hasChosenToSyncPasswordsWithNoCustomPassphrase(SyncService syncService) {
-        assert syncService.isEngineInitialized();
-        return PasswordManagerHelper.hasChosenToSyncPasswords(syncService)
-                && !syncService.isUsingExplicitPassphrase();
-    }
-
-    /**
-     * Checks whether the user is actively syncing passwords without a custom passphrase.
-     * The caller should make sure that the sync engine is initialized before calling this
-     * method.
-     *
-     * @param syncService the service to query about the sync status.
-     * @return true if actively syncing passwords and no custom passphrase was set.
-     */
-    public static boolean isSyncingPasswordsWithNoCustomPassphrase(SyncService syncService) {
-        assert syncService.isEngineInitialized();
-        if (syncService == null || !syncService.hasSyncConsent()) return false;
-        if (!syncService.getActiveDataTypes().contains(ModelType.PASSWORDS)) return false;
-        if (syncService.isUsingExplicitPassphrase()) return false;
-        return true;
-    }
-
     public static boolean usesUnifiedPasswordManagerUI() {
         if (!ChromeFeatureList.isEnabled(UNIFIED_PASSWORD_MANAGER_ANDROID)) return false;
         @UpmExperimentVariation
@@ -417,52 +337,12 @@ public class PasswordManagerHelper {
     }
 
     public static void launchGmsUpdate(Context context) {
-        Intent intent = new Intent(Intent.ACTION_VIEW);
-        String deepLinkUrl = "market://details?id="
-                + GoogleApiAvailability.GOOGLE_PLAY_SERVICES_PACKAGE + "&referrer=" + STORE_REFERER;
-
-        intent.setPackage("com.android.vending");
-        intent.setData(Uri.parse(deepLinkUrl));
-        intent.putExtra("callerId", context.getPackageName());
-
-        // Request for overlay flow, Play Store will fallback to the default
-        // behaviour if overlay is not available.
-        // TODO(crbug.com/1348506): Use AlleyOop v3 overlay UI after fixing Chrome restart
-        // during the GMS Core installation.
-        // intent.putExtra("overlay", true);
-
-        context.startActivity(intent);
     }
 
     @VisibleForTesting
     static void launchTheCredentialManager(@ManagePasswordsReferrer int referrer,
-            SyncService syncService, LoadingModalDialogCoordinator loadingDialogCoordinator,
+            LoadingModalDialogCoordinator loadingDialogCoordinator,
             ObservableSupplier<ModalDialogManager> modalDialogManagerSupplier, Context context) {
-        assert canUseUpm();
-        assert syncService != null;
-
-        CredentialManagerLauncher credentialManagerLauncher;
-        try {
-            credentialManagerLauncher = getCredentialManagerLauncher();
-        } catch (CredentialManagerBackendException exception) {
-            if (exception.errorCode != CredentialManagerError.BACKEND_VERSION_NOT_SUPPORTED) return;
-
-            showGmsUpdateDialog(modalDialogManagerSupplier, context);
-            return;
-        }
-
-        loadingDialogCoordinator.show();
-
-        long startTimeMs = SystemClock.elapsedRealtime();
-        credentialManagerLauncher.getAccountCredentialManagerIntent(referrer,
-                CoreAccountInfo.getEmailFrom(syncService.getAccountInfo()),
-                (intent)
-                        -> PasswordManagerHelper.launchCredentialManagerIntent(
-                                intent, startTimeMs, true, loadingDialogCoordinator),
-                (exception) -> {
-                    PasswordManagerHelper.recordFailureMetrics(exception, true);
-                    loadingDialogCoordinator.dismiss();
-                });
     }
 
     @VisibleForTesting
@@ -517,24 +397,6 @@ public class PasswordManagerHelper {
         // API call level.
         RecordHistogram.recordEnumeratedHistogram(kGetIntentErrorHistogram,
                 CredentialManagerError.API_ERROR, CredentialManagerError.COUNT);
-
-        if (!(exception instanceof ApiException)) return;
-
-        final String kGetIntentApiErrorHistogram = forAccount
-                ? ACCOUNT_GET_INTENT_API_ERROR_HISTOGRAM
-                : LOCAL_GET_INTENT_API_ERROR_HISTOGRAM;
-        final String kGetIntentErrorConnectionResultCodeHistogram = forAccount
-                ? ACCOUNT_GET_INTENT_ERROR_CONNECTION_RESULT_CODE_HISTOGRAM
-                : LOCAL_GET_INTENT_ERROR_CONNECTION_RESULT_CODE_HISTOGRAM;
-
-        int apiErrorCode = PasswordManagerAndroidBackendUtil.getApiErrorCode(exception);
-        RecordHistogram.recordSparseHistogram(kGetIntentApiErrorHistogram, apiErrorCode);
-        Integer connectionResultCode =
-                PasswordManagerAndroidBackendUtil.getConnectionResultCode(exception);
-        if (connectionResultCode == null) return;
-
-        RecordHistogram.recordSparseHistogram(
-                kGetIntentErrorConnectionResultCodeHistogram, connectionResultCode);
     }
 
     private static void launchIntentAndRecordSuccess(
diff --git a/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordStoreAndroidBackendReceiverBridgeImpl.java b/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordStoreAndroidBackendReceiverBridgeImpl.java
--- a/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordStoreAndroidBackendReceiverBridgeImpl.java
+++ b/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordStoreAndroidBackendReceiverBridgeImpl.java
@@ -40,16 +40,6 @@ class PasswordStoreAndroidBackendReceiverBridgeImpl {
 
     void handleAndroidBackendException(@JobId int jobId, Exception exception) {
         if (mNativeBackendReceiverBridge == 0) return;
-
-        @AndroidBackendErrorType
-        int error = PasswordManagerAndroidBackendUtil.getBackendError(exception);
-        int apiErrorCode = PasswordManagerAndroidBackendUtil.getApiErrorCode(exception);
-        Integer connectionResultCode =
-                PasswordManagerAndroidBackendUtil.getConnectionResultCode(exception);
-
-        PasswordStoreAndroidBackendReceiverBridgeImplJni.get().onError(mNativeBackendReceiverBridge,
-                jobId, error, apiErrorCode, connectionResultCode != null,
-                connectionResultCode == null ? -1 : connectionResultCode.intValue());
     }
 
     void onCompleteWithLogins(@JobId int jobId, byte[] passwords) {
diff --git a/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordSyncControllerDelegateBridgeImpl.java b/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordSyncControllerDelegateBridgeImpl.java
--- a/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordSyncControllerDelegateBridgeImpl.java
+++ b/chrome/browser/password_manager/android/java/src/org/chromium/chrome/browser/password_manager/PasswordSyncControllerDelegateBridgeImpl.java
@@ -8,6 +8,7 @@ import com.google.android.gms.common.api.ApiException;
 
 import org.chromium.base.annotations.CalledByNative;
 import org.chromium.base.annotations.NativeMethods;
+import org.chromium.components.signin.base.CoreAccountInfo;
 
 /**
  * Java-counterpart of the native PasswordSyncControllerDelegateBridgeImpl. It's part of
@@ -38,11 +39,6 @@ class PasswordSyncControllerDelegateBridgeImpl {
      */
     @CalledByNative
     void notifyCredentialManagerWhenSyncing(String accountEmail) {
-        mPasswordSyncControllerDelegate.notifyCredentialManagerWhenSyncing(accountEmail, () -> {
-            if (mNativeDelegateBridgeImpl == 0) return;
-            PasswordSyncControllerDelegateBridgeImplJni.get().onCredentialManagerNotified(
-                    mNativeDelegateBridgeImpl);
-        }, exception -> handleCredentialManagerException(exception));
     }
 
     /**
diff --git a/chrome/browser/password_manager/android/password_manager_settings_service_android_impl.cc b/chrome/browser/password_manager/android/password_manager_settings_service_android_impl.cc
--- a/chrome/browser/password_manager/android/password_manager_settings_service_android_impl.cc
+++ b/chrome/browser/password_manager/android/password_manager_settings_service_android_impl.cc
@@ -68,12 +68,6 @@ const PrefService::Preference* GetRegularPrefFromSetting(
   }
 }
 
-bool HasChosenToSyncPreferences(const syncer::SyncService* sync_service) {
-  return sync_service && sync_service->IsSyncFeatureEnabled() &&
-         sync_service->GetUserSettings()->GetSelectedTypes().Has(
-             syncer::UserSelectableType::kPreferences);
-}
-
 bool IsUnenrolledFromUPM(PrefService* pref_service) {
   return pref_service->GetBoolean(
       password_manager::prefs::kUnenrolledFromGoogleMobileServicesDueToErrors);
@@ -101,7 +95,6 @@ PasswordManagerSettingsServiceAndroidImpl::
                                               syncer::SyncService* sync_service)
     : pref_service_(pref_service), sync_service_(sync_service) {
   DCHECK(pref_service_);
-  DCHECK(sync_service_);
   DCHECK(password_manager::features::UsesUnifiedPasswordManagerUi());
   if (!PasswordSettingsUpdaterAndroidBridgeHelper::CanCreateAccessor())
     return;
@@ -151,7 +144,7 @@ bool PasswordManagerSettingsServiceAndroidImpl::IsSettingEnabled(
     return regular_pref->GetValue()->GetBool();
   }
 
-  if (!IsPasswordSyncEnabled(sync_service_)) {
+  if ((true)) {
     return regular_pref->GetValue()->GetBool();
   }
 
@@ -171,29 +164,13 @@ bool PasswordManagerSettingsServiceAndroidImpl::IsSettingEnabled(
 
 void PasswordManagerSettingsServiceAndroidImpl::RequestSettingsFromBackend() {
   // Backend has settings data only if passwords are synced.
-  if (bridge_helper_ && IsPasswordSyncEnabled(sync_service_) &&
-      !IsUnenrolledFromUPM(pref_service_)) {
-    FetchSettings();
-  }
 }
 
 void PasswordManagerSettingsServiceAndroidImpl::TurnOffAutoSignIn() {
-  if (!bridge_helper_ || !IsPasswordSyncEnabled(sync_service_) ||
-      IsUnenrolledFromUPM(pref_service_)) {
-    pref_service_->SetBoolean(
-        password_manager::prefs::kCredentialsEnableAutosignin, false);
-    return;
-  }
-  if (!HasChosenToSyncPreferences(sync_service_)) {
-    pref_service_->SetBoolean(
-        password_manager::prefs::kCredentialsEnableAutosignin, false);
-  }
-
+  pref_service_->SetBoolean(
+      password_manager::prefs::kCredentialsEnableAutosignin, false);
   pref_service_->SetBoolean(password_manager::prefs::kAutoSignInEnabledGMS,
                             false);
-  bridge_helper_->SetPasswordSettingValue(
-      SyncingAccount(sync_service_->GetAccountInfo().email),
-      PasswordManagerSetting::kAutoSignIn, false);
 }
 
 void PasswordManagerSettingsServiceAndroidImpl::Init() {
@@ -204,8 +181,7 @@ void PasswordManagerSettingsServiceAndroidImpl::Init() {
   lifecycle_helper_->RegisterObserver(base::BindRepeating(
       &PasswordManagerSettingsServiceAndroidImpl::OnChromeForegrounded,
       weak_ptr_factory_.GetWeakPtr()));
-  is_password_sync_enabled_ = IsPasswordSyncEnabled(sync_service_);
-  sync_service_->AddObserver(this);
+  is_password_sync_enabled_ = false;
 
   pref_change_registrar_.Init(pref_service_);
   pref_change_registrar_.Add(
@@ -225,8 +201,7 @@ void PasswordManagerSettingsServiceAndroidImpl::OnSettingValueFetched(
     PasswordManagerSetting setting,
     bool value) {
   UpdateSettingFetchState(setting);
-  if (!fetch_after_sync_status_change_in_progress_ &&
-      !IsPasswordSyncEnabled(sync_service_)) {
+  if (!fetch_after_sync_status_change_in_progress_) {
     return;
   }
 
@@ -239,11 +214,9 @@ void PasswordManagerSettingsServiceAndroidImpl::OnSettingValueFetched(
   // when preference syncing is off, otherwise it might cause sync cycles.
   // When sync is on, the regular preference gets updated via sync, so this
   // step is not necessary.
-  if (!HasChosenToSyncPreferences(sync_service_)) {
     const PrefService::Preference* regular_pref =
         GetRegularPrefFromSetting(pref_service_, setting);
     pref_service_->SetBoolean(regular_pref->name(), value);
-  }
 }
 
 void PasswordManagerSettingsServiceAndroidImpl::OnSettingValueAbsent(
@@ -252,24 +225,6 @@ void PasswordManagerSettingsServiceAndroidImpl::OnSettingValueAbsent(
   UpdateSettingFetchState(setting);
   if (IsUnenrolledFromUPM(pref_service_))
     return;
-
-  if (!IsPasswordSyncEnabled(sync_service_))
-    return;
-
-  const PrefService::Preference* pref =
-      GetGMSPrefFromSetting(pref_service_, setting);
-
-  // If both GMS and Chrome have default values for the setting, then no update
-  // is needed.
-  if (!pref_service_->GetUserPrefValue(pref->name()))
-    return;
-
-  // If Chrome has an explicitly set value, GMS needs to know about it.
-  // TODO(crbug.com/1289700): Check whether this should be guarded by a
-  // migration pref.
-  bridge_helper_->SetPasswordSettingValue(
-      SyncingAccount(sync_service_->GetAccountInfo().email), setting,
-      pref->GetValue()->GetBool());
 }
 
 void PasswordManagerSettingsServiceAndroidImpl::MigratePrefsIfNeeded() {
@@ -285,10 +240,6 @@ void PasswordManagerSettingsServiceAndroidImpl::MigratePrefsIfNeeded() {
                             true);
   // No need to copy the values until sync turns on. When sync turns on, this
   // will be handled as part of the sync state change rather than migration.
-  if (!IsPasswordSyncEnabled(sync_service_))
-    return;
-
-  DumpChromePrefsIntoGMSPrefs();
 }
 
 void PasswordManagerSettingsServiceAndroidImpl::OnStateChanged(
diff --git a/chrome/browser/privacy/BUILD.gn b/chrome/browser/privacy/BUILD.gn
--- a/chrome/browser/privacy/BUILD.gn
+++ b/chrome/browser/privacy/BUILD.gn
@@ -11,7 +11,6 @@ if (is_android) {
       "//chrome/android:*",
       "//chrome/browser/feed/android:*",
       "//chrome/browser/ui/android/omnibox:*",
-      "//chrome/browser/ui/android/signin:*",
     ]
     sources = [
       "java/src/org/chromium/chrome/browser/privacy/secure_dns/SecureDnsBridge.java",
diff --git a/chrome/browser/privacy_guide/android/BUILD.gn b/chrome/browser/privacy_guide/android/BUILD.gn
--- a/chrome/browser/privacy_guide/android/BUILD.gn
+++ b/chrome/browser/privacy_guide/android/BUILD.gn
@@ -28,7 +28,6 @@ android_library("java") {
     "//chrome/browser/privacy_sandbox/android:java",
     "//chrome/browser/profiles/android:java",
     "//chrome/browser/safe_browsing/android:java",
-    "//chrome/browser/signin/services/android:java",
     "//chrome/browser/sync/android:java",
     "//components/browser_ui/bottomsheet/android:java",
     "//components/browser_ui/settings/android:java",
@@ -71,7 +70,6 @@ robolectric_library("junit") {
     "//base:base_junit_test_support",
     "//chrome/browser/profiles/android:java",
     "//chrome/browser/safe_browsing/android:java",
-    "//chrome/browser/signin/services/android:java",
     "//chrome/browser/sync/android:java",
     "//components/browser_ui/bottomsheet/android:java",
     "//components/browser_ui/site_settings/android:java",
diff --git a/chrome/browser/privacy_guide/android/java/res/layout/privacy_guide_msbb_step.xml b/chrome/browser/privacy_guide/android/java/res/layout/privacy_guide_msbb_step.xml
--- a/chrome/browser/privacy_guide/android/java/res/layout/privacy_guide_msbb_step.xml
+++ b/chrome/browser/privacy_guide/android/java/res/layout/privacy_guide_msbb_step.xml
@@ -29,13 +29,6 @@ found in the LICENSE file.
             android:src="@drawable/privacy_guide_msbb_image"
             android:importantForAccessibility="no" />
 
-        <com.google.android.material.switchmaterial.SwitchMaterial
-            android:id="@+id/msbb_switch"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:showText="false"
-            android:text="@string/url_keyed_anonymized_data_title" />
-
         <org.chromium.chrome.browser.privacy_guide.PrivacyGuideExplanationHeading
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
diff --git a/chrome/browser/privacy_guide/android/java/src/org/chromium/chrome/browser/privacy_guide/MSBBFragment.java b/chrome/browser/privacy_guide/android/java/src/org/chromium/chrome/browser/privacy_guide/MSBBFragment.java
--- a/chrome/browser/privacy_guide/android/java/src/org/chromium/chrome/browser/privacy_guide/MSBBFragment.java
+++ b/chrome/browser/privacy_guide/android/java/src/org/chromium/chrome/browser/privacy_guide/MSBBFragment.java
@@ -13,7 +13,6 @@ import androidx.appcompat.widget.SwitchCompat;
 import androidx.fragment.app.Fragment;
 
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.services.UnifiedConsentServiceBridge;
 
 /**
  * Controls the behaviour of the MSBB privacy guide page.
@@ -27,13 +26,5 @@ public class MSBBFragment extends Fragment {
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
-        SwitchCompat msbbSwitch = view.findViewById(R.id.msbb_switch);
-        msbbSwitch.setChecked(PrivacyGuideUtils.isMsbbEnabled());
-
-        msbbSwitch.setOnCheckedChangeListener((button, isChecked) -> {
-            PrivacyGuideMetricsDelegate.recordMetricsOnMSBBChange(isChecked);
-            UnifiedConsentServiceBridge.setUrlKeyedAnonymizedDataCollectionEnabled(
-                    Profile.getLastUsedRegularProfile(), isChecked);
-        });
     }
 }
diff --git a/chrome/browser/privacy_guide/android/java/src/org/chromium/chrome/browser/privacy_guide/PrivacyGuideUtils.java b/chrome/browser/privacy_guide/android/java/src/org/chromium/chrome/browser/privacy_guide/PrivacyGuideUtils.java
--- a/chrome/browser/privacy_guide/android/java/src/org/chromium/chrome/browser/privacy_guide/PrivacyGuideUtils.java
+++ b/chrome/browser/privacy_guide/android/java/src/org/chromium/chrome/browser/privacy_guide/PrivacyGuideUtils.java
@@ -10,7 +10,6 @@ import android.content.Intent;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.safe_browsing.SafeBrowsingBridge;
 import org.chromium.chrome.browser.safe_browsing.SafeBrowsingState;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
 import org.chromium.chrome.browser.sync.SyncService;
 import org.chromium.components.content_settings.CookieControlsMode;
 import org.chromium.components.content_settings.PrefNames;
@@ -36,9 +35,7 @@ class PrivacyGuideUtils {
     }
 
     static boolean isUserSignedIn() {
-        IdentityManager identityManager = IdentityServicesProvider.get().getIdentityManager(
-                Profile.getLastUsedRegularProfile());
-        return identityManager.hasPrimaryAccount(ConsentLevel.SIGNIN);
+        return false;
     }
 
     static @SafeBrowsingState int getSafeBrowsingState() {
diff --git a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
--- a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
+++ b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
@@ -389,8 +389,10 @@
 #if !BUILDFLAG(IS_CHROMEOS_ASH) || !BUILDFLAG(IS_ANDROID)
 #include "chrome/browser/profiles/profile_statistics_factory.h"
 #include "chrome/browser/ui/startup/first_run_service.h"
+#if BUILDFLAG(ENABLE_DICE_SUPPORT) || BUILDFLAG(ENABLE_MIRROR)
 #include "chrome/browser/ui/webui/signin/turn_sync_on_helper.h"
 #endif
+#endif
 
 #if !BUILDFLAG(IS_ANDROID) && !BUILDFLAG(IS_CHROMEOS_LACROS)
 #include "chrome/browser/speech/speech_recognition_client_browser_interface_factory.h"
@@ -972,7 +974,6 @@ void ChromeBrowserMainExtraPartsProfiles::
   TtsClientFactoryLacros::GetInstance();
 #endif
 #if !BUILDFLAG(IS_CHROMEOS_ASH) && !BUILDFLAG(IS_ANDROID)
-  TurnSyncOnHelper::EnsureFactoryBuilt();
 #endif
   UnifiedConsentServiceFactory::GetInstance();
   UnusedSitePermissionsServiceFactory::GetInstance();
diff --git a/chrome/browser/search_resumption/BUILD.gn b/chrome/browser/search_resumption/BUILD.gn
--- a/chrome/browser/search_resumption/BUILD.gn
+++ b/chrome/browser/search_resumption/BUILD.gn
@@ -27,8 +27,6 @@ android_library("java") {
     "//chrome/browser/preferences:java",
     "//chrome/browser/profiles/android:java",
     "//chrome/browser/search_engines/android:java",
-    "//chrome/browser/signin/services/android:java",
-    "//chrome/browser/sync/android:java",
     "//chrome/browser/tab:java",
     "//chrome/browser/tabmodel:java",
     "//chrome/browser/ui/android/omnibox:java",
@@ -82,8 +80,6 @@ robolectric_library("junit") {
     "//chrome/browser/preferences:java",
     "//chrome/browser/profiles/android:java",
     "//chrome/browser/search_engines/android:java",
-    "//chrome/browser/signin/services/android:java",
-    "//chrome/browser/sync/android:java",
     "//chrome/browser/tab:java",
     "//chrome/browser/ui/android/omnibox:java",
     "//chrome/test/android:chrome_java_unit_test_support",
diff --git a/chrome/browser/search_resumption/java/src/org/chromium/chrome/browser/search_resumption/SearchResumptionModuleMediator.java b/chrome/browser/search_resumption/java/src/org/chromium/chrome/browser/search_resumption/SearchResumptionModuleMediator.java
--- a/chrome/browser/search_resumption/java/src/org/chromium/chrome/browser/search_resumption/SearchResumptionModuleMediator.java
+++ b/chrome/browser/search_resumption/java/src/org/chromium/chrome/browser/search_resumption/SearchResumptionModuleMediator.java
@@ -20,10 +20,6 @@ import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.search_engines.TemplateUrlServiceFactory;
 import org.chromium.chrome.browser.search_resumption.SearchResumptionModuleUtils.ModuleNotShownReason;
 import org.chromium.chrome.browser.search_resumption.SearchResumptionUserData.SuggestionResult;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
-import org.chromium.chrome.browser.signin.services.SigninManager;
-import org.chromium.chrome.browser.signin.services.SigninManager.SignInStateObserver;
-import org.chromium.chrome.browser.sync.SyncService;
 import org.chromium.chrome.browser.tab.Tab;
 import org.chromium.components.metrics.OmniboxEventProtos.OmniboxEventProto.PageClassification;
 import org.chromium.components.omnibox.AutocompleteMatch;
@@ -38,15 +34,11 @@ import java.util.List;
 /**
  * This class holds querying search suggestions related business logic.
  */
-public class SearchResumptionModuleMediator implements OnSuggestionsReceivedListener,
-                                                       SignInStateObserver,
-                                                       SyncService.SyncStateChangedListener {
+public class SearchResumptionModuleMediator implements OnSuggestionsReceivedListener {
     private final ViewStub mStub;
     private final Tab mTabToTrackSuggestion;
     private final Tab mCurrentTab;
     private final SearchResumptionTileBuilder mTileBuilder;
-    private final SigninManager mSignInManager;
-    private final SyncService mSyncService;
     private final AutocompleteControllerProvider mAutocompleteProvider;
     private final TemplateUrlService mTemplateUrlService;
     private AutocompleteController mAutoComplete;
@@ -81,10 +73,6 @@ public class SearchResumptionModuleMediator implements OnSuggestionsReceivedList
         } else {
             start(profile);
         }
-        mSignInManager = IdentityServicesProvider.get().getSigninManager(profile);
-        mSignInManager.addSignInStateObserver(this);
-        mSyncService = SyncService.get();
-        mSyncService.addSyncStateChangedListener(this);
     }
 
     @Override
@@ -102,27 +90,6 @@ public class SearchResumptionModuleMediator implements OnSuggestionsReceivedList
                 autocompleteResult.getSuggestionsList(), false /* useCachedResults */);
     }
 
-    /**
-     * SyncService.SyncStateChangedListener implementation, listens to sync state changes.
-     */
-    @Override
-    public void syncStateChanged() {
-        mHasKeepEverythingSynced = mSyncService.hasKeepEverythingSynced();
-        updateVisibility();
-    }
-
-    @Override
-    public void onSignedIn() {
-        mIsSignedIn = true;
-        updateVisibility();
-    }
-
-    @Override
-    public void onSignedOut() {
-        mIsSignedIn = false;
-        updateVisibility();
-    }
-
     /**
      * Called when the search suggestions are available using the new service API.
      * @param suggestionTexts The display texts of the suggestions.
@@ -183,8 +150,6 @@ public class SearchResumptionModuleMediator implements OnSuggestionsReceivedList
             mSearchResumptionModuleBridge.destroy();
         }
         mTemplateUrlService.removeObserver(this::onTemplateURLServiceChanged);
-        mSignInManager.removeSignInStateObserver(this);
-        mSyncService.removeSyncStateChangedListener(this);
     }
 
     /**
diff --git a/chrome/browser/search_resumption/java/src/org/chromium/chrome/browser/search_resumption/SearchResumptionModuleUtils.java b/chrome/browser/search_resumption/java/src/org/chromium/chrome/browser/search_resumption/SearchResumptionModuleUtils.java
--- a/chrome/browser/search_resumption/java/src/org/chromium/chrome/browser/search_resumption/SearchResumptionModuleUtils.java
+++ b/chrome/browser/search_resumption/java/src/org/chromium/chrome/browser/search_resumption/SearchResumptionModuleUtils.java
@@ -18,8 +18,6 @@ import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.search_engines.TemplateUrlServiceFactory;
 import org.chromium.chrome.browser.search_resumption.SearchResumptionUserData.SuggestionResult;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
-import org.chromium.chrome.browser.sync.SyncService;
 import org.chromium.chrome.browser.tab.Tab;
 import org.chromium.chrome.browser.tab.state.CriticalPersistedTabData;
 import org.chromium.chrome.browser.tabmodel.TabModel;
@@ -136,16 +134,6 @@ public class SearchResumptionModuleUtils {
             return false;
         }
 
-        if (!IdentityServicesProvider.get().getIdentityManager(profile).hasPrimaryAccount(
-                    ConsentLevel.SYNC)) {
-            recordModuleNotShownReason(ModuleNotShownReason.NOT_SIGN_IN);
-            return false;
-        }
-
-        if (!SyncService.get().hasKeepEverythingSynced()) {
-            recordModuleNotShownReason(ModuleNotShownReason.NOT_SYNC);
-            return false;
-        }
         return true;
     }
 
diff --git a/chrome/browser/share/android/java/src/org/chromium/chrome/browser/share/send_tab_to_self/ManageAccountDevicesLinkView.java b/chrome/browser/share/android/java/src/org/chromium/chrome/browser/share/send_tab_to_self/ManageAccountDevicesLinkView.java
--- a/chrome/browser/share/android/java/src/org/chromium/chrome/browser/share/send_tab_to_self/ManageAccountDevicesLinkView.java
+++ b/chrome/browser/share/android/java/src/org/chromium/chrome/browser/share/send_tab_to_self/ManageAccountDevicesLinkView.java
@@ -24,7 +24,6 @@ import org.chromium.chrome.browser.browserservices.intents.WebappConstants;
 import org.chromium.chrome.browser.document.ChromeLauncherActivity;
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
 import org.chromium.components.browser_ui.widget.RoundedCornerImageView;
 import org.chromium.components.embedder_support.util.UrlConstants;
 import org.chromium.components.signin.Tribool;
@@ -75,27 +74,9 @@ public class ManageAccountDevicesLinkView extends LinearLayout {
         LayoutInflater.from(getContext())
                 .inflate(R.layout.send_tab_to_self_manage_devices_link, this);
 
-        AccountInfo account = getSharingAccountInfo();
-        assert account != null;
-
-        // The avatar can be null in tests.
-        if (account.getAccountImage() != null) {
-            RoundedCornerImageView avatarView = findViewById(R.id.account_avatar);
-            int accountAvatarSizePx =
-                    Math.round(ACCOUNT_AVATAR_SIZE_DP * getResources().getDisplayMetrics().density);
-            avatarView.setImageBitmap(Bitmap.createScaledBitmap(
-                    account.getAccountImage(), accountAvatarSizePx, accountAvatarSizePx, false));
-            avatarView.setRoundedCorners(accountAvatarSizePx / 2, accountAvatarSizePx / 2,
-                    accountAvatarSizePx / 2, accountAvatarSizePx / 2);
-        }
-
         TextView linkView = findViewById(R.id.manage_devices_link);
-        // If the feature is disabled, the email address is displayable by default.
-        final boolean canHaveEmailAddressDisplayed =
-                account.getAccountCapabilities().canHaveEmailAddressDisplayed() == Tribool.TRUE
-                || !ChromeFeatureList.sHideNonDisplayableAccountEmail.isEnabled();
         final String accountFullNameOrEmail =
-                canHaveEmailAddressDisplayed ? account.getEmail() : account.getFullName();
+                "nobody@example.com";
         if (mShowLink) {
             SpannableString linkText = SpanApplier.applySpans(
                     getResources().getString(
@@ -124,11 +105,4 @@ public class ManageAccountDevicesLinkView extends LinearLayout {
         IntentUtils.addTrustedIntentExtras(intent);
         getContext().startActivity(intent);
     }
-
-    private static AccountInfo getSharingAccountInfo() {
-        IdentityManager identityManager = IdentityServicesProvider.get().getIdentityManager(
-                Profile.getLastUsedRegularProfile());
-        return identityManager.findExtendedAccountInfoByEmailAddress(
-                identityManager.getPrimaryAccountInfo(ConsentLevel.SIGNIN).getEmail());
-    }
 }
diff --git a/chrome/browser/share/android/java/src/org/chromium/chrome/browser/share/send_tab_to_self/SendTabToSelfCoordinator.java b/chrome/browser/share/android/java/src/org/chromium/chrome/browser/share/send_tab_to_self/SendTabToSelfCoordinator.java
--- a/chrome/browser/share/android/java/src/org/chromium/chrome/browser/share/send_tab_to_self/SendTabToSelfCoordinator.java
+++ b/chrome/browser/share/android/java/src/org/chromium/chrome/browser/share/send_tab_to_self/SendTabToSelfCoordinator.java
@@ -12,18 +12,10 @@ import androidx.annotation.StringRes;
 import org.chromium.base.Callback;
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
-import org.chromium.chrome.browser.signin.services.SigninManager;
-import org.chromium.chrome.browser.sync.SyncService;
 import org.chromium.chrome.browser.ui.signin.R;
-import org.chromium.chrome.browser.ui.signin.account_picker.AccountPickerBottomSheetCoordinator;
-import org.chromium.chrome.browser.ui.signin.account_picker.AccountPickerBottomSheetCoordinator.EntryPoint;
 import org.chromium.chrome.browser.ui.signin.account_picker.AccountPickerBottomSheetStrings;
-import org.chromium.chrome.browser.ui.signin.account_picker.AccountPickerDelegate;
 import org.chromium.components.browser_ui.bottomsheet.BottomSheetController;
 import org.chromium.components.browser_ui.bottomsheet.EmptyBottomSheetObserver;
-import org.chromium.components.signin.AccountUtils;
-import org.chromium.components.signin.base.GoogleServiceAuthError;
 import org.chromium.ui.base.WindowAndroid;
 
 import java.util.List;
@@ -33,108 +25,6 @@ import java.util.Optional;
  * Coordinator for displaying the send tab to self feature.
  */
 public class SendTabToSelfCoordinator {
-    /**
-     * Waits for Sync to download the list of target devices after sign-in. Aborts if the
-     * user dismisses the sign-in bottom sheet ("account picker") before success.
-     */
-    private static class TargetDeviceListWaiter
-            extends EmptyBottomSheetObserver implements SyncService.SyncStateChangedListener {
-        private final BottomSheetController mBottomSheetController;
-        private final String mUrl;
-        private final Runnable mGotDeviceListCallback;
-        private final Profile mProfile;
-
-        /**
-         * Note there's no need for a notion for a failure callback because in that case the
-         * account picker bottom sheet was closed and there's nothing left to do (simply don't
-         * show any other bottom sheet).
-         */
-        public TargetDeviceListWaiter(BottomSheetController bottomSheetController, String url,
-                Runnable gotDeviceListCallback, Profile profile) {
-            mBottomSheetController = bottomSheetController;
-            mUrl = url;
-            mGotDeviceListCallback = gotDeviceListCallback;
-            mProfile = profile;
-
-            SyncService.get().addSyncStateChangedListener(this);
-            mBottomSheetController.addObserver(this);
-            notifyAndDestroyIfDone();
-        }
-
-        private void destroy() {
-            SyncService.get().removeSyncStateChangedListener(this);
-            mBottomSheetController.removeObserver(this);
-        }
-
-        @Override
-        public void syncStateChanged() {
-            notifyAndDestroyIfDone();
-        }
-
-        @Override
-        public void onSheetClosed(int reason) {
-            // The account picker doesn't dismiss itself, so this must mean the user did.
-            destroy();
-        }
-
-        private void notifyAndDestroyIfDone() {
-            Optional</*@EntryPointDisplayReason*/ Integer> displayReason =
-                    SendTabToSelfAndroidBridge.getEntryPointDisplayReason(mProfile, mUrl);
-            // The model is starting up, keep waiting.
-            if (!displayReason.isPresent()) return;
-
-            switch (displayReason.get()) {
-                case EntryPointDisplayReason.OFFER_SIGN_IN:
-                    return;
-                case EntryPointDisplayReason.INFORM_NO_TARGET_DEVICE:
-                case EntryPointDisplayReason.OFFER_FEATURE:
-                    break;
-            }
-
-            destroy();
-            mGotDeviceListCallback.run();
-        }
-    }
-
-    /** Performs sign-in for the promo shown to signed-out users. */
-    private static class SendTabToSelfAccountPickerDelegate implements AccountPickerDelegate {
-        private final Runnable mOnSignInCompleteCallback;
-        private final Profile mProfile;
-
-        public SendTabToSelfAccountPickerDelegate(
-                Runnable onSignInCompleteCallback, Profile profile) {
-            mOnSignInCompleteCallback = onSignInCompleteCallback;
-            mProfile = profile;
-        }
-
-        @Override
-        public void destroy() {}
-
-        @Override
-        public void signIn(
-                String accountEmail, Callback<GoogleServiceAuthError> onSignInErrorCallback) {
-            SigninManager signinManager = IdentityServicesProvider.get().getSigninManager(mProfile);
-            Account account = AccountUtils.createAccountFromName(accountEmail);
-            signinManager.signin(account, new SigninManager.SignInCallback() {
-                @Override
-                public void onSignInComplete() {
-                    mOnSignInCompleteCallback.run();
-                }
-
-                @Override
-                public void onSignInAborted() {
-                    // TODO(crbug.com/1219434) Consider calling onSignInErrorCallback here.
-                }
-            });
-        }
-
-        @Override
-        @EntryPoint
-        public int getEntryPoint() {
-            return EntryPoint.SEND_TAB_TO_SELF;
-        }
-    }
-
     private final Context mContext;
     private final WindowAndroid mWindowAndroid;
     private final String mUrl;
@@ -153,51 +43,9 @@ public class SendTabToSelfCoordinator {
     }
 
     public void show() {
-        Optional</*@EntryPointDisplayReason*/ Integer> displayReason =
-                SendTabToSelfAndroidBridge.getEntryPointDisplayReason(mProfile, mUrl);
-        if (!displayReason.isPresent()) {
-            // This must be the old behavior where the entry point is shown even in states where
-            // no promo is shown.
-            assert !ChromeFeatureList.isEnabled(ChromeFeatureList.SEND_TAB_TO_SELF_SIGNIN_PROMO);
-            MetricsRecorder.recordSendingEvent(SendingEvent.SHOW_NO_TARGET_DEVICE_MESSAGE);
-            mController.requestShowContent(new NoTargetDeviceBottomSheetContent(mContext), true);
-            return;
-        }
-
-        switch (displayReason.get()) {
-            case EntryPointDisplayReason.INFORM_NO_TARGET_DEVICE:
-                MetricsRecorder.recordSendingEvent(SendingEvent.SHOW_NO_TARGET_DEVICE_MESSAGE);
-                mController.requestShowContent(
-                        new NoTargetDeviceBottomSheetContent(mContext), true);
-                return;
-            case EntryPointDisplayReason.OFFER_FEATURE:
-                MetricsRecorder.recordSendingEvent(SendingEvent.SHOW_DEVICE_LIST);
-                // TODO(crbug.com/1219434): Merge with INFORM_NO_TARGET_DEVICE, just let the UI
-                // differentiate between the 2 by checking the device list size.
-                List<TargetDeviceInfo> targetDevices =
-                        SendTabToSelfAndroidBridge.getAllTargetDeviceInfos(mProfile);
-                mController.requestShowContent(
-                        new DevicePickerBottomSheetContent(
-                                mContext, mUrl, mTitle, mController, targetDevices, mProfile),
-                        true);
-                return;
-            case EntryPointDisplayReason.OFFER_SIGN_IN: {
-                MetricsRecorder.recordSendingEvent(SendingEvent.SHOW_SIGNIN_PROMO);
-                new AccountPickerBottomSheetCoordinator(mWindowAndroid, mController,
-                        new SendTabToSelfAccountPickerDelegate(this::onSignInComplete, mProfile),
-                        new BottomSheetStrings());
-                return;
-            }
-        }
     }
 
     private void onSignInComplete() {
-        new TargetDeviceListWaiter(mController, mUrl, this::onTargetDeviceListReady, mProfile);
-    }
-
-    private void onTargetDeviceListReady() {
-        mController.hideContent(mController.getCurrentSheetContent(), /*animate=*/true);
-        show();
     }
 
     /** A class to store the STTS specific strings for the signin bottom sheet */
diff --git a/chrome/browser/signin/account_consistency_mode_manager.cc b/chrome/browser/signin/account_consistency_mode_manager.cc
--- a/chrome/browser/signin/account_consistency_mode_manager.cc
+++ b/chrome/browser/signin/account_consistency_mode_manager.cc
@@ -34,9 +34,9 @@
 #error "Dice and Mirror cannot be both enabled."
 #endif
 
-#if !BUILDFLAG(ENABLE_DICE_SUPPORT) && !BUILDFLAG(ENABLE_MIRROR)
-#error "Either Dice or Mirror should be enabled."
-#endif
+// #if !BUILDFLAG(ENABLE_DICE_SUPPORT) && !BUILDFLAG(ENABLE_MIRROR)
+// #error "Either Dice or Mirror should be enabled."
+// #endif
 
 using signin::AccountConsistencyMethod;
 
@@ -211,6 +211,5 @@ AccountConsistencyModeManager::ComputeAccountConsistencyMethod(
   return AccountConsistencyMethod::kDice;
 #endif
 
-  NOTREACHED();
   return AccountConsistencyMethod::kDisabled;
 }
diff --git a/chrome/browser/signin/identity_manager_factory.cc b/chrome/browser/signin/identity_manager_factory.cc
--- a/chrome/browser/signin/identity_manager_factory.cc
+++ b/chrome/browser/signin/identity_manager_factory.cc
@@ -74,16 +74,11 @@ IdentityManagerFactory::IdentityManagerFactory()
   DependsOn(ProfileAccountManagerFactory::GetInstance());
 #endif
   DependsOn(ChromeSigninClientFactory::GetInstance());
-  signin::SetIdentityManagerProvider(
-      base::BindRepeating([](content::BrowserContext* context) {
-        return GetForProfile(Profile::FromBrowserContext(context));
-      }));
   // TODO(crbug.com/1380593): This should declare a dependency to
   // CookieSettingsFactory but this causes a hang for some reason.
 }
 
 IdentityManagerFactory::~IdentityManagerFactory() {
-  signin::SetIdentityManagerProvider({});
 }
 
 // static
diff --git a/chrome/browser/signin/identity_services_provider_android.cc b/chrome/browser/signin/identity_services_provider_android.cc
--- a/chrome/browser/signin/identity_services_provider_android.cc
+++ b/chrome/browser/signin/identity_services_provider_android.cc
@@ -7,7 +7,6 @@
 #include "chrome/browser/profiles/profile_android.h"
 #include "chrome/browser/signin/identity_manager_factory.h"
 #include "chrome/browser/signin/services/android/jni_headers/IdentityServicesProvider_jni.h"
-#include "chrome/browser/signin/signin_manager_android_factory.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 
 using base::android::JavaParamRef;
@@ -38,15 +37,3 @@ JNI_IdentityServicesProvider_GetAccountTrackerService(
              ? identity_manager->LegacyGetAccountTrackerServiceJavaObject()
              : nullptr;
 }
-
-static ScopedJavaLocalRef<jobject>
-JNI_IdentityServicesProvider_GetSigninManager(
-    JNIEnv* env,
-    const JavaParamRef<jobject>& j_profile_android) {
-  Profile* profile = ProfileAndroid::FromProfileAndroid(j_profile_android);
-  SigninManagerAndroid* signin_manager =
-      SigninManagerAndroidFactory::GetForProfile(profile);
-  // Ensuring that the pointer is not null here produces unactionable stack
-  // traces, so just let the Java side handle possible issues with null.
-  return signin_manager ? signin_manager->GetJavaObject() : nullptr;
-}
diff --git a/chrome/browser/signin/services/android/java/src/org/chromium/chrome/browser/signin/services/IdentityServicesProvider.java b/chrome/browser/signin/services/android/java/src/org/chromium/chrome/browser/signin/services/IdentityServicesProvider.java
--- a/chrome/browser/signin/services/android/java/src/org/chromium/chrome/browser/signin/services/IdentityServicesProvider.java
+++ b/chrome/browser/signin/services/android/java/src/org/chromium/chrome/browser/signin/services/IdentityServicesProvider.java
@@ -61,22 +61,9 @@ public class IdentityServicesProvider {
         return result;
     }
 
-    /**
-     * Getter for {@link SigninManager} instance for given profile.
-     * @param profile The profile to get regarding sign-in manager.
-     * @return a {@link SigninManager} instance, or null if the incognito Profile is supplied.
-     */
-    @MainThread
-    public @Nullable SigninManager getSigninManager(Profile profile) {
-        ThreadUtils.assertOnUiThread();
-        SigninManager result = IdentityServicesProviderJni.get().getSigninManager(profile);
-        return result;
-    }
-
     @NativeMethods
     public interface Natives {
         IdentityManager getIdentityManager(Profile profile);
         AccountTrackerService getAccountTrackerService(Profile profile);
-        SigninManager getSigninManager(Profile profile);
     }
 }
diff --git a/chrome/browser/supervised_user/BUILD.gn b/chrome/browser/supervised_user/BUILD.gn
--- a/chrome/browser/supervised_user/BUILD.gn
+++ b/chrome/browser/supervised_user/BUILD.gn
@@ -81,7 +81,6 @@ if (is_android) {
       "//base:jni_java",
       "//build/android:build_java",
       "//chrome/browser/profiles/android:java",
-      "//chrome/browser/signin/services/android:java",
       "//chrome/browser/ui/android/strings:ui_strings_grd",
       "//components/browser_ui/bottomsheet/android:java",
       "//components/browser_ui/widget/android:java",
diff --git a/chrome/browser/supervised_user/android/java/src/org/chromium/chrome/browser/supervised_user/website_approval/WebsiteApprovalMediator.java b/chrome/browser/supervised_user/android/java/src/org/chromium/chrome/browser/supervised_user/website_approval/WebsiteApprovalMediator.java
--- a/chrome/browser/supervised_user/android/java/src/org/chromium/chrome/browser/supervised_user/website_approval/WebsiteApprovalMediator.java
+++ b/chrome/browser/supervised_user/android/java/src/org/chromium/chrome/browser/supervised_user/website_approval/WebsiteApprovalMediator.java
@@ -5,7 +5,6 @@
 package org.chromium.chrome.browser.supervised_user.website_approval;
 
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
 import org.chromium.components.browser_ui.bottomsheet.BottomSheetController;
 import org.chromium.components.signin.base.AccountInfo;
 import org.chromium.components.signin.base.CoreAccountInfo;
@@ -43,28 +42,5 @@ class WebsiteApprovalMediator {
                     BottomSheetController.StateChangeReason.INTERACTION_COMPLETE);
             mCompletionCallback.onWebsiteDenied();
         });
-
-        // Set the child name.  We use the given name if there is one for this account, otherwise we
-        // use the full account email address.
-        IdentityManager identityManager = IdentityServicesProvider.get().getIdentityManager(
-                Profile.getLastUsedRegularProfile());
-        String childEmail = CoreAccountInfo.getEmailFrom(
-                identityManager.getPrimaryAccountInfo(ConsentLevel.SIGNIN));
-        if (childEmail == null) {
-            // This is an unexpected window condition: there is no signed in account.
-            // TODO(crbug.com/1330900): dismiss the bottom sheet.
-            return;
-        }
-        AccountInfo childAccountInfo =
-                identityManager.findExtendedAccountInfoByEmailAddress(childEmail);
-
-        String childNameProperty = childEmail;
-        if (childAccountInfo != null && !childAccountInfo.getGivenName().isEmpty()) {
-            childNameProperty = childAccountInfo.getGivenName();
-        }
-        mModel.set(WebsiteApprovalProperties.CHILD_NAME, childNameProperty);
-
-        // Now show the actual content.
-        mBottomSheetController.requestShowContent(mSheetContent, true);
     }
 }
diff --git a/chrome/browser/sync/sync_service_factory.cc b/chrome/browser/sync/sync_service_factory.cc
--- a/chrome/browser/sync/sync_service_factory.cc
+++ b/chrome/browser/sync/sync_service_factory.cc
@@ -81,7 +81,7 @@
 #endif  // BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_MAC) ||
         // BUILDFLAG(IS_WIN)
 
-namespace {
+/*namespace {
 
 std::unique_ptr<KeyedService> BuildSyncService(
     content::BrowserContext* context) {
@@ -191,7 +191,7 @@ std::unique_ptr<KeyedService> BuildSyncService(
   return sync_service;
 }
 
-}  // anonymous namespace
+}*/  // anonymous namespace
 
 // static
 SyncServiceFactory* SyncServiceFactory::GetInstance() {
@@ -282,7 +282,7 @@ SyncServiceFactory::~SyncServiceFactory() = default;
 
 KeyedService* SyncServiceFactory::BuildServiceInstanceFor(
     content::BrowserContext* context) const {
-  return BuildSyncService(context).release();
+  return nullptr;
 }
 
 bool SyncServiceFactory::ServiceIsNULLWhileTesting() const {
@@ -324,9 +324,3 @@ SyncServiceFactory::GetAllSyncServices() {
   }
   return sync_services;
 }
-
-// static
-BrowserContextKeyedServiceFactory::TestingFactory
-SyncServiceFactory::GetDefaultFactory() {
-  return base::BindRepeating(&BuildSyncService);
-}
diff --git a/chrome/browser/ui/android/omnibox/BUILD.gn b/chrome/browser/ui/android/omnibox/BUILD.gn
--- a/chrome/browser/ui/android/omnibox/BUILD.gn
+++ b/chrome/browser/ui/android/omnibox/BUILD.gn
@@ -162,7 +162,6 @@ android_library("java") {
     "//chrome/browser/profiles/android:java",
     "//chrome/browser/search_engines/android:java",
     "//chrome/browser/share:java",
-    "//chrome/browser/signin/services/android:java",
     "//chrome/browser/tab:java",
     "//chrome/browser/tabmodel:java",
     "//chrome/browser/ui/android/favicon:java",
@@ -460,7 +459,6 @@ robolectric_library("junit") {
     "//chrome/browser/profiles/android:java",
     "//chrome/browser/search_engines/android:java",
     "//chrome/browser/share:java",
-    "//chrome/browser/signin/services/android:java",
     "//chrome/browser/tab:java",
     "//chrome/browser/tabmodel:java",
     "//chrome/browser/ui/android/favicon:java",
diff --git a/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/LocationBarMediator.java b/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/LocationBarMediator.java
--- a/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/LocationBarMediator.java
+++ b/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/LocationBarMediator.java
@@ -59,7 +59,6 @@ import org.chromium.chrome.browser.prefetch.settings.PreloadPagesSettingsBridge;
 import org.chromium.chrome.browser.prefetch.settings.PreloadPagesState;
 import org.chromium.chrome.browser.privacy.settings.PrivacyPreferencesManager;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
 import org.chromium.chrome.browser.tab.Tab;
 import org.chromium.chrome.browser.theme.ThemeUtils;
 import org.chromium.chrome.browser.ui.native_page.NativePage;
diff --git a/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/ConfirmImportSyncDataDialogCoordinator.java b/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/ConfirmImportSyncDataDialogCoordinator.java
--- a/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/ConfirmImportSyncDataDialogCoordinator.java
+++ b/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/ConfirmImportSyncDataDialogCoordinator.java
@@ -14,7 +14,6 @@ import androidx.annotation.MainThread;
 import org.chromium.base.metrics.RecordUserAction;
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
 import org.chromium.components.browser_ui.settings.ManagedPreferencesUtils;
 import org.chromium.components.browser_ui.widget.RadioButtonWithDescription;
 import org.chromium.components.signin.AccountEmailDomainDisplayability;
@@ -94,11 +93,7 @@ public class ConfirmImportSyncDataDialogCoordinator {
         mKeepSeparateOption =
                 mConfirmImportSyncDataView.findViewById(R.id.sync_keep_separate_choice);
 
-        boolean isCurrentAccountManaged =
-                IdentityServicesProvider.get()
-                        .getSigninManager(Profile.getLastUsedRegularProfile())
-                        .getManagementDomain()
-                != null;
+        boolean isCurrentAccountManaged = false;
         mModel = new PropertyModel.Builder(ModalDialogProperties.ALL_KEYS)
                          .with(ModalDialogProperties.CANCEL_ON_TOUCH_OUTSIDE, true)
                          .with(ModalDialogProperties.POSITIVE_BUTTON_TEXT,
diff --git a/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/ConfirmSyncDataStateMachine.java b/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/ConfirmSyncDataStateMachine.java
--- a/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/ConfirmSyncDataStateMachine.java
+++ b/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/ConfirmSyncDataStateMachine.java
@@ -176,9 +176,6 @@ public class ConfirmSyncDataStateMachine
     }
 
     private void requestNewAccountManagementStatus() {
-        IdentityServicesProvider.get()
-                .getSigninManager(Profile.getLastUsedRegularProfile())
-                .isAccountManaged(mNewAccountName, this::setIsNewAccountManaged);
     }
 
     private void setIsNewAccountManaged(Boolean isManaged) {
@@ -194,17 +191,8 @@ public class ConfirmSyncDataStateMachine
         assert mNewAccountManaged != null;
         assert mState == State.AFTER_NEW_ACCOUNT_DIALOG;
 
-        if (mNewAccountManaged) {
-            // Show 'logging into managed account' dialog
-            // This will call back into onConfirm on success.
-            mDelegate.showSignInToManagedAccountDialog(this,
-                    IdentityServicesProvider.get()
-                            .getSigninManager(Profile.getLastUsedRegularProfile())
-                            .extractDomainName(mNewAccountName));
-        } else {
-            mDelegate.dismissAllDialogs();
-            progress();
-        }
+        mDelegate.dismissAllDialogs();
+        progress();
     }
 
     private void showProgressDialog() {
diff --git a/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/SignOutDialogCoordinator.java b/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/SignOutDialogCoordinator.java
--- a/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/SignOutDialogCoordinator.java
+++ b/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/SignOutDialogCoordinator.java
@@ -18,7 +18,6 @@ import androidx.annotation.VisibleForTesting;
 import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.profiles.ProfileAccountManagementMetrics;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
 import org.chromium.chrome.browser.signin.services.SigninMetricsUtils;
 import org.chromium.components.signin.GAIAServiceType;
 import org.chromium.components.signin.identitymanager.ConsentLevel;
@@ -95,35 +94,11 @@ public class SignOutDialogCoordinator {
     }
 
     private static @StringRes int getTitleRes(String managedDomain, @ActionType int actionType) {
-        if (!IdentityServicesProvider.get()
-                        .getIdentityManager(Profile.getLastUsedRegularProfile())
-                        .hasPrimaryAccount(ConsentLevel.SYNC)) {
             return R.string.signout_title;
-        }
-        if (managedDomain != null) {
-            return R.string.signout_managed_account_title;
-        }
-        switch (actionType) {
-            case ActionType.REVOKE_SYNC_CONSENT:
-                return R.string.turn_off_sync_title;
-            case ActionType.CLEAR_PRIMARY_ACCOUNT:
-                return R.string.turn_off_sync_and_signout_title;
-            default:
-                throw new IllegalArgumentException(
-                        "Unexpected value for actionType: " + actionType);
-        }
     }
 
     private static String getMessage(Context context, String managedDomain) {
-        if (!IdentityServicesProvider.get()
-                        .getIdentityManager(Profile.getLastUsedRegularProfile())
-                        .hasPrimaryAccount(ConsentLevel.SYNC)) {
             return context.getString(R.string.signout_message);
-        }
-        if (managedDomain != null) {
-            return context.getString(R.string.signout_managed_account_message, managedDomain);
-        }
-        return context.getString(R.string.turn_off_sync_and_signout_message);
     }
 
     private static int getCheckBoxVisibility(String managedDomain) {
@@ -131,10 +106,7 @@ public class SignOutDialogCoordinator {
         // SigninManager.
         final boolean allowDeletingData = UserPrefs.get(Profile.getLastUsedRegularProfile())
                                                   .getBoolean(Pref.ALLOW_DELETING_BROWSER_HISTORY);
-        final boolean hasSyncConsent =
-                IdentityServicesProvider.get()
-                        .getIdentityManager(Profile.getLastUsedRegularProfile())
-                        .hasPrimaryAccount(ConsentLevel.SYNC);
+        final boolean hasSyncConsent = false;
         final boolean showCheckBox = (managedDomain == null) && allowDeletingData && hasSyncConsent;
         return showCheckBox ? View.VISIBLE : View.GONE;
     }
@@ -143,9 +115,7 @@ public class SignOutDialogCoordinator {
     @MainThread
     SignOutDialogCoordinator(Context context, ModalDialogManager dialogManager, Listener listener,
             @ActionType int actionType, @GAIAServiceType int gaiaServiceType) {
-        final String managedDomain = IdentityServicesProvider.get()
-                                             .getSigninManager(Profile.getLastUsedRegularProfile())
-                                             .getManagementDomain();
+        final String managedDomain = "";
         final View view = inflateView(context, managedDomain, actionType);
         mCheckBox = view.findViewById(R.id.remove_local_data);
         mCheckBox.setVisibility(getCheckBoxVisibility(managedDomain));
diff --git a/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/SyncConsentFragmentBase.java b/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/SyncConsentFragmentBase.java
--- a/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/SyncConsentFragmentBase.java
+++ b/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/SyncConsentFragmentBase.java
@@ -30,9 +30,7 @@ import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.signin.services.DisplayableProfileData;
-import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
 import org.chromium.chrome.browser.signin.services.ProfileDataCache;
-import org.chromium.chrome.browser.signin.services.SigninManager;
 import org.chromium.chrome.browser.signin.services.SigninMetricsUtils;
 import org.chromium.chrome.browser.signin.services.SigninMetricsUtils.State;
 import org.chromium.chrome.browser.signin.services.UnifiedConsentServiceBridge;
@@ -70,8 +68,7 @@ import java.util.Set;
  * what happens after the signin flow.
  */
 public abstract class SyncConsentFragmentBase
-        extends Fragment implements AccountPickerCoordinator.Listener, AccountsChangeObserver,
-                                    SigninManager.SignInStateObserver {
+        extends Fragment implements AccountPickerCoordinator.Listener, AccountsChangeObserver {
     private static final String ARGUMENT_ACCESS_POINT = "SyncConsentFragmentBase.AccessPoint";
     private static final String ARGUMENT_ACCOUNT_NAME = "SyncConsentFragmentBase.AccountName";
     private static final String ARGUMENT_SHOW_TANGIBLE_SYNC_CONSENT_VIEW =
@@ -256,42 +253,8 @@ public abstract class SyncConsentFragmentBase
     // this method replaces onSyncAccepted(), the field can be set directly.
     protected void signinAndEnableSync(
             String accountName, boolean settingsClicked, Runnable callback) {
-        AccountManagerFacadeProvider.getInstance().getAccounts().then(accounts -> {
-            @Nullable
-            Account account = AccountUtils.findAccountByName(accounts, accountName);
-            if (account == null) {
-                callback.run();
-                return;
-            }
-            SigninManager signinManager = IdentityServicesProvider.get().getSigninManager(
-                    Profile.getLastUsedRegularProfile());
-            signinManager.signinAndEnableSync(
-                    mSigninAccessPoint, account, new SigninManager.SignInCallback() {
-                        @Override
-                        public void onSignInComplete() {
-                            UnifiedConsentServiceBridge.setUrlKeyedAnonymizedDataCollectionEnabled(
-                                    Profile.getLastUsedRegularProfile(), true);
-                            if (ChromeFeatureList.isEnabled(ChromeFeatureList.TANGIBLE_SYNC)
-                                    && getTangibleSyncGroup() != TangibleSyncGroup.GROUP_F) {
-                                // Groups A-E are only for enabling History and Tab Sync
-                                SyncService.get().setSelectedTypes(false,
-                                        Set.of(UserSelectableType.HISTORY,
-                                                UserSelectableType.TABS));
-                            }
-                            if (!settingsClicked) {
-                                SyncService.get().setFirstSetupComplete(
-                                        SyncFirstSetupCompleteSource.BASIC_FLOW);
-                            }
-                            closeAndMaybeOpenSyncSettings(settingsClicked);
-                            callback.run();
-                        }
-
-                        @Override
-                        public void onSignInAborted() {
-                            callback.run();
-                        }
-                    });
-        });
+        // do nothing
+        callback.run();
     }
 
     @Override
@@ -344,10 +307,6 @@ public abstract class SyncConsentFragmentBase
                 : ProfileDataCache.createWithDefaultImageSizeAndNoBadge(requireContext());
         mProfileDataCache.addObserver(mProfileDataCacheObserver);
 
-        IdentityServicesProvider.get()
-                .getSigninManager(Profile.getLastUsedRegularProfile())
-                .addSignInStateObserver(this);
-
         // By default this is set to true so that when system back button is pressed user action
         // is recorded in onDestroy().
         mRecordUndoSignin = true;
@@ -358,9 +317,6 @@ public abstract class SyncConsentFragmentBase
     @Override
     public void onDestroy() {
         super.onDestroy();
-        IdentityServicesProvider.get()
-                .getSigninManager(Profile.getLastUsedRegularProfile())
-                .removeSignInStateObserver(this);
         mProfileDataCache.removeObserver(mProfileDataCacheObserver);
         if (mConfirmSyncDataStateMachine != null) {
             mConfirmSyncDataStateMachine.cancel(/* isBeingDestroyed = */ true);
@@ -453,21 +409,6 @@ public abstract class SyncConsentFragmentBase
         mAccountManagerFacade.getAccounts().then(this::updateAccounts);
     }
 
-    /** Implements {@link SigninManager.SignInStateObserver}. */
-    @Override
-    public void onSignedIn() {
-        final CoreAccountInfo primaryAccount =
-                IdentityServicesProvider.get()
-                        .getIdentityManager(Profile.getLastUsedRegularProfile())
-                        .getPrimaryAccountInfo(ConsentLevel.SIGNIN);
-        mIsSignedInWithoutSync =
-                mSigninAccessPoint == SigninAccessPoint.START_PAGE && primaryAccount != null;
-        if (mIsSignedInWithoutSync) {
-            mSelectedAccountName = primaryAccount.getEmail();
-            mAccountManagerFacade.getAccounts().then(this::updateAccounts);
-        }
-    }
-
     /**
      * Account picker is hidden if there are no accounts on the device. Also, accept button becomes
      * "Add account" button in this case.
@@ -730,21 +671,6 @@ public abstract class SyncConsentFragmentBase
 
                         // Don't start sign-in if this fragment has been destroyed.
                         if (getActivity().isDestroyed()) return;
-
-                        SigninManager signinManager =
-                                IdentityServicesProvider.get().getSigninManager(
-                                        Profile.getLastUsedRegularProfile());
-                        signinManager.runAfterOperationInProgress(() -> {
-                            if (wipeData) {
-                                signinManager.wipeSyncUserData(() -> {
-                                    onSyncAccepted(mSelectedAccountName, settingsClicked,
-                                            () -> mIsSigninInProgress = false);
-                                });
-                            } else {
-                                onSyncAccepted(mSelectedAccountName, settingsClicked,
-                                        () -> mIsSigninInProgress = false);
-                            }
-                        });
                     }
 
                     @Override
@@ -811,32 +737,6 @@ public abstract class SyncConsentFragmentBase
         }
     }
 
-    @Override
-    public void onResume() {
-        super.onResume();
-        mAccountManagerFacade.addObserver(this);
-
-        final CoreAccountInfo primaryAccount =
-                IdentityServicesProvider.get()
-                        .getIdentityManager(Profile.getLastUsedRegularProfile())
-                        .getPrimaryAccountInfo(ConsentLevel.SIGNIN);
-        mIsSignedInWithoutSync =
-                mSigninAccessPoint == SigninAccessPoint.START_PAGE && primaryAccount != null;
-        if (mIsSignedInWithoutSync) {
-            mSelectedAccountName = primaryAccount.getEmail();
-        }
-        // When a fragment that was in the FragmentManager backstack becomes visible again, the view
-        // will be recreated by onCreateView. Update the state of this recreated UI.
-        if (mSelectedAccountName != null) {
-            updateProfileData(mSelectedAccountName);
-        }
-
-        updateAccounts(
-                AccountUtils.getAccountsIfFulfilledOrEmpty(mAccountManagerFacade.getAccounts()));
-
-        if (mSigninView != null) mSigninView.startAnimations();
-    }
-
     @Override
     public void onPause() {
         super.onPause();
diff --git a/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/SyncPromoController.java b/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/SyncPromoController.java
--- a/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/SyncPromoController.java
+++ b/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/SyncPromoController.java
@@ -113,20 +113,7 @@ public class SyncPromoController {
      * @param accessPoint The access point for which the impression limit is being checked.
      */
     public static boolean canShowSyncPromo(@AccessPoint int accessPoint) {
-        switch (accessPoint) {
-            case SigninAccessPoint.BOOKMARK_MANAGER:
-                return canShowBookmarkPromo();
-            case SigninAccessPoint.NTP_CONTENT_SUGGESTIONS:
-                return canShowNTPPromo();
-            case SigninAccessPoint.RECENT_TABS:
-                // There is no impression limit or dismiss button in Recent Tabs promo.
-                return true;
-            case SigninAccessPoint.SETTINGS:
-                return canShowSettingsPromo();
-            default:
-                assert false : "Unexpected value for access point: " + accessPoint;
-                return false;
-        }
+        return false;
     }
 
     private static long getNTPSyncPromoResetAfterMillis() {
diff --git a/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/account_picker/WebSigninAccountPickerDelegate.java b/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/account_picker/WebSigninAccountPickerDelegate.java
--- a/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/account_picker/WebSigninAccountPickerDelegate.java
+++ b/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/account_picker/WebSigninAccountPickerDelegate.java
@@ -28,7 +28,6 @@ public class WebSigninAccountPickerDelegate implements AccountPickerDelegate {
     private final Tab mCurrentTab;
     private final WebSigninBridge.Factory mWebSigninBridgeFactory;
     private final String mContinueUrl;
-    private final SigninManager mSigninManager;
     private final IdentityManager mIdentityManager;
     private @Nullable WebSigninBridge mWebSigninBridge;
 
@@ -43,8 +42,6 @@ public class WebSigninAccountPickerDelegate implements AccountPickerDelegate {
         mCurrentTab = currentTab;
         mWebSigninBridgeFactory = webSigninBridgeFactory;
         mContinueUrl = continueUrl;
-        mSigninManager = IdentityServicesProvider.get().getSigninManager(
-                Profile.getLastUsedRegularProfile());
         mIdentityManager = IdentityServicesProvider.get().getIdentityManager(
                 Profile.getLastUsedRegularProfile());
     }
@@ -62,27 +59,7 @@ public class WebSigninAccountPickerDelegate implements AccountPickerDelegate {
             // if user retries the sign-in from the error screen, we need to sign out the user
             // first before signing in again.
             destroyWebSigninBridge();
-            mSigninManager.signOut(SignoutReason.SIGNIN_RETRIGGERED_FROM_WEB_SIGNIN);
         }
-        AccountInfoServiceProvider.get().getAccountInfoByEmail(accountEmail).then(accountInfo -> {
-            mWebSigninBridge =
-                    mWebSigninBridgeFactory.create(Profile.getLastUsedRegularProfile(), accountInfo,
-                            createWebSigninBridgeListener(
-                                    mCurrentTab, mContinueUrl, onSignInErrorCallback));
-            mSigninManager.signin(AccountUtils.createAccountFromName(accountEmail),
-                    new SigninManager.SignInCallback() {
-                        @Override
-                        public void onSignInComplete() {
-                            // After the sign-in is finished in Chrome, we still need to wait for
-                            // WebSigninBridge to be called to redirect to the continue url.
-                        }
-
-                        @Override
-                        public void onSignInAborted() {
-                            WebSigninAccountPickerDelegate.this.destroyWebSigninBridge();
-                        }
-                    });
-        });
     }
 
     @Override
diff --git a/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/fre/SigninFirstRunMediator.java b/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/fre/SigninFirstRunMediator.java
--- a/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/fre/SigninFirstRunMediator.java
+++ b/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/fre/SigninFirstRunMediator.java
@@ -195,10 +195,8 @@ public class SigninFirstRunMediator
             mModel.set(SigninFirstRunProperties.FRE_POLICY, frePolicy);
         }
 
-        mModel.set(SigninFirstRunProperties.IS_SIGNIN_SUPPORTED,
-                ExternalAuthUtils.getInstance().canUseGooglePlayServices()
-                        && !isSigninDisabledByPolicy);
-        mAllowMetricsAndCrashUploading = !isMetricsReportingDisabledByPolicy;
+        mModel.set(SigninFirstRunProperties.IS_SIGNIN_SUPPORTED, false);
+        mAllowMetricsAndCrashUploading = false;
 
         mModel.set(SigninFirstRunProperties.FOOTER_STRING,
                 getFooterString(isMetricsReportingDisabledByPolicy));
@@ -277,41 +275,6 @@ public class SigninFirstRunMediator
                 TextUtils.equals(mDefaultAccountName, mSelectedAccountName)
                         ? MobileFreProgress.WELCOME_SIGNIN_WITH_DEFAULT_ACCOUNT
                         : MobileFreProgress.WELCOME_SIGNIN_WITH_NON_DEFAULT_ACCOUNT);
-        // If the user signs into an account on the FRE, goes to the sync consent page and presses
-        // back to come back to the FRE, then there will already be an account signed in.
-        @Nullable
-        CoreAccountInfo signedInAccount =
-                IdentityServicesProvider.get()
-                        .getIdentityManager(Profile.getLastUsedRegularProfile())
-                        .getPrimaryAccountInfo(ConsentLevel.SIGNIN);
-        if (signedInAccount != null && signedInAccount.getEmail().equals(mSelectedAccountName)) {
-            mDelegate.advanceToNextPage();
-            return;
-        }
-        mModel.set(SigninFirstRunProperties.SHOW_SIGNIN_PROGRESS_SPINNER_WITH_TEXT, true);
-        final SigninManager signinManager = IdentityServicesProvider.get().getSigninManager(
-                Profile.getLastUsedRegularProfile());
-        signinManager.signin(
-                AccountUtils.createAccountFromName(mSelectedAccountName), new SignInCallback() {
-                    @Override
-                    public void onSignInComplete() {
-                        if (mDestroyed) {
-                            // FirstRunActivity was destroyed while we were waiting for sign-in.
-                            return;
-                        }
-                        mDelegate.advanceToNextPage();
-                    }
-
-                    @Override
-                    public void onSignInAborted() {
-                        // TODO(crbug/1248090): For now we enable the buttons again to not block the
-                        // users from continuing to the next page. Should show a dialog with the
-                        // signin error.
-                        mModel.set(SigninFirstRunProperties.SHOW_SIGNIN_PROGRESS_SPINNER_WITH_TEXT,
-                                false);
-                        mModel.set(SigninFirstRunProperties.SHOW_SIGNIN_PROGRESS_SPINNER, false);
-                    }
-                });
     }
 
     /**
@@ -326,26 +289,9 @@ public class SigninFirstRunMediator
 
         mDelegate.recordFreProgressHistogram(MobileFreProgress.WELCOME_DISMISS);
         mDelegate.acceptTermsOfService(mAllowMetricsAndCrashUploading);
-        SigninPreferencesManager.getInstance().temporarilySuppressNewTabPagePromos();
-        if (IdentityServicesProvider.get()
-                        .getIdentityManager(Profile.getLastUsedRegularProfile())
-                        .hasPrimaryAccount(ConsentLevel.SIGNIN)) {
-            mModel.set(SigninFirstRunProperties.SHOW_SIGNIN_PROGRESS_SPINNER, true);
-            SignOutCallback signOutCallback = () -> {
-                if (mDestroyed) {
-                    // FirstRunActivity was destroyed while we were waiting for the sign-out.
-                    return;
-                }
-
-                mDelegate.advanceToNextPage();
-            };
-            IdentityServicesProvider.get()
-                    .getSigninManager(Profile.getLastUsedRegularProfile())
-                    .signOut(SignoutReason.ABORT_SIGNIN, signOutCallback,
-                            /* forceWipeUserData= */ false);
-        } else {
-            mDelegate.advanceToNextPage();
-        }
+
+        // Bromite: there is no identity provider, always advance to next page
+        mDelegate.advanceToNextPage();
     }
 
     /**
diff --git a/chrome/browser/ui/android/strings/android_chrome_strings.grd b/chrome/browser/ui/android/strings/android_chrome_strings.grd
--- a/chrome/browser/ui/android/strings/android_chrome_strings.grd
+++ b/chrome/browser/ui/android/strings/android_chrome_strings.grd
@@ -281,9 +281,6 @@ CHAR_LIMIT guidelines:
       <message name="IDS_SIGN_IN_TO_CHROME" desc="Title for the button to sign in to Chrome using one's Google account. [CHAR_LIMIT=27]">
         Sign in to Chrome
       </message>
-      <message name="IDS_PREFS_MANAGE_SYNC_SETTINGS_CONTENT_DESCRIPTION" is_accessibility_with_no_ui="true" desc="The accessibility text to read when the 'Manage Sync Settings' page is opened from the sign-in page. This text is attached to the 'Navigate Up' button shown at the top of the screen. The first two sentences describe the screen that is currently shown to the user, while 'Navigate up' is a description for the button this text is attached to. 'Navigate up' should match TC ID 6794660482873516081.">
-        You are currently customizing your Sync settings. To finish turning on sync, tap the Confirm button near the bottom of the screen. Navigate up
-      </message>
       <message name="IDS_SIGNIN_PREF_SUMMARY" desc="Summary for the entry in Settings to sign in to Chrome, explaining benefits of signing in.">
         Sync and personalize across devices
       </message>
@@ -396,21 +393,6 @@ CHAR_LIMIT guidelines:
       <message name="IDS_PRELOAD_PAGES_EXTENDED_PRELOADING_BULLET_FOUR" desc="Fourth bullet point under the Preload Pages extended preloading mode. Informs the user about what the extended preloading setting does.">
         Because the preloaded pages are encrypted, Google will not learn anything about the preloaded page content. Google servers will learn which sites are privately preloaded. This information is only used to preload the pages, and is not linked to other information from your Google Account.
       </message>
-      <message name="IDS_URL_KEYED_ANONYMIZED_DATA_TITLE" desc="Title for a checkbox in Settings that controls non-personalized URL collection and informs the user about the data shared by this feature.">
-        Make searches and browsing better
-      </message>
-      <message name="IDS_URL_KEYED_ANONYMIZED_DATA_SUMMARY" desc="Summary for a checkbox in Settings that controls non-personalized URL collection and informs the user about the data shared by this feature.">
-        Sends URLs of pages you visit to Google
-      </message>
-      <message name="IDS_PRIVACY_SYNC_AND_SERVICES_LINK_LEGACY" desc="The text for Privacy preferences that is shown after all preference rows.">
-        For more settings that relate to privacy, security, and data collection, see <ph name="BEGIN_LINK">&lt;link&gt;</ph>Sync and Google services<ph name="END_LINK">&lt;/link&gt;</ph>
-      </message>
-      <message name="IDS_PRIVACY_SYNC_AND_SERVICES_LINK_SYNC_ON" desc="The text for Privacy preferences that is shown after all preference rows. This version of the text is shown if Sync has been turned on.">
-        For more settings that relate to privacy, security, and data collection, see <ph name="BEGIN_LINK1">&lt;link1&gt;</ph>Sync<ph name="END_LINK1">&lt;/link1&gt;</ph> and <ph name="BEGIN_LINK2">&lt;link2&gt;</ph>Google services<ph name="END_LINK2">&lt;/link2&gt;</ph>
-      </message>
-      <message name="IDS_PRIVACY_SYNC_AND_SERVICES_LINK_SYNC_OFF" desc="The text for Privacy preferences that is shown after all preference rows. This version of the text is shown if Sync hasn't been turned on.">
-        For more settings that relate to privacy, security, and data collection, see <ph name="BEGIN_LINK">&lt;link&gt;</ph>Google services<ph name="END_LINK">&lt;/link&gt;</ph>
-      </message>
       <message name="IDS_USAGE_AND_CRASH_REPORTS_TITLE" desc="Title for a preference that enables sending usage statistics and crash reports.">
         Help improve Chrome\u2019s features and performance
       </message>
diff --git a/components/password_manager/core/browser/leak_detection_delegate.cc b/components/password_manager/core/browser/leak_detection_delegate.cc
--- a/components/password_manager/core/browser/leak_detection_delegate.cc
+++ b/components/password_manager/core/browser/leak_detection_delegate.cc
@@ -55,7 +55,7 @@ void LeakDetectionDelegate::StartLeakCheck(const PasswordForm& credentials) {
   DCHECK(!credentials.password_value.empty());
 
   leak_check_ = leak_factory_->TryCreateLeakCheck(
-      this, client_->GetIdentityManager(), client_->GetURLLoaderFactory(),
+      this, nullptr, client_->GetURLLoaderFactory(),
       client_->GetChannel());
   // Reset the helper to avoid notifications from the currently running check.
   helper_.reset();
diff --git a/components/password_manager/core/browser/password_form_manager.cc b/components/password_manager/core/browser/password_form_manager.cc
--- a/components/password_manager/core/browser/password_form_manager.cc
+++ b/components/password_manager/core/browser/password_form_manager.cc
@@ -42,7 +42,6 @@
 #include "components/password_manager/core/common/password_manager_features.h"
 #include "components/password_manager/core/common/password_manager_pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/identity_manager/identity_manager.h"
 #include "google_apis/gaia/core_account_id.h"
 #include "third_party/abseil-cpp/absl/types/optional.h"
 #include "third_party/abseil-cpp/absl/types/variant.h"
@@ -304,27 +303,7 @@ bool PasswordFormManager::WasUnblocklisted() const {
 }
 
 bool PasswordFormManager::IsMovableToAccountStore() const {
-  DCHECK(
-      client_->GetPasswordFeatureManager()->ShouldShowAccountStorageBubbleUi())
-      << "Ensure that the client supports moving passwords for this user!";
-  signin::IdentityManager* identity_manager = client_->GetIdentityManager();
-  DCHECK(identity_manager);
-  const std::string gaia_id =
-      identity_manager->GetPrimaryAccountInfo(signin::ConsentLevel::kSignin)
-          .gaia;
-  DCHECK(!gaia_id.empty()) << "Cannot move without signed in user";
-
-  const std::u16string& username = GetPendingCredentials().username_value;
-  const std::u16string& password = GetPendingCredentials().password_value;
-  // If no match in the profile store with the same username and password exist,
-  // then there is nothing to move.
-  auto is_movable = [&](const PasswordForm* match) {
-    return !match->IsUsingAccountStore() && match->username_value == username &&
-           match->password_value == password;
-  };
-  return base::ranges::any_of(form_fetcher_->GetBestMatches(), is_movable) &&
-         !form_fetcher_->IsMovingBlocked(GaiaIdHash::FromGaiaId(gaia_id),
-                                         username);
+  return false;
 }
 
 void PasswordFormManager::Save() {
@@ -491,17 +470,6 @@ void PasswordFormManager::MoveCredentialsToAccountStore() {
 void PasswordFormManager::BlockMovingCredentialsToAccountStore() {
   // Nothing to do if there is no signed in user or the credentials are already
   // blocked for moving.
-  if (!IsMovableToAccountStore())
-    return;
-  const std::string gaia_id =
-      client_->GetIdentityManager()
-          ->GetPrimaryAccountInfo(signin::ConsentLevel::kSignin)
-          .gaia;
-  // The above call to IsMovableToAccountStore() guarantees there is a signed in
-  // user.
-  DCHECK(!gaia_id.empty());
-  password_save_manager_->BlockMovingToAccountStoreFor(
-      GaiaIdHash::FromGaiaId(gaia_id));
 }
 
 bool PasswordFormManager::IsNewLogin() const {
diff --git a/components/password_manager/core/browser/password_manager_client_helper.cc b/components/password_manager/core/browser/password_manager_client_helper.cc
--- a/components/password_manager/core/browser/password_manager_client_helper.cc
+++ b/components/password_manager/core/browser/password_manager_client_helper.cc
@@ -14,31 +14,10 @@
 #include "components/password_manager/core/browser/password_sync_util.h"
 #include "components/password_manager/core/common/password_manager_pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/identity_manager/account_info.h"
-#include "components/signin/public/identity_manager/identity_manager.h"
 #include "google_apis/gaia/gaia_auth_util.h"
 
 namespace password_manager {
 
-namespace {
-
-#if !BUILDFLAG(IS_IOS) && !BUILDFLAG(IS_ANDROID)
-constexpr int kMaxMoveToAccountOffersForNonOptedInUser = 5;
-
-bool IsPrimaryAccountSignIn(const signin::IdentityManager& identity_manager,
-                            const std::u16string& username,
-                            const std::string& signon_realm) {
-  CoreAccountInfo primary_account =
-      identity_manager.GetPrimaryAccountInfo(signin::ConsentLevel::kSignin);
-  return sync_util::IsGaiaCredentialPage(signon_realm) &&
-         !primary_account.IsEmpty() &&
-         gaia::AreEmailsSame(base::UTF16ToUTF8(username),
-                             primary_account.email);
-}
-#endif  // !BUILDFLAG(IS_IOS) && !BUILDFLAG(IS_ANDROID)
-
-}  // namespace
-
 PasswordManagerClientHelper::PasswordManagerClientHelper(
     PasswordManagerClient* delegate)
     : delegate_(delegate) {
@@ -108,29 +87,7 @@ bool PasswordManagerClientHelper::ShouldPromptToEnableAutoSignIn() const {
 bool PasswordManagerClientHelper::ShouldPromptToMovePasswordToAccount(
     const PasswordFormManagerForUI& submitted_manager) const {
 #if !BUILDFLAG(IS_IOS) && !BUILDFLAG(IS_ANDROID)
-  PasswordFeatureManager* feature_manager =
-      delegate_->GetPasswordFeatureManager();
-  if (!feature_manager->ShouldShowAccountStorageBubbleUi())
-    return false;
-  if (feature_manager->GetDefaultPasswordStore() ==
-      PasswordForm::Store::kProfileStore) {
-    return false;
-  }
-  if (!submitted_manager.IsMovableToAccountStore())
-    return false;
-  if (delegate_->IsIncognito())
-    return false;
-  // It's not useful to store the password for the primary account inside
-  // that same account.
-  if (IsPrimaryAccountSignIn(
-          *delegate_->GetIdentityManager(),
-          submitted_manager.GetPendingCredentials().username_value,
-          submitted_manager.GetPendingCredentials().signon_realm)) {
-    return false;
-  }
-  return feature_manager->IsOptedInForAccountStorage() ||
-         feature_manager->GetMoveOfferedToNonOptedInUserCount() <
-             kMaxMoveToAccountOffersForNonOptedInUser;
+  return false;
 #else
   // On Android and iOS, prompting to move after using a password isn't
   // implemented.
diff --git a/components/password_manager/core/browser/sync_credentials_filter.cc b/components/password_manager/core/browser/sync_credentials_filter.cc
--- a/components/password_manager/core/browser/sync_credentials_filter.cc
+++ b/components/password_manager/core/browser/sync_credentials_filter.cc
@@ -10,11 +10,7 @@
 #include "base/metrics/user_metrics.h"
 #include "components/password_manager/core/browser/password_form_manager.h"
 #include "components/password_manager/core/browser/password_manager_util.h"
-#include "components/password_manager/core/browser/password_sync_util.h"
 #include "components/password_manager/core/common/password_manager_features.h"
-#include "components/signin/public/identity_manager/account_info.h"
-#include "components/signin/public/identity_manager/identity_manager.h"
-#include "google_apis/gaia/gaia_auth_util.h"
 
 namespace password_manager {
 
@@ -34,67 +30,26 @@ bool SyncCredentialsFilter::ShouldSave(const PasswordForm& form) const {
   if (form.form_data.is_gaia_with_skip_save_password_form)
     return false;
 
-  const syncer::SyncService* sync_service =
-      sync_service_factory_function_.Run();
-  const signin::IdentityManager* identity_manager =
-      client_->GetIdentityManager();
-
-  if (base::FeatureList::IsEnabled(features::kEnablePasswordsAccountStorage)) {
-    // If kEnablePasswordsAccountStorage is enabled, then don't allow saving the
-    // password if it corresponds to the primary account. Note that if the user
-    // is just signing in to the first Gaia account, then IdentityManager might
-    // not know about the account yet.
-    if (sync_util::IsGaiaCredentialPage(form.signon_realm)) {
-      CoreAccountInfo primary_account = identity_manager->GetPrimaryAccountInfo(
-          signin::ConsentLevel::kSignin);
-      if (primary_account.IsEmpty() ||
-          gaia::AreEmailsSame(base::UTF16ToUTF8(form.username_value),
-                              primary_account.email)) {
-        return false;
-      }
-    }
-  } else {
-    // If kEnablePasswordsAccountStorage is NOT enabled, then don't allow saving
-    // the password for the sync account specifically.
-    if (sync_util::IsSyncAccountCredential(form.url, form.username_value,
-                                           sync_service, identity_manager)) {
-      return false;
-    }
-  }
-
   return true;
 }
 
 bool SyncCredentialsFilter::ShouldSaveGaiaPasswordHash(
     const PasswordForm& form) const {
-  if (base::FeatureList::IsEnabled(features::kPasswordReuseDetectionEnabled)) {
-    return !client_->IsIncognito() &&
-           sync_util::IsGaiaCredentialPage(form.signon_realm);
-  }
   return false;
 }
 
 bool SyncCredentialsFilter::ShouldSaveEnterprisePasswordHash(
     const PasswordForm& form) const {
-  return !client_->IsIncognito() && sync_util::ShouldSaveEnterprisePasswordHash(
-                                        form, *client_->GetPrefs());
+  return false;
 }
 
 bool SyncCredentialsFilter::IsSyncAccountEmail(
     const std::string& username) const {
-  return sync_util::IsSyncAccountEmail(username, client_->GetIdentityManager());
+  return false;
 }
 
 void SyncCredentialsFilter::ReportFormLoginSuccess(
     const PasswordFormManager& form_manager) const {
-  const PasswordForm& form = form_manager.GetPendingCredentials();
-  if (!form_manager.IsNewLogin() &&
-      sync_util::IsSyncAccountCredential(form.url, form.username_value,
-                                         sync_service_factory_function_.Run(),
-                                         client_->GetIdentityManager())) {
-    base::RecordAction(base::UserMetricsAction(
-        "PasswordManager_SyncCredentialFilledAndLoginSuccessfull"));
-  }
 }
 
 }  // namespace password_manager
diff --git a/components/signin/features.gni b/components/signin/features.gni
--- a/components/signin/features.gni
+++ b/components/signin/features.gni
@@ -5,7 +5,7 @@
 import("//build/config/chromeos/ui_mode.gni")
 
 # Dice is supported on the platform (but not necessarily enabled).
-enable_dice_support = is_linux || is_mac || is_win || is_fuchsia
+enable_dice_support = false
 
 # Mirror is enabled and other account consistency mechanisms are not available.
-enable_mirror = is_android || is_chromeos || is_ios
+enable_mirror = false
diff --git a/components/signin/internal/identity_manager/primary_account_manager.cc b/components/signin/internal/identity_manager/primary_account_manager.cc
--- a/components/signin/internal/identity_manager/primary_account_manager.cc
+++ b/components/signin/internal/identity_manager/primary_account_manager.cc
@@ -169,21 +169,15 @@ void PrimaryAccountManager::Initialize(PrefService* local_state) {
   base::CommandLine* cmd_line = base::CommandLine::ForCurrentProcess();
   ScopedPrefCommit scoped_pref_commit(client_->GetPrefs(),
                                       /*commit_on_destroy*/ false);
-  if (cmd_line->HasSwitch(switches::kClearTokenService))
+  if ((true) || cmd_line->HasSwitch(switches::kClearTokenService))
     SetPrimaryAccountInternal(CoreAccountInfo(), false, scoped_pref_commit);
 
-  std::string pref_account_id =
-      client_->GetPrefs()->GetString(prefs::kGoogleServicesAccountId);
+  std::string pref_account_id;
 
   // Initial value for the kGoogleServicesConsentedToSync preference if it is
   // missing.
-  const PrefService::Preference* consented_pref =
-      client_->GetPrefs()->FindPreference(
-          prefs::kGoogleServicesConsentedToSync);
-  if (consented_pref->IsDefaultValue()) {
-    client_->GetPrefs()->SetBoolean(prefs::kGoogleServicesConsentedToSync,
-                                    !pref_account_id.empty());
-  }
+  client_->GetPrefs()->SetBoolean(prefs::kGoogleServicesConsentedToSync,
+                                  false);
 
 #if BUILDFLAG(IS_CHROMEOS_ASH)
   if (!pref_account_id.empty()) {
@@ -213,8 +207,6 @@ void PrimaryAccountManager::Initialize(PrefService* local_state) {
     SetPrimaryAccountInternal(CoreAccountInfo(), /*consented_to_sync=*/false,
                               scoped_pref_commit);
     SetSyncPrimaryAccountInternal(account_info);
-  } else {
-    SetPrimaryAccountInternal(account_info, consented, scoped_pref_commit);
   }
 
   // Instrument metrics to know what fraction of users without a primary
@@ -357,6 +349,7 @@ void PrimaryAccountManager::RecordHadPreviousSyncAccount() const {
 
 bool PrimaryAccountManager::HasPrimaryAccount(
     signin::ConsentLevel consent_level) const {
+  if ((true)) return false;
   bool consented_pref =
       client_->GetPrefs()->GetBoolean(prefs::kGoogleServicesConsentedToSync);
   if (primary_account_info().account_id.empty()) {
diff --git a/components/signin/internal/identity_manager/profile_oauth2_token_service_delegate_android.cc b/components/signin/internal/identity_manager/profile_oauth2_token_service_delegate_android.cc
--- a/components/signin/internal/identity_manager/profile_oauth2_token_service_delegate_android.cc
+++ b/components/signin/internal/identity_manager/profile_oauth2_token_service_delegate_android.cc
@@ -14,7 +14,6 @@
 #include "base/memory/raw_ptr.h"
 #include "base/metrics/histogram_functions.h"
 #include "base/metrics/histogram_macros.h"
-#include "components/signin/public/android/jni_headers/ProfileOAuth2TokenServiceDelegate_jni.h"
 #include "components/signin/public/base/account_consistency_method.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "google_apis/gaia/gaia_auth_util.h"
@@ -91,20 +90,7 @@ AndroidAccessTokenFetcher::~AndroidAccessTokenFetcher() {}
 void AndroidAccessTokenFetcher::Start(const std::string& client_id,
                                       const std::string& client_secret,
                                       const std::vector<std::string>& scopes) {
-  JNIEnv* env = AttachCurrentThread();
-  std::string scope = CombineScopes(scopes);
-  ScopedJavaLocalRef<jstring> j_email =
-      ConvertUTF8ToJavaString(env, account_id_);
-  ScopedJavaLocalRef<jstring> j_scope = ConvertUTF8ToJavaString(env, scope);
-  std::unique_ptr<FetchOAuth2TokenCallback> heap_callback(
-      new FetchOAuth2TokenCallback(
-          base::BindOnce(&AndroidAccessTokenFetcher::OnAccessTokenResponse,
-                         weak_factory_.GetWeakPtr())));
-
-  // Call into Java to get a new token.
-  signin::Java_ProfileOAuth2TokenServiceDelegate_getAccessTokenFromNative(
-      env, oauth2_token_service_delegate_->GetJavaObject(), j_email, j_scope,
-      reinterpret_cast<intptr_t>(heap_callback.release()));
+  CancelRequest();
 }
 
 void AndroidAccessTokenFetcher::CancelRequest() {
@@ -154,13 +140,6 @@ ProfileOAuth2TokenServiceDelegateAndroid::
       fire_refresh_token_loaded_(RT_LOAD_NOT_START) {
   DVLOG(1) << "ProfileOAuth2TokenServiceDelegateAndroid::ctor";
   DCHECK(account_tracker_service_);
-
-  JNIEnv* env = AttachCurrentThread();
-  base::android::ScopedJavaLocalRef<jobject> local_java_ref =
-      signin::Java_ProfileOAuth2TokenServiceDelegate_Constructor(
-          env, reinterpret_cast<intptr_t>(this),
-          account_tracker_service_->GetJavaObject());
-  java_ref_.Reset(env, local_java_ref.obj());
 }
 
 ProfileOAuth2TokenServiceDelegateAndroid::
@@ -168,30 +147,12 @@ ProfileOAuth2TokenServiceDelegateAndroid::
 
 ScopedJavaLocalRef<jobject>
 ProfileOAuth2TokenServiceDelegateAndroid::GetJavaObject() {
-  return ScopedJavaLocalRef<jobject>(java_ref_);
+  return nullptr;
 }
 
 bool ProfileOAuth2TokenServiceDelegateAndroid::RefreshTokenIsAvailable(
     const CoreAccountId& account_id) const {
-  DVLOG(1)
-      << "ProfileOAuth2TokenServiceDelegateAndroid::RefreshTokenIsAvailable"
-      << " account= " << account_id;
-  std::string account_name = MapAccountIdToAccountName(account_id);
-  if (account_name.empty()) {
-    // This corresponds to the case when the account with id |account_id| is not
-    // present on the device and thus was not seeded.
-    DVLOG(1)
-        << "ProfileOAuth2TokenServiceDelegateAndroid::RefreshTokenIsAvailable"
-        << " cannot find account name for account id " << account_id;
-    return false;
-  }
-  JNIEnv* env = AttachCurrentThread();
-  ScopedJavaLocalRef<jstring> j_account_name =
-      ConvertUTF8ToJavaString(env, account_name);
-  jboolean refresh_token_is_available =
-      signin::Java_ProfileOAuth2TokenServiceDelegate_hasOAuth2RefreshToken(
-          env, java_ref_, j_account_name);
-  return refresh_token_is_available == JNI_TRUE;
+  return false;
 }
 
 std::vector<CoreAccountId>
@@ -235,49 +196,11 @@ void ProfileOAuth2TokenServiceDelegateAndroid::OnAccessTokenInvalidated(
     const std::string& client_id,
     const OAuth2AccessTokenManager::ScopeSet& scopes,
     const std::string& access_token) {
-  ValidateAccountId(account_id);
-  JNIEnv* env = AttachCurrentThread();
-  ScopedJavaLocalRef<jstring> j_access_token =
-      ConvertUTF8ToJavaString(env, access_token);
-  signin::Java_ProfileOAuth2TokenServiceDelegate_invalidateAccessToken(
-      env, java_ref_, j_access_token);
 }
 
 void ProfileOAuth2TokenServiceDelegateAndroid::
     ReloadAllAccountsFromSystemWithPrimaryAccount(
         const absl::optional<CoreAccountId>& primary_account_id) {
-  JNIEnv* env = AttachCurrentThread();
-
-  ScopedJavaLocalRef<jstring> j_account_id =
-      primary_account_id.has_value()
-          ? ConvertUTF8ToJavaString(env, primary_account_id->ToString())
-          : nullptr;
-  signin::
-      Java_ProfileOAuth2TokenServiceDelegate_seedAndReloadAccountsWithPrimaryAccount(
-          env, java_ref_, j_account_id);
-}
-
-void ProfileOAuth2TokenServiceDelegateAndroid::
-    ReloadAllAccountsWithPrimaryAccountAfterSeeding(
-        JNIEnv* env,
-        const base::android::JavaParamRef<jstring>& j_primary_account_id,
-        const base::android::JavaParamRef<jobjectArray>&
-            j_device_account_names) {
-  absl::optional<CoreAccountId> primary_account_id;
-  if (j_primary_account_id) {
-    primary_account_id = CoreAccountId::FromString(
-        ConvertJavaStringToUTF8(env, j_primary_account_id));
-  }
-  std::vector<std::string> device_account_names;
-  base::android::AppendJavaStringArrayToStringVector(
-      env, j_device_account_names, &device_account_names);
-  std::vector<CoreAccountId> account_ids;
-  for (const std::string& name : device_account_names) {
-    CoreAccountId id(MapAccountNameToAccountId(name));
-    if (!id.empty())
-      account_ids.push_back(std::move(id));
-  }
-  UpdateAccountList(primary_account_id, GetValidAccounts(), account_ids);
 }
 
 void ProfileOAuth2TokenServiceDelegateAndroid::UpdateAccountList(
@@ -398,11 +321,6 @@ void ProfileOAuth2TokenServiceDelegateAndroid::RevokeAllCredentials() {
 
   for (const CoreAccountId& account : accounts_to_revoke)
     FireRefreshTokenRevoked(account);
-
-  JNIEnv* env = AttachCurrentThread();
-  signin::
-      Java_ProfileOAuth2TokenServiceDelegate_invalidateAccountsSeedingStatus(
-          env, java_ref_);
 }
 
 void ProfileOAuth2TokenServiceDelegateAndroid::LoadCredentials(
@@ -438,40 +356,3 @@ ProfileOAuth2TokenServiceDelegateAndroid::MapAccountNameToAccountId(
       << "Can't find account id, account_name=" << account_name;
   return account_id;
 }
-
-namespace signin {
-
-// Called from Java when fetching of an OAuth2 token is finished. The
-// |authToken| param is only valid when |result| is true.
-// |expiration_time_secs| param is the number of seconds (NOT milliseconds)
-// after the Unix epoch when the token is scheduled to expire.
-// It is set to 0 if there's no known expiration time.
-void JNI_ProfileOAuth2TokenServiceDelegate_OnOAuth2TokenFetched(
-    JNIEnv* env,
-    const JavaParamRef<jstring>& authToken,
-    const jlong expiration_time_secs,
-    jboolean isTransientError,
-    jlong nativeCallback) {
-  std::string token;
-  if (authToken)
-    token = ConvertJavaStringToUTF8(env, authToken);
-  std::unique_ptr<FetchOAuth2TokenCallback> heap_callback(
-      reinterpret_cast<FetchOAuth2TokenCallback*>(nativeCallback));
-  GoogleServiceAuthError err = GoogleServiceAuthError::AuthErrorNone();
-  if (!authToken) {
-    err =
-        isTransientError
-            ? GoogleServiceAuthError(GoogleServiceAuthError::CONNECTION_FAILED)
-            : GoogleServiceAuthError::FromInvalidGaiaCredentialsReason(
-                  GoogleServiceAuthError::InvalidGaiaCredentialsReason::
-                      CREDENTIALS_REJECTED_BY_SERVER);
-  }
-
-  const base::Time expiration_time =
-      expiration_time_secs == 0
-          ? base::Time()
-          : base::Time::FromJavaTime(expiration_time_secs * 1000);
-
-  std::move(*heap_callback).Run(err, token, expiration_time);
-}
-}  // namespace signin
diff --git a/components/signin/internal/identity_manager/profile_oauth2_token_service_delegate_android.h b/components/signin/internal/identity_manager/profile_oauth2_token_service_delegate_android.h
--- a/components/signin/internal/identity_manager/profile_oauth2_token_service_delegate_android.h
+++ b/components/signin/internal/identity_manager/profile_oauth2_token_service_delegate_android.h
@@ -57,14 +57,6 @@ class ProfileOAuth2TokenServiceDelegateAndroid
   void ReloadAllAccountsFromSystemWithPrimaryAccount(
       const absl::optional<CoreAccountId>& primary_account_id) override;
 
-  // Resumes the reload of accounts once the account seeding is complete.
-  // TODO(crbug.com/934688) Once ProfileOAuth2TokenServiceDelegate.java is
-  // internalized, use CoreAccountId instead of String.
-  void ReloadAllAccountsWithPrimaryAccountAfterSeeding(
-      JNIEnv* env,
-      const base::android::JavaParamRef<jstring>& j_primary_account_id,
-      const base::android::JavaParamRef<jobjectArray>& j_device_account_names);
-
   // Takes a the signed in sync account as well as all the other
   // android account ids and check the token status of each.
   // NOTE: TokenAvailable notifications will be sent for all accounts, even if
@@ -115,8 +107,6 @@ class ProfileOAuth2TokenServiceDelegateAndroid
   // Set accounts that have been advertised by OnRefreshTokenAvailable.
   virtual void SetAccounts(const std::vector<CoreAccountId>& accounts);
 
-  base::android::ScopedJavaGlobalRef<jobject> java_ref_;
-
   // Accounts that have been advertised by OnRefreshTokenAvailable.
   std::vector<CoreAccountId> accounts_;
 
diff --git a/components/signin/public/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java b/components/signin/public/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java
--- a/components/signin/public/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java
+++ b/components/signin/public/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java
@@ -132,13 +132,6 @@ public class SystemAccountManagerDelegate implements AccountManagerDelegate {
     }
 
     protected boolean hasFeatures(Account account, String[] features) {
-        if (hasGetAccountsPermission()) {
-            try {
-                return mAccountManager.hasFeatures(account, features, null, null).getResult();
-            } catch (AuthenticatorException | IOException | OperationCanceledException e) {
-                Log.e(TAG, "Error while checking features: ", e);
-            }
-        }
         return false;
     }
 
@@ -179,25 +172,9 @@ public class SystemAccountManagerDelegate implements AccountManagerDelegate {
     public void updateCredentials(
             Account account, Activity activity, final Callback<Boolean> callback) {
         ThreadUtils.assertOnUiThread();
-        AccountManagerCallback<Bundle> realCallback = future -> {
-            Bundle bundle = null;
-            try {
-                bundle = future.getResult();
-            } catch (AuthenticatorException | IOException e) {
-                Log.e(TAG, "Error while update credentials: ", e);
-            } catch (OperationCanceledException e) {
-                Log.w(TAG, "Updating credentials was cancelled.");
-            }
-            boolean success =
-                    bundle != null && bundle.getString(AccountManager.KEY_ACCOUNT_TYPE) != null;
             if (callback != null) {
-                callback.onResult(success);
+                callback.onResult(false);
             }
-        };
-        // Android 4.4 throws NullPointerException if null is passed
-        Bundle emptyOptions = new Bundle();
-        mAccountManager.updateCredentials(
-                account, "android", emptyOptions, activity, realCallback, null);
     }
 
     @Nullable
diff --git a/components/signin/public/android/java/src/org/chromium/components/signin/identitymanager/ProfileOAuth2TokenServiceDelegate.java b/components/signin/public/android/java/src/org/chromium/components/signin/identitymanager/ProfileOAuth2TokenServiceDelegate.java
--- a/components/signin/public/android/java/src/org/chromium/components/signin/identitymanager/ProfileOAuth2TokenServiceDelegate.java
+++ b/components/signin/public/android/java/src/org/chromium/components/signin/identitymanager/ProfileOAuth2TokenServiceDelegate.java
@@ -82,31 +82,6 @@ final class ProfileOAuth2TokenServiceDelegate {
     private void getAccessTokenFromNative(
             String accountEmail, String scope, final long nativeCallback) {
         assert accountEmail != null : "Account email cannot be null!";
-        mAccountManagerFacade.getAccounts().then(accounts -> {
-            final Account account = AccountUtils.findAccountByName(accounts, accountEmail);
-            if (account == null) {
-                ThreadUtils.postOnUiThread(() -> {
-                    ProfileOAuth2TokenServiceDelegateJni.get().onOAuth2TokenFetched(
-                            null, AccessTokenData.NO_KNOWN_EXPIRATION_TIME, false, nativeCallback);
-                });
-                return;
-            }
-            String oauth2Scope = OAUTH2_SCOPE_PREFIX + scope;
-            getAccessToken(account, oauth2Scope, new GetAccessTokenCallback() {
-                @Override
-                public void onGetTokenSuccess(AccessTokenData token) {
-                    ProfileOAuth2TokenServiceDelegateJni.get().onOAuth2TokenFetched(
-                            token.getToken(), token.getExpirationTimeSecs(), false, nativeCallback);
-                }
-
-                @Override
-                public void onGetTokenFailure(boolean isTransientError) {
-                    ProfileOAuth2TokenServiceDelegateJni.get().onOAuth2TokenFetched(null,
-                            AccessTokenData.NO_KNOWN_EXPIRATION_TIME, isTransientError,
-                            nativeCallback);
-                }
-            });
-        });
     }
 
     /**
@@ -168,32 +143,5 @@ final class ProfileOAuth2TokenServiceDelegate {
     @CalledByNative
     void seedAndReloadAccountsWithPrimaryAccount(@Nullable String primaryAccountId) {
         ThreadUtils.assertOnUiThread();
-        mAccountTrackerService.seedAccountsIfNeeded(() -> {
-            final List<Account> accounts = AccountUtils.getAccountsIfFulfilledOrEmpty(
-                    AccountManagerFacadeProvider.getInstance().getAccounts());
-            ProfileOAuth2TokenServiceDelegateJni.get()
-                    .reloadAllAccountsWithPrimaryAccountAfterSeeding(
-                            mNativeProfileOAuth2TokenServiceDelegate, primaryAccountId,
-                            AccountUtils.toAccountNames(accounts).toArray(new String[0]));
-        });
-    }
-
-    @NativeMethods
-    interface Natives {
-        /**
-         * Called to C++ when fetching of an OAuth2 token is finished.
-         * @param authToken The string value of the OAuth2 token.
-         * @param expirationTimeSecs The number of seconds after the Unix epoch when the token is
-         *         scheduled to expire. It is set to 0 if there's no known expiration time.
-         * @param isTransientError Indicates if the error is transient (network timeout or
-         *          * unavailable, etc) or persistent (bad credentials, permission denied, etc).
-         * @param nativeCallback the pointer to the native callback that should be run upon
-         *         completion.
-         */
-        void onOAuth2TokenFetched(String authToken, long expirationTimeSecs,
-                boolean isTransientError, long nativeCallback);
-        void reloadAllAccountsWithPrimaryAccountAfterSeeding(
-                long nativeProfileOAuth2TokenServiceDelegateAndroid, @Nullable String accountId,
-                String[] deviceAccountNames);
     }
 }
diff --git a/net/android/java/src/org/chromium/net/HttpNegotiateAuthenticator.java b/net/android/java/src/org/chromium/net/HttpNegotiateAuthenticator.java
--- a/net/android/java/src/org/chromium/net/HttpNegotiateAuthenticator.java
+++ b/net/android/java/src/org/chromium/net/HttpNegotiateAuthenticator.java
@@ -98,54 +98,8 @@ public class HttpNegotiateAuthenticator {
 
         @Override
         public void run(AccountManagerFuture<Account[]> future) {
-            Account[] accounts;
-            try {
-                accounts = future.getResult();
-            } catch (OperationCanceledException | AuthenticatorException | IOException e) {
-                Log.w(TAG, "ERR_UNEXPECTED: Error while attempting to retrieve accounts.", e);
-                HttpNegotiateAuthenticatorJni.get().setResult(mRequestData.nativeResultObject,
-                        HttpNegotiateAuthenticator.this, NetError.ERR_UNEXPECTED, null);
-                return;
-            }
-
-            if (accounts.length == 0) {
-                Log.w(TAG, "ERR_MISSING_AUTH_CREDENTIALS: No account provided for the kerberos "
-                                + "authentication. Please verify the configuration policies and "
-                                + "that the CONTACTS runtime permission is granted. ");
-                HttpNegotiateAuthenticatorJni.get().setResult(mRequestData.nativeResultObject,
-                        HttpNegotiateAuthenticator.this, NetError.ERR_MISSING_AUTH_CREDENTIALS,
-                        null);
-                return;
-            }
-
-            if (accounts.length > 1) {
-                Log.w(TAG, "ERR_MISSING_AUTH_CREDENTIALS: Found %d accounts eligible for the "
-                                + "kerberos authentication. Please fix the configuration by "
-                                + "providing a single account.",
-                        accounts.length);
-                HttpNegotiateAuthenticatorJni.get().setResult(mRequestData.nativeResultObject,
-                        HttpNegotiateAuthenticator.this, NetError.ERR_MISSING_AUTH_CREDENTIALS,
-                        null);
-                return;
-            }
-
-            if (lacksPermission(ContextUtils.getApplicationContext(),
-                        "android.permission.USE_CREDENTIALS", true)) {
-                // Protecting the AccountManager#getAuthToken call.
-                // API  < 23 Requires the USE_CREDENTIALS permission or throws an exception.
-                // API >= 23 USE_CREDENTIALS permission is removed
-                Log.e(TAG, "ERR_MISCONFIGURED_AUTH_ENVIRONMENT: USE_CREDENTIALS permission not "
-                                + "granted. Aborting authentication.");
-                HttpNegotiateAuthenticatorJni.get().setResult(mRequestData.nativeResultObject,
-                        HttpNegotiateAuthenticator.this,
-                        NetError.ERR_MISCONFIGURED_AUTH_ENVIRONMENT, null);
-                return;
-            }
-            mRequestData.account = accounts[0];
-            mRequestData.accountManager.getAuthToken(mRequestData.account,
-                    mRequestData.authTokenType, mRequestData.options, true /* notifyAuthFailure */,
-                    new GetTokenCallback(mRequestData),
-                    new Handler(ThreadUtils.getUiThreadLooper()));
+            // account-based authentication removed for privacy-violations concerns
+            return;
         }
     }
 
@@ -158,42 +112,8 @@ public class HttpNegotiateAuthenticator {
 
         @Override
         public void run(AccountManagerFuture<Bundle> future) {
-            Bundle result;
-            try {
-                result = future.getResult();
-            } catch (OperationCanceledException | AuthenticatorException | IOException e) {
-                Log.w(TAG, "ERR_UNEXPECTED: Error while attempting to obtain a token.", e);
-                HttpNegotiateAuthenticatorJni.get().setResult(mRequestData.nativeResultObject,
-                        HttpNegotiateAuthenticator.this, NetError.ERR_UNEXPECTED, null);
-                return;
-            }
-
-            if (result.containsKey(AccountManager.KEY_INTENT)) {
-                final Context appContext = ContextUtils.getApplicationContext();
-
-                // We wait for a broadcast that should be sent once the user is done interacting
-                // with the notification
-                // TODO(dgn) We currently hang around if the notification is swiped away, until
-                // a LOGIN_ACCOUNTS_CHANGED_ACTION filter is received. It might be for something
-                // unrelated then we would wait again here. Maybe we should limit the number of
-                // retries in some way?
-                BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {
-
-                    @Override
-                    public void onReceive(Context context, Intent intent) {
-                        appContext.unregisterReceiver(this);
-                        mRequestData.accountManager.getAuthToken(mRequestData.account,
-                                mRequestData.authTokenType, mRequestData.options,
-                                true /* notifyAuthFailure */, new GetTokenCallback(mRequestData),
-                                null);
-                    }
-
-                };
-                ContextUtils.registerProtectedBroadcastReceiver(appContext, broadcastReceiver,
-                        new IntentFilter(AccountManager.LOGIN_ACCOUNTS_CHANGED_ACTION));
-            } else {
-                processResult(result, mRequestData);
-            }
+            // account-based authentication removed for privacy-violations concerns
+            return;
         }
     }
 
diff --git a/remoting/android/java/src/org/chromium/chromoting/base/OAuthTokenFetcher.java b/remoting/android/java/src/org/chromium/chromoting/base/OAuthTokenFetcher.java
--- a/remoting/android/java/src/org/chromium/chromoting/base/OAuthTokenFetcher.java
+++ b/remoting/android/java/src/org/chromium/chromoting/base/OAuthTokenFetcher.java
@@ -93,7 +93,6 @@ public class OAuthTokenFetcher {
 
     /** Begins fetching a token. Should be called on the main thread. */
     public void fetch() {
-        fetchImpl(null);
     }
 
     /**
@@ -102,7 +101,6 @@ public class OAuthTokenFetcher {
      * @param expiredToken A previously-fetched token which has expired.
      */
     public void clearAndFetch(String expiredToken) {
-        fetchImpl(expiredToken);
     }
 
     private void fetchImpl(final String expiredToken) {
--
2.25.1
