From: Your Name <you@example.com>
Date: Tue, 14 Feb 2023 16:15:24 +0000
Subject: 110 ADDTO Multiple fingerprinting mitigations

---
 .../blink/renderer/core/dom/document.cc       |  8 +++++---
 .../renderer/core/svg/svg_graphics_element.cc |  3 ++-
 .../core/svg/svg_text_content_element.cc      | 19 +++++++++++++------
 .../offscreen_canvas_rendering_context_2d.cc  |  9 ++++++++-
 4 files changed, 28 insertions(+), 11 deletions(-)

diff --git a/third_party/blink/renderer/core/dom/document.cc b/third_party/blink/renderer/core/dom/document.cc
--- a/third_party/blink/renderer/core/dom/document.cc
+++ b/third_party/blink/renderer/core/dom/document.cc
@@ -826,10 +826,12 @@ Document::Document(const DocumentInit& initializer,
               : nullptr),
       data_(MakeGarbageCollected<DocumentData>(GetExecutionContext())) {
   DCHECK(agent_);
-  if (RuntimeEnabledFeatures::FingerprintingClientRectsNoiseEnabled()) {
+  if (RuntimeEnabledFeatures::FingerprintingClientRectsNoiseEnabled() ||
+      RuntimeEnabledFeatures::FingerprintingCanvasMeasureTextNoiseEnabled() ||
+      RuntimeEnabledFeatures::FingerprintingCanvasImageDataNoiseEnabled()) {
     // Precompute -0.0003% to 0.0003% noise factor for get*ClientRect*() fingerprinting
-    noise_factor_x_ = 1 + (base::RandDouble() - 0.5) * 0.000003;
-    noise_factor_y_ = 1 + (base::RandDouble() - 0.5) * 0.000003;
+    noise_factor_x_ = 1.0 + (base::RandDouble() - 0.5) * 0.0003;
+    noise_factor_y_ = 1.0 + (base::RandDouble() - 0.5) * 0.0003;
   } else {
     noise_factor_x_ = 1;
     noise_factor_y_ = 1;
diff --git a/third_party/blink/renderer/core/svg/svg_graphics_element.cc b/third_party/blink/renderer/core/svg/svg_graphics_element.cc
--- a/third_party/blink/renderer/core/svg/svg_graphics_element.cc
+++ b/third_party/blink/renderer/core/svg/svg_graphics_element.cc
@@ -191,7 +191,8 @@ SVGRectTearOff* SVGGraphicsElement::getBBoxFromJavascript() {
 
     if (layout_object->IsSVGText() || layout_object->IsSVGInline())
       UseCounter::Count(GetDocument(), WebFeature::kGetBBoxForText);
-    bounding_box.Scale(GetDocument().GetNoiseFactorX(), GetDocument().GetNoiseFactorY());
+    if (RuntimeEnabledFeatures::FingerprintingClientRectsNoiseEnabled())
+      bounding_box.Scale(GetDocument().GetNoiseFactorX(), GetDocument().GetNoiseFactorY());
   }
   return SVGRectTearOff::CreateDetached(bounding_box);
 }
diff --git a/third_party/blink/renderer/core/svg/svg_text_content_element.cc b/third_party/blink/renderer/core/svg/svg_text_content_element.cc
--- a/third_party/blink/renderer/core/svg/svg_text_content_element.cc
+++ b/third_party/blink/renderer/core/svg/svg_text_content_element.cc
@@ -124,7 +124,9 @@ float SVGTextContentElement::getComputedTextLength() {
   } else {
     value = SVGTextQuery(layout_object).TextLength();
   }
-  return value * GetDocument().GetNoiseFactorX();
+  return value *
+    (RuntimeEnabledFeatures::FingerprintingCanvasMeasureTextNoiseEnabled() ?
+      GetDocument().GetNoiseFactorX() : 1);
 }
 
 float SVGTextContentElement::getSubStringLength(
@@ -152,7 +154,8 @@ float SVGTextContentElement::getSubStringLength(
     value = NGSvgTextQuery(*layout_object).SubStringLength(charnum, nchars);
   else
     value = SVGTextQuery(layout_object).SubStringLength(charnum, nchars);
-  return value * GetDocument().GetNoiseFactorX();
+  return value * (RuntimeEnabledFeatures::FingerprintingCanvasMeasureTextNoiseEnabled() ?
+      GetDocument().GetNoiseFactorX() : 1);
 }
 
 SVGPointTearOff* SVGTextContentElement::getStartPositionOfChar(
@@ -176,7 +179,8 @@ SVGPointTearOff* SVGTextContentElement::getStartPositionOfChar(
   } else {
     point = SVGTextQuery(layout_object).StartPositionOfCharacter(charnum);
   }
-  point.Scale(GetDocument().GetNoiseFactorX(), GetDocument().GetNoiseFactorY());
+  if (RuntimeEnabledFeatures::FingerprintingCanvasMeasureTextNoiseEnabled())
+    point.Scale(GetDocument().GetNoiseFactorX(), GetDocument().GetNoiseFactorY());
   return SVGPointTearOff::CreateDetached(point);
 }
 
@@ -201,7 +205,8 @@ SVGPointTearOff* SVGTextContentElement::getEndPositionOfChar(
   } else {
     point = SVGTextQuery(layout_object).EndPositionOfCharacter(charnum);
   }
-  point.Scale(GetDocument().GetNoiseFactorX(), GetDocument().GetNoiseFactorY());
+  if (RuntimeEnabledFeatures::FingerprintingCanvasMeasureTextNoiseEnabled())
+    point.Scale(GetDocument().GetNoiseFactorX(), GetDocument().GetNoiseFactorY());
   return SVGPointTearOff::CreateDetached(point);
 }
 
@@ -226,7 +231,8 @@ SVGRectTearOff* SVGTextContentElement::getExtentOfChar(
   } else {
     rect = SVGTextQuery(layout_object).ExtentOfCharacter(charnum);
   }
-  rect.Scale(GetDocument().GetNoiseFactorX(), GetDocument().GetNoiseFactorY());
+  if (RuntimeEnabledFeatures::FingerprintingCanvasMeasureTextNoiseEnabled())
+    rect.Scale(GetDocument().GetNoiseFactorX(), GetDocument().GetNoiseFactorY());
   return SVGRectTearOff::CreateDetached(rect);
 }
 
@@ -257,7 +263,8 @@ int SVGTextContentElement::getCharNumAtPosition(
                                             DocumentUpdateReason::kJavaScript);
   auto* layout_object = GetLayoutObject();
   gfx::PointF target = gfx::PointF(point->Target()->Value());
-  target.Scale(GetDocument().GetNoiseFactorX(), GetDocument().GetNoiseFactorY());
+  if (RuntimeEnabledFeatures::FingerprintingCanvasMeasureTextNoiseEnabled())
+    target.Scale(GetDocument().GetNoiseFactorX(), GetDocument().GetNoiseFactorY());
   if (IsNGTextOrInline(layout_object)) {
     return NGSvgTextQuery(*layout_object)
         .CharacterNumberAtPosition(target);
diff --git a/third_party/blink/renderer/modules/canvas/offscreencanvas2d/offscreen_canvas_rendering_context_2d.cc b/third_party/blink/renderer/modules/canvas/offscreencanvas2d/offscreen_canvas_rendering_context_2d.cc
--- a/third_party/blink/renderer/modules/canvas/offscreencanvas2d/offscreen_canvas_rendering_context_2d.cc
+++ b/third_party/blink/renderer/modules/canvas/offscreencanvas2d/offscreen_canvas_rendering_context_2d.cc
@@ -5,6 +5,7 @@
 #include "third_party/blink/renderer/modules/canvas/offscreencanvas2d/offscreen_canvas_rendering_context_2d.h"
 
 #include "base/metrics/histogram_functions.h"
+#include "base/rand_util.h"
 #include "base/trace_event/trace_event.h"
 #include "third_party/blink/public/common/features.h"
 #include "third_party/blink/renderer/bindings/modules/v8/v8_union_gpucanvascontext_imagebitmaprenderingcontext_offscreencanvasrenderingcontext2d_webgl2renderingcontext_webglrenderingcontext.h"
@@ -756,9 +757,15 @@ TextMetrics* OffscreenCanvasRenderingContext2D::measureText(
 
   TextDirection direction = ToTextDirection(GetState().GetDirection());
 
-  return MakeGarbageCollected<TextMetrics>(font, direction,
+  TextMetrics* text_metrics = MakeGarbageCollected<TextMetrics>(font, direction,
                                            GetState().GetTextBaseline(),
                                            GetState().GetTextAlign(), text);
+  // Scale text metrics if enabled
+  if (RuntimeEnabledFeatures::FingerprintingCanvasMeasureTextNoiseEnabled()) {
+    float v = 1.0 + (base::RandDouble() - 0.5) * 0.0003;
+    text_metrics->Shuffle(v);
+  }
+  return text_metrics;
 }
 
 const Font& OffscreenCanvasRenderingContext2D::AccessFont() {
--
2.25.1
